













    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/golang/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/golang/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/tags/golang/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        

        <link>http://localhost:1313/tags/golang/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>Golang · Tags · About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>If you&rsquo;ve been following the blog, you know that I&rsquo;m a fan of <a href="https://github.com/spf13/cobra">cobra</a> as a CLI library. Let me share how I use <a href="https://golang.org/pkg/text/tabwriter/">tabwriter</a> to compliment cobra&rsquo;s autogenerated help information. For reference, you can check this <a href="https://flowerinthenight.com/blog/2017/12/01/golang-cobra-glog">post</a> as well.</p>
<p>The following code is a copy (not an exact copy) of one of the tools that I use at work.</p>
<p>{% gist d00e0d81ba85b3940312f0a3c33bcaef %}</p>
<p>It will look something like this.</p>
<p>{% highlight plaintext %}
Trigger a manual run, among other tools.</p>
<p>Format for the &ndash;input flag:
payer:<id>[/link1,link2,&hellip;]     run manual calculation at payer level, optional link acct list is for log filtering
msp:<id>                         run manual calculation at MSP level
link:<id>                        run manual calculation at link acct level
detectri:&lt;msp|payer&gt;[:id]        run RI detection manually
detectsp:&lt;msp|payer&gt;[:id]        run SavingsPlan detection manually
curlinks:&lt;msp|payer&gt;[:id]        detect actual customers from CUR, can use &ndash;detect-moved-payer flag
fees:<id>                        detect fees for the input link id
detecttags:<id>                  detect tags for the input payer id</p>
<p>Notes:</p>
<ul>
<li>When triggering CUR (using trigger: input), it&rsquo;s recommended to use the &ndash;use-sns flag.</li>
</ul>
<p>Usage:
linkbatchd manualrun [flags]</p>
<p>Flags:
&ndash;input string              see subcommand description for more details
&ndash;date string               date to trigger in UTC, fmt: yyyy-mm-dd, yyyy-mm-dd,yyyy-mm-dd for date range (from,to)
&ndash;invoice-type string       type of invoice to calculate: &lsquo;account&rsquo; or &lsquo;cross_tag&rsquo;, used in trigger: input
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2020-02-27-cobra-tabwriter/</guid>

                
                    <link>http://localhost:1313/blog/2020-02-27-cobra-tabwriter/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using tabwriter to improve on cobra’s help information</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This post is somehow related to a <a href="https://flowerinthenight.com/blog/2017/12/01/golang-cobra-glog">previous article</a> about using <a href="https://github.com/golang/glog">glog</a> together with <a href="https://github.com/spf13/cobra">cobra</a>. This time, we will be using <a href="https://github.com/kubernetes/klog">klog</a> which is a Kubernetes fork of <a href="https://github.com/golang/glog">glog</a>.</p>
<p>{% gist c1d3267a6e5cc26b9025b4eed74ce00a %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-the--h-command">run the -h command</h1>
<p>$ ./cobraklog -h
Usage of ./cobraklog:
-alsologtostderr
log to standard error as well as files
-log_backtrace_at value
when logging hits line file:N, emit a stack trace
-log_dir string
If non-empty, write log files in this directory
-log_file string
If non-empty, use this log file
-logtostderr
log to standard error instead of files
-skip_headers
If true, avoid header prefixes in the log messages
-stderrthreshold value
logs at or above this threshold go to stderr (default 2)
-v value
log level for V logs
-vmodule value
comma-separated list of pattern=N settings for file-filtered logging
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-cobras-help-command">run cobra&rsquo;s <code>help</code> command</h1>
<p>$ ./cobraklog help
Use klog together with cobra.</p>
<p>Usage:
cobraklog [command]</p>
<p>Available Commands:
help        Help about any command
run         run command</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;log_file string                  If non-empty, use this log file
&ndash;logtostderr                      log to standard error instead of files
&ndash;skip_headers                     If true, avoid header prefixes in the log messages
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for cobraklog</p>
<p>Use &ldquo;cobraklog [command] &ndash;help&rdquo; for more information about a command.
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-help-on-our-subcommand-run">run <code>help</code> on our subcommand <code>run</code></h1>
<p>$ ./cobraklog help run
Run command.</p>
<p>Usage:
cobraklog run [flags]</p>
<p>Flags:
&ndash;str string   string to print (default &ldquo;hello world&rdquo;)
-h, &ndash;help         help for run</p>
<p>Global Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;log_file string                  If non-empty, use this log file
&ndash;logtostderr                      log to standard error instead of files
&ndash;skip_headers                     If true, avoid header prefixes in the log messages
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-run-subcommand">run the <code>run</code> subcommand</h1>
<p>$ ./cobraklog run &ndash;logtostderr
I0205 16:37:39.110849   13672 main.go:41] echo=hello world</p>
<p>$ ./cobraklog run &ndash;logtostderr &ndash;str &ldquo;hello alien world&rdquo;
I0205 16:39:37.212187   13685 main.go:41] echo=hello alien world
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2019-02-05-golang-cobra-klog/</guid>

                
                    <link>http://localhost:1313/blog/2019-02-05-golang-cobra-klog/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using k8s.io/klog together with cobra in golang</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<p>This is a followup on a <a href="https://flowerinthenight.com/blog/2019/07/30/homebrew-golang">previous post</a> that is a bit more manual. This is a little bit easier.</p>
<h4 id="a-create-your-own-homebrew-tap">a) Create your own Homebrew tap</h4>
<p>Create a new GitHub public repository with a prefix <code>homebrew-</code>, i.e. <code>homebrew-tap</code>. This will host all the apps that you want to distribute via your tap. Users will install your apps using the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="no-need-to-include-the-homebrew--prefix">No need to include the &lsquo;homebrew-&rsquo; prefix</h1>
<p>$ brew tap flowerinthenight/tap
$ brew install <toolname></p>
<h1 id="or-one-liner">Or one-liner</h1>
<p>$ brew install flowerinthenight/tap/<toolname>
{% endhighlight %}</p>
<h4 id="b-lets-use-github-actions-to-setup-goreleaserhttpsgithubcomgoreleasergoreleaser">b) Let&rsquo;s use Github Actions to setup <a href="https://github.com/goreleaser/goreleaser">goreleaser</a></h4>
<p>First, add a <code>.goreleaser.yml</code> config file to your Go repo. Here&rsquo;s an example:</p>
<script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2Fflowerinthenight%2Fkubepfm%2Fblob%2Fmaster%2F.goreleaser.yml&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on"></script>
<p>The section of note here is the <code>brews:</code> part. You can check goreleaser&rsquo;s <a href="https://goreleaser.com/quick-start/">Quickstart</a> guide for more information.</p>
<p>Here&rsquo;s an example of a GitHub Action config on how to setup <a href="https://github.com/goreleaser/goreleaser">goreleaser</a> to do the release for our tags.</p>
<script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2Fflowerinthenight%2Fkubepfm%2Fblob%2Fmaster%2F.github%2Fworkflows%2Fmain.yml&style=default&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on"></script>
<p>See the <code>name: Run goreleaser</code> section. You need to add a personal access token with <code>repo, workflow, write:packages</code> permissions to your repository&rsquo;s secrets. In this example, the name used is <code>GH_PAT</code> but you can use other names as well.</p>
<h4 id="c-do-a-tagged-release">c) Do a tagged release</h4>
<p>Tagged releases should now do a deployment to your tap.</p>
<p>{% highlight shell %}
$ git tag v1.0.0
$ git push &ndash;tags
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2023-04-13-homebrew-golang-p2/</guid>

                
                    <link>http://localhost:1313/blog/2023-04-13-homebrew-golang-p2/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using Homebrew for distributing Go apps (part 2)</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<h4 id="a-create-your-own-homebrew-tap">a) Create your own homebrew tap</h4>
<p>Create a new GitHub public repository with a prefix <code>homebrew-</code>, i.e. <code>homebrew-tap</code>. This will house all the apps that you want to distribute via your tap. Users will install your apps using the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="no-need-to-include-the-homebrew--prefix">No need to include the &lsquo;homebrew-&rsquo; prefix</h1>
<p>$ brew tap flowerinthenight/tap
$ brew install <toolname>
{% endhighlight %}</p>
<p>The <code>toolname</code> part will correspond to the filename inside your repository tap. If your repository has an entry with a filename of <code>toolx.rb</code>, it can be installed using the following commands:</p>
<p>{% highlight shell %}
$ brew tap flowerinthenight/tap
$ brew install toolx
{% endhighlight %}</p>
<p>Here&rsquo;s an example of a formula for a golang app:</p>
<p>{% highlight ruby %}
class Kubepfm &lt; Formula
desc &ldquo;A simple wrapper to kubectl port-forward for multiple pods.&rdquo;
homepage &ldquo;<a href="https://github.com/flowerinthenight/kubepfm"">https://github.com/flowerinthenight/kubepfm"</a>
url &ldquo;<a href="https://github.com/flowerinthenight/kubepfm/archive/v0.0.3.tar.gz"">https://github.com/flowerinthenight/kubepfm/archive/v0.0.3.tar.gz"</a>
sha256 &ldquo;7852a5500f3e35a47b57d138c756de5641bc3c48bf7e329d2724c1107ccb1207&rdquo;</p>
<p>depends_on &ldquo;go&rdquo;</p>
<p>def install
ENV[&ldquo;GOPATH&rdquo;] = buildpath
ENV[&ldquo;GO111MODULE&rdquo;] = &ldquo;on&rdquo;
ENV[&ldquo;GOFLAGS&rdquo;] = &ldquo;-mod=vendor&rdquo;
ENV[&ldquo;PATH&rdquo;] = &ldquo;#{ENV[&ldquo;PATH&rdquo;]}:#{buildpath}/bin&rdquo;
(buildpath/&ldquo;src/github.com/flowerinthenight/kubepfm&rdquo;).install buildpath.children
cd &ldquo;src/github.com/flowerinthenight/kubepfm&rdquo; do
system &ldquo;go&rdquo;, &ldquo;build&rdquo;, &ldquo;-o&rdquo;, bin/&ldquo;kubepfm&rdquo;, &ldquo;.&rdquo;
end
end</p>
<p>test do
assert_match /Simple port-forward wrapper tool for multiple pods/, shell_output(&rdquo;#{bin}/kubepfm -h&rdquo;, 0)
end
end
{% endhighlight %}</p>
<p>You can check out <a href="https://github.com/flowerinthenight/homebrew-tap">https://github.com/flowerinthenight/homebrew-tap</a> for reference.</p>
<p>The <code>url</code> part is the path of the source <code>tar.gz</code> of your source files. You can create this by using <a href="https://help.github.com/en/enterprise/2.16/user/articles/about-releases">tagged releases</a> in GitHub.</p>
<p>You can generate the <code>sha256</code> part by running the <code>shasum</code> (OSX) or <code>sha256sum</code> (Linux) tool against your <code>tar.gz</code> file.</p>
<h4 id="b-updating-your-formula">b) Updating your formula</h4>
<p>If you have a new version of your tool, first, create a new tag or release. Download the new <code>tar.gz</code> file of the new release, run the <code>sha256sum/shasum</code> tool against it, and update the <code>.rb</code> file in your tap repository.</p>
<p>Example:</p>
<p>{% highlight shell %}
$ git clone <a href="https://github.com/flowerinthenight/kubepfm">https://github.com/flowerinthenight/kubepfm</a>
$ cd kubepfm/
$ git tag v1.0.1 # our new tag
$ git push &ndash;tags # push tags to remote
$ wget <a href="https://github.com/flowerinthenight/kubepfm/archive/v1.0.1.tar.gz">https://github.com/flowerinthenight/kubepfm/archive/v1.0.1.tar.gz</a></p>
<h1 id="osx">OSX</h1>
<p>$ shasum -a 256 v1.0.1.tar.gz
7852a5500f3e35a47b57d138c756de5641bc3c48bf7e329d2724c1107ccb1207  v1.0.1.tar.gz</p>
<h1 id="linux">Linux</h1>
<p>$ sha256sum v1.0.1.tar.gz
7852a5500f3e35a47b57d138c756de5641bc3c48bf7e329d2724c1107ccb1207  v1.0.1.tar.gz
{% endhighlight %}</p>
<p>Finally, update the <code>url</code> and <code>sha256</code> part of your <code>.rb</code> file. Users will now be able to update their copies:</p>
<p>{% highlight shell %}
$ brew upgrade kubepfm
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2019-07-30-homebrew-golang/</guid>

                
                    <link>http://localhost:1313/blog/2019-07-30-homebrew-golang/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using Homebrew for distributing Go (golang) apps</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>If you have been programming with golang, you&rsquo;ve probably heard of <a href="https://github.com/spf13/cobra">cobra</a>. I use it extensively at work and also in my personal projects.</p>
<p>Recently though, I&rsquo;ve been using <a href="https://github.com/golang/glog">glog</a> more and more. And I quite like it. The thing is, it has a couple of flag definitions in its <code>init()</code> function using golang&rsquo;s builtin <code>flag</code> library. And I wanted to include those flags into cobra&rsquo;s flag definitions. This is how I did it.</p>
<p>{% gist 221e26cea495e5adc3ae6a323b4fbdba %}</p>
<p>Generated help information will now look something like this.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-help-command">run the help command</h1>
<p>$ ./cobraglog -h
Use glog with cobra.</p>
<p>Usage:
[flags]</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;echo string                      echo string (default &ldquo;hello&rdquo;)
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;logtostderr                      log to standard error instead of files
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for this command
{% endhighlight %}</p>
<p>Note that our cobra-defined flag <code>--echo</code> is also there. The rest are defined by glog internally. Finally, run the application.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-binary-providing-the-logtostderr-flag-defined-by-glog">run the binary, providing the logtostderr flag defined by glog</h1>
<p>$ ./cobraglog &ndash;logtostderr
I1129 13:49:34.166660    2138 main.go:28] echo (info): hello
W1129 13:49:34.166718    2138 main.go:29] echo (warn): hello
E1129 13:49:34.166722    2138 main.go:30] echo (error): hello
{% endhighlight %}</p>
<p>Here&rsquo;s another example using subcommands.</p>
<p>{% gist 447f983882720d817f3b92088f98aaa3 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-12-01-golang-cobra-glog/</guid>

                
                    <link>http://localhost:1313/blog/2017-12-01-golang-cobra-glog/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using glog together with cobra in golang</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I use this handy little script to switch between different Go (golang) versions:</p>
<p>{% highlight shell %}
#!/bin/bash
$1 version &amp;&gt;/dev/null
if [ $? -eq 0 ]; then
ln -sf $GOPATH/bin/$1 $HOME/.local/bin/go
go version
exit 0
fi</p>
<p>go get golang.org/dl/$1 &amp;&amp; $1 download
ln -sf $GOPATH/bin/$1 $HOME/.local/bin/go
go version
{% endhighlight %}</p>
<p>Saving this as an executable script <code>goset</code>, I could now switch to different versions like so:</p>
<p>{% highlight shell %}
$ goset go1.16.4
go version go1.16.4 linux/amd64
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2021-05-31-switching-different-go-versions/</guid>

                
                    <link>http://localhost:1313/blog/2021-05-31-switching-different-go-versions/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Switching to different Go versions</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Some golang-based tools I&rsquo;ve used (or even written) use the builtin <code>log</code> package that output logs to stderr by default. I also use <a href="https://en.wikipedia.org/wiki/Tee_(command)">tee</a> for piping console outputs to file for later viewing. This is the command I generally use:</p>
<p>{% highlight shell %}</p>
<h1 id="example-tool">Example tool:</h1>
<p>$ sometool &ndash;flag1 &ndash;flag2 2&gt;&amp;1 | tee out.txt</p>
<h1 id="21----redirect-stderr-to-stdout">2&gt;&amp;1 &lt;&ndash; redirect stderr to stdout</h1>
<h1 id="tee----pipe-the-console-output-to-outtxt-while-retaining-the-actual-console-logs-during-command-execution">tee &lt;&ndash; pipe the console output to out.txt while retaining the actual console logs during command execution</h1>
<p>{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2019-10-29-stderr-tee/</guid>

                
                    <link>http://localhost:1313/blog/2019-10-29-stderr-tee/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Output golang cmdline tools to stdout and file using tee</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>If you&rsquo;re using <a href="https://github.com/golang/glog">glog</a> in your Go codes, you can output those when running <code>go test ...</code> by using the <code>--args</code> parameter:</p>
<p>{% highlight shell %}
$ go test -v ./&hellip; -count=1 -cover -race -mod=vendor &ndash;args &ndash;logtostderr &ndash;v=1
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2020-03-18-glog-gotest/</guid>

                
                    <link>http://localhost:1313/blog/2020-03-18-glog-gotest/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Output glog from go test</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I recently uploaded a tool to GitHub that wraps the <code>kubectl get events -w</code> command for watching <code>OOMKilled</code> events in Kubernetes. It&rsquo;s called <a href="https://github.com/flowerinthenight/oomkill-watch"><code>oomkill-watch</code></a>. You can check out the code <a href="https://github.com/flowerinthenight/oomkill-watch">here</a>. You might find this useful.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2024-05-03-oomkill-watch/</guid>

                
                    <link>http://localhost:1313/blog/2024-05-03-oomkill-watch/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>oomkill-watch - A tool to watch OOMKilled events in k8s</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I posted an <a href="https://tech.mobingi.com/2018/09/25/ouchan-monorepo.html">article</a> for <a href="https://twitter.com/mobingi">@mobingi</a> about its Golang-based monorepo. Please check it out. Thanks.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2018-09-25-ouchan-monorepo/</guid>

                
                    <link>http://localhost:1313/blog/2018-09-25-ouchan-monorepo/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Mobingi’s golang monorepo</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I shared a simple piece of code for getting a process&rsquo; memory usage in Linux. It&rsquo;s called <a href="https://github.com/flowerinthenight/memx"><code>memx</code></a>. It&rsquo;s Linux-specific only as it reads the <a href="https://en.wikipedia.org/wiki/Proportional_set_size">proportional set size (PSS)</a> data from either <code>/proc/{pid}/smaps_rollup</code> (if present) or <code>/proc/{pid}/smaps</code> file. I&rsquo;ve used this piece of code many times at work. We use memory-mapped files extensively in some of our services and this is how we get more accurate results. Very useful in debugging <code>OOMKilled</code> events in k8s.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2024-05-30-memx-memory-usage-linux/</guid>

                
                    <link>http://localhost:1313/blog/2024-05-30-memx-memory-usage-linux/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>memx - Get process’ memory usage (Linux)</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This library has been in our production for about a year already and is one of the critical components in our backend. We mainly use it for app-level orchestration between pods. It&rsquo;s called <code>hedge</code> and you can find the code <a href="https://github.com/flowerinthenight/hedge/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2022-09-21-spindle-based-distributed-computing-lib/</guid>

                
                    <link>http://localhost:1313/blog/2022-09-21-spindle-based-distributed-computing-lib/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>hedge - A simple distributed computing library</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This might be hacky and there might be a proper way to do this but recently, I needed to generate all the functions&rsquo; gRPC-generated full names from our protobuf definitions. This is part of our RBAC module that needs to filter gRPC function calls. I got the list from our <a href="https://github.com/alphauslabs/blue-sdk-go">generated Go client</a> using the following command(s):</p>
<p>{% highlight shell %}</p>
<h1 id="main-command">Main command:</h1>
<p>$ grep -o -R -i -E &lsquo;&quot;/blueapi..*&quot;&rsquo; . | awk -F&rsquo;:&rsquo; &lsquo;{gsub(/&quot;/, &ldquo;&rdquo;, $2); print &ldquo;-&rdquo;, substr($2, 2);}&rsquo; | sort | uniq</p>
<h1 id="actual-commands-save-as-yaml">Actual commands; save as yaml:</h1>
<p>$ echo &ldquo;functions:&rdquo; &gt; /tmp/funcs.yaml
$ grep -o -R -i -E &lsquo;&quot;/blueapi..*&quot;&rsquo; . | awk -F&rsquo;:&rsquo; &lsquo;{gsub(/&quot;/, &ldquo;&rdquo;, $2); print &ldquo;-&rdquo;, substr($2, 2);}&rsquo; | <br>
sort | uniq &raquo; /tmp/funcs.yaml
{% endhighlight %}</p>
<p>The final list is uploaded to this <a href="https://github.com/alphauslabs/blueapi-functions">repository</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2021-07-31-extracting-grpc-funcs-to-list/</guid>

                
                    <link>http://localhost:1313/blog/2021-07-31-extracting-grpc-funcs-to-list/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Extract gRPC-generated functions to a list</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I recently uploaded a tool to GitHub that downloads <a href="https://aws.amazon.com/athena/">AWS Athena</a> query results as CSV. It&rsquo;s called <a href="https://github.com/flowerinthenight/athena2csv"><code>athena2csv</code></a>. You can check out the code <a href="https://github.com/flowerinthenight/athena2csv">here</a>. You might find this useful.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2019-03-09-athena2csv/</guid>

                
                    <link>http://localhost:1313/blog/2019-03-09-athena2csv/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Download AWS Athena query results as CSV</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For self reference:</p>
<p>Sample code as to how to authenticate <a href="https://github.com/aws/aws-sdk-go-v2">aws-sdk-go-v2</a> using <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">external ids</a>:</p>
<p>{% gist 0b745685a95888084ceb7e47f56827f4 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2023-03-01-authenticate-aws-sdk-v2-external-id/</guid>

                
                    <link>http://localhost:1313/blog/2023-03-01-authenticate-aws-sdk-v2-external-id/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Authenticating Go AWS SDK v2 using external id</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For self reference:</p>
<p>To authenticate the <a href="https://github.com/aws/aws-sdk-go-v2">Golang AWS SDK v2</a> using assume roles, refer to the following code snippets:</p>
<p>{% gist 33f5e03e9990abcc01203acbea178a1a %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2021-04-30-authenticate-aws-sdk-golang-v2/</guid>

                
                    <link>http://localhost:1313/blog/2021-04-30-authenticate-aws-sdk-golang-v2/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Authenticating Go AWS SDK v2 using assume roles</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For self reference:</p>
<p>Sample code as to how to authenticate <a href="https://github.com/aws/aws-sdk-go">aws-sdk-go</a> using <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">external ids</a>:</p>
<p>{% gist 5980424a19f6fe58e613f6c9c9392c3e %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2022-10-17-authenticate-aws-sdk-external-id/</guid>

                
                    <link>http://localhost:1313/blog/2022-10-17-authenticate-aws-sdk-external-id/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Authenticating Go AWS SDK using external id</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I uploaded a tool that can sync DynamoDB tables between accounts. It&rsquo;s called <code>dysync</code> and you can find the code <a href="https://github.com/flowerinthenight/dysync/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2020-08-31-dysync/</guid>

                
                    <link>http://localhost:1313/blog/2020-08-31-dysync/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A tool for synching DynamoDB tables between accounts</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I uploaded a tool that can query DynamoDB tables. It&rsquo;s called <code>lsdy</code> and you can find the code <a href="https://github.com/flowerinthenight/lsdy/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2020-05-13-lsdy-dynamodb-query/</guid>

                
                    <link>http://localhost:1313/blog/2020-05-13-lsdy-dynamodb-query/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A tool for querying DynamoDB</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I uploaded a yet another distributed locking library, this time, based on <a href="https://cloud.google.com/spanner/">Cloud Spanner</a> and <a href="https://cloud.google.com/spanner/docs/true-time-external-consistency">TrueTime</a> technology. It&rsquo;s called <code>spindle</code> and you can find the code <a href="https://github.com/flowerinthenight/spindle/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2020-12-26-spanner-distributed-lock/</guid>

                
                    <link>http://localhost:1313/blog/2020-12-26-spanner-distributed-lock/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A Spanner-based distributed locking library</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>The only options for updating modules that I&rsquo;m aware so far are a) <code>go get -u all</code>, and b) specific modules, i.e. <code>go get -u domain.com/module[@v1.2.3]</code>. For problematic ones, my only option is b), which is a bit time consuming. There must be some other way out there that I&rsquo;m not aware of but at the moment, I use this simple command:</p>
<p>{% highlight shell %}
$ cat go.mod | grep -i &lsquo;github&rsquo; | grep -i -v &lsquo;indirect&rsquo; | awk &lsquo;{print $1}&rsquo; &gt; update; <br>
while read -r v; do go get -u $v; done &lt; update; rm update
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2021-06-30-hacky-way-update-go-modules/</guid>

                
                    <link>http://localhost:1313/blog/2021-06-30-hacky-way-update-go-modules/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A hacky way to update problematic Go modules</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I uploaded an example of a golang-based monorepo in <a href="https://github.com/flowerinthenight/golang-monorepo">GitHub</a>. This is a stripped down version of what we have <a href="https://twitter.com/mobingi">@mobingi</a>. If you are planning to have a golang-based monorepo, please have a look.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2018-02-06-golang-monorepo/</guid>

                
                    <link>http://localhost:1313/blog/2018-02-06-golang-monorepo/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A golang-based monorepo example</title>
                
            </item>
        
    </channel>
</rss>
