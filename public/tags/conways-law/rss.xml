













    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/conways-law/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/conways-law/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/tags/conways-law/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        

        <link>http://localhost:1313/tags/conways-law/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>Conways-Law · Tags · About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>You&rsquo;ve probably heard of the warning &ldquo;Don&rsquo;t ship the org chart&rdquo; common among product development circles. I always thought of this as synonymous to <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway&rsquo;s Law</a> which states that organizations design systems that mirror their own communication structure. In my experience, I&rsquo;ve come to believe that this is true. Whether you like it or not, it is an eventuality. At some point I thought that to be an effective solutions architect, you have to be an &ldquo;org architect&rdquo;. Or in order to achieve a certain system architecture, you&rsquo;re better off rearranging your org structure than influence cross-functional architects or senior engineering leadership to agree with you. It may work for a time, especially during the start, but eventually, as engineers come and go, the org-mirrored design will out. But I think there&rsquo;s more nuance to this than what&rsquo;s obvious.</p>
<p>There are several types of org structures but I will cover only what&rsquo;s relevant to my situation which is startups. This might be anecdotal but between peers, the most common types fall under these two broad classifications: less boundaries or bigger teams, and smaller, often siloed teams. Teams with less boundaries tend to move slower because more people need to communicate for alignment but will produce a more coherent product. Smaller teams on the other hand, move faster but their outputs are more difficult to integrate together, resulting in an inconsistent product experience. Personally, I don&rsquo;t really have a strong opinion on which is better. I think there are phases in a startup where one works better than the other. But this requires you to understand what you want to build in the first place and then build your org chart around that.</p>
<p>There&rsquo;s also the case of building your org structure based on product lines if you have multiple products as opposed to functional teams covering multiple products. Product-based org structures might promote autonomy and quicker response to industry changes but could easily lead to system duplication (wasted resources). Functional structure however, encourages specialization and focus but inhibits multi-boundary communications.</p>
<p>You may argue that, &ldquo;Does it really matter? Customers don&rsquo;t really care about how your org is structured as long as your product is usable and has great UX.&rdquo; I would actually agree that this is a good baseline for structuring your org. You will have several vertical teams per product but an overlapping horizontal team that ensures UX coherence, usability, and branding. I think this is what the <a href="https://www.hbs.edu/ris/Publication%20Files/16-124_7ae90679-0ce6-4d72-9e9d-828872c7af49.pdf">Mirroring Hypothesis</a> study (confirms Conway&rsquo;s Law) refers to as partial mirroring; in which technological knowledge are invested, shared, and acquired beyond operational boundaries. &ldquo;API-first&rdquo; companies come to mind as in partial mirroring, building contractual relationships (APIs) that support technical interdependency across boundaries seems to work. And more often than not, your org structure will undergo changes multiple times during your product&rsquo;s lifetime, which will result into subsequent changes to your system&rsquo;s design that will then mirror the new org, and so on and so forth, so you might as well embrace this dynamism instead of fighting against it.</p>
<p>Finally, the study also highlights collaboration patterns in the open source sphere that do not support the mirroring hypothesis (and thus, Conway&rsquo;s Law). My experience with OSS collaboration is mostly outside work so I&rsquo;m interested to know if there is a case for adopting OSS-style structure within the organization. I think that&rsquo;s a good topic for another day.</p>
<p>To conclude, instead of going with the warning &ldquo;don&rsquo;t ship the org chart&rdquo;, since you will ship your org chart anyway, be aware of it, understand it, and make sure it works on your favor.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2023-08-09-cto-diaries-on-not-shipping-your-org-chart/</guid>

                
                    <link>http://localhost:1313/blog/2023-08-09-cto-diaries-on-not-shipping-your-org-chart/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>CTO Diaries #4: On not shipping your org chart</title>
                
            </item>
        
    </channel>
</rss>
