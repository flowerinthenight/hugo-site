














    

    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<feed  xml:lang="en"  xmlns="http://www.w3.org/2005/Atom">
    
        <author>
            
                <email>example@example.com</email>
            

            
                <name>John Doe</name>
            

            
                <uri>https://example.com</uri>
            
        </author>
    

    
        <icon>http://localhost:1313/</icon>
    

    <id>tag:localhost:1313,0001-01-01:/tags/go/atom.xml</id>

    
        

        
            
        

        
            <link href="http://localhost:1313/tags/go/atom.xml" rel="self" type="application/atom+xml"/>
        
    
        

        
            
        

        
            <link href="http://localhost:1313/tags/go/" rel="alternate" type="text/html"/>
        
    
        

        

        
            <link href="http://localhost:1313/tags/go/rss.xml" rel="alternate" type="application/rss+xml"/>
        
    

    

    
        <logo>http://localhost:1313/</logo>
    

    
        <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
    

    

    <title type="html"><![CDATA[Go · Tags · About]]></title>
    <updated>2024-05-30T00:00:00-07:00</updated>

    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a <a href="https://github.com/flowerinthenight/rmq">simple wrapper</a> to <a href="https://github.com/streadway/amqp">streadway/amqp</a> library for RabbitMQ with support for auto reconnections. This is a simplified version of what I&rsquo;m using in production.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-06-30-amqp-wrapper/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-06-30-amqp-wrapper/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Wrapper for amqp library for RabbitMQ]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is to show a simple way of using Docker&rsquo;s <a href="https://github.com/docker/docker-credential-helpers">credential helper package</a> to utilize the system&rsquo;s native credential store as storage for your Golang-based CLI applications&rsquo; login credentials. This means Keychain for OSX, <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa374792(v=vs.85).aspx"><code>wincred</code></a> for Windows, and <a href="https://www.passwordstore.org/"><code>pass</code></a> for Linux. We use <a href="https://www.passwordstore.org/"><code>pass</code></a> here since <a href="https://specifications.freedesktop.org/secret-service/"><code>secretservice</code></a>, although supported, doesn&rsquo;t work out of the box in headless servers.</p>
<p>Here&rsquo;s a simple implementation of our <code>Set</code>, <code>Get</code>, and <code>Del</code> functions.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore.go?footer=minimal"></script>
<p>Then we create our <code>_darwin.go</code>, <code>_linux.go</code>, and <code>_windows.go</code> files for OS specific implementations.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_darwin.go?footer=minimal"></script>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_windows.go?footer=minimal"></script>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_linux.go?footer=minimal"></script>
<p>Here&rsquo;s a quickstart guide to setup <a href="https://www.passwordstore.org/"><code>pass</code></a> in Ubuntu systems.</p>
<p>{% highlight shell %}</p>
<h1 id="install-pass">install pass</h1>
<p>$ sudo apt-get install pass</p>
<h1 id="generate-your-own-key-using-gpg2-do-not-use-a-passphrase">generate your own key using gpg2, do not use a passphrase</h1>
<p>$ gpg2 &ndash;gen-key</p>
<h1 id="if-the-cmd-seems-stuck-due-to-lack-of-entropy-you-can-open-another-window-and-run-the-ff-cmd">if the cmd seems stuck due to lack of entropy, you can open another window and run the ff cmd:</h1>
<h1 id="dd-ifdevsda-ofdevzero">dd if=/dev/sda of=/dev/zero</h1>
<h1 id="list-your-keys">list your keys</h1>
<h2 id="homeusergnupgpubringkbx">$ gpg2 &ndash;list-keys
/home/user/.gnupg/pubring.kbx</h2>
<p>pub   rsa2048/5486B0F6 2017-09-22 [SC]
uid         [ultimate] IamGroot <a href="mailto:iamgroot@domain.com">iamgroot@domain.com</a>
sub   rsa2048/CDC4C430 2017-09-22 [E]</p>
<h1 id="initialize-pass-use-the-pub-key-id">initialize pass (use the pub key id)</h1>
<p>$ pass init 5486B0F6
{% endhighlight %}</p>
<p>Here&rsquo;s an example on how to use our nativestore functions.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_test.go?footer=minimal"></script>
<p>Finally, you can refer to the whole package <a href="https://github.com/mobingilabs/mobingi-sdk-go/tree/master/pkg/nativestore">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-10-30-nativestore/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-10-30-nativestore/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using OS specific stores for storing CLI credentials for golang apps]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>In Docker&rsquo;s <a href="https://docs.docker.com/engine/admin/logging/etwlogs/">ETW logging driver doc</a>, it uses the tool <code>logman</code> to view the logs. In this article, I will show you how to use <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff685116(v=vs.85).aspx">mftrace</a> to view Docker ETW logs in real-time.</p>
<p>First, here&rsquo;s a simple application written in Go that logs to STDERR every second.</p>
<p>{% gist 5ebeaaa38a59f7ce314a0b96b4357d4a %}</p>
<p>Next, let&rsquo;s create a Docker image (Windows) using the Dockerfile below.</p>
<p>{% gist 9935cfaf68d8de5b5da2d5c4b15b8d85 %}</p>
<p>{% highlight shell %}</p>
<h1 id="assuming-the-code-above-is-saved-in-a-directory-called-demoapp">assuming the code above is saved in a directory called &lsquo;demoapp&rsquo;</h1>
<p>$ docker build -t demoapp .
{% endhighlight %}</p>
<p>To use mftrace, we need a config file.</p>
<p>{% gist 4bd8968cc08c14cc98e03494624030a5 %}</p>
<p>Open a command prompt (or Powershell) and run the following command.</p>
<p>{% highlight shell %}
$ mftrace.exe -c config.xml
{% endhighlight %}</p>
<p>Then open another command prompt (or Powershell) window and run the Docker image.</p>
<p>{% highlight shell %}
$ docker run -d &ndash;log-driver=etwlogs &ndash;name demoapp demoapp:latest
{% endhighlight %}</p>
<p>You should be able to view the application logs in the mftrace window.</p>
<p>You can use this <a href="https://github.com/flowerinthenight/20170914-tokyo-mastercloud-presentation">repo</a> instead of creating your own folder structure. Instructions are provided in the README as well as an x86 version of mftrace.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-09-20-docker-etwlogs/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-09-20-docker-etwlogs/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using Docker&rsquo;s ETW log driver in Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I posted an <a href="https://tech.mobingi.com/2018/12/05/mochi-k8s-repo.html">article</a> for <a href="https://twitter.com/mobingi">@mobingi</a> about its Kubernetes clusters repo. Please check it out. Thanks.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-12-27-mochi-k8s-repo/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-12-27-mochi-k8s-repo/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Mobingi&rsquo;s Kubernetes clusters repo]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I posted an <a href="https://tech.mobingi.com/2018/09/25/ouchan-monorepo.html">article</a> for <a href="https://twitter.com/mobingi">@mobingi</a> about its Golang-based monorepo. Please check it out. Thanks.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-09-25-ouchan-monorepo/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-09-25-ouchan-monorepo/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Mobingi&rsquo;s golang monorepo]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For self reference:</p>
<p>{% gist caa8ae4a0112f25eeabb67d0fbd837dd %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-08-31-golang-json-prettify/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-08-31-golang-json-prettify/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[JSON prettifier function in Go]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded an example of a golang-based monorepo in <a href="https://github.com/flowerinthenight/golang-monorepo">GitHub</a>. This is a stripped down version of what we have <a href="https://twitter.com/mobingi">@mobingi</a>. If you are planning to have a golang-based monorepo, please have a look.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-02-06-golang-monorepo/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-02-06-golang-monorepo/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A golang-based monorepo example]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
</feed>
