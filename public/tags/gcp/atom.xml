














    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<feed  xml:lang="en"  xmlns="http://www.w3.org/2005/Atom">
    
        <author>
            
                <email>example@example.com</email>
            

            
                <name>John Doe</name>
            

            
                <uri>https://example.com</uri>
            
        </author>
    

    
        <icon>http://localhost:1313/</icon>
    

    <id>tag:localhost:1313,0001-01-01:/tags/gcp/atom.xml</id>

    
        

        
            
        

        
            <link href="http://localhost:1313/tags/gcp/atom.xml" rel="self" type="application/atom+xml"/>
        
    
        

        
            
        

        
            <link href="http://localhost:1313/tags/gcp/" rel="alternate" type="text/html"/>
        
    
        

        

        
            <link href="http://localhost:1313/tags/gcp/rss.xml" rel="alternate" type="application/rss+xml"/>
        
    

    

    
        <logo>http://localhost:1313/</logo>
    

    
        <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
    

    

    <title type="html"><![CDATA[Gcp · Tags · About]]></title>
    <updated>2024-05-30T00:00:00-07:00</updated>

    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This library has been in our production for about a year already and is one of the critical components in our backend. We mainly use it for app-level orchestration between pods. It&rsquo;s called <code>hedge</code> and you can find the code <a href="https://github.com/flowerinthenight/hedge/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2022-09-21-spindle-based-distributed-computing-lib/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2022-09-21-spindle-based-distributed-computing-lib/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[hedge - A simple distributed computing library]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I have uploaded an example of how to handle lengthy processing of PubSub subscription messages in GitHub. If you are using PubSub and are, at times, struggling with PubSub default deadlines, you might find this example helpful. The code can be found <a href="https://github.com/flowerinthenight/gcp-pubsub-lengthy-consume">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-08-13-gcp-pubsub-lengthy-process/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-08-13-gcp-pubsub-lengthy-process/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[GCP PubSub lengthy message processing]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This is related to a <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">previous post</a> about Kubernetes services. This time, it&rsquo;s about extending the timeout of an Ingress. We had a situation where we had to download a huge file from one of our exposed services. The download takes about two minutes to complete. This didn&rsquo;t really worked out since by default, GCP load balancers that are associated with k8s Ingresses have a timeout value of 30s. For a time, we just did manual updates by going to the GCP k8s Services and Ingress console, opening the backend service under the Ingress, and editing the Timeout section to the desired seconds. But since we do have a cluster blue/green deployment, we had to do this every time we recreate our clusters.</p>
<p>Enter <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/backendconfig">BackendConfig</a> custom resource. With this, we can associate a BackendConfig resource to the service in question using GCP-specific annotations. Reusing the reverse proxy YAML from <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">this post</a>, we add a BackendConfig resource.</p>
<p>{% highlight ruby %}
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
name: serviceproxy-backendconfig
spec:
timeoutSec: 7200
connectionDraining:
drainingTimeoutSec: 60</p>
<hr>
<p>apiVersion: v1
kind: Service
metadata:
name: serviceproxy
annotations:
beta.cloud.google.com/backend-config: &lsquo;{&ldquo;ports&rdquo;: {&ldquo;80&rdquo;:&ldquo;serviceproxy-backendconfig&rdquo;}}&rsquo;
spec:
type: NodePort
ports:</p>
<ul>
<li>name: http
protocol: TCP
port: 80
targetPort: 80
selector:
app: serviceproxy
{% endhighlight %}</li>
</ul>
<p>Deploying this will set the timeout of the service to two hours.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-11-28-gcp-backendconfig-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-11-28-gcp-backendconfig-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Extending the timeout of a Kubernetes service in GCP]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>As of this writing, GCP doesn&rsquo;t have an option to create <a href="https://cloud.google.com/spanner/">Spanner</a> backups automatically. This could be available when you&rsquo;re reading this in the future. At the moment, however, if you&rsquo;re using Kubernetes, you can utilize <a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">CronJob</a> to do a scheduled backup.</p>
<p>Here&rsquo;s a sample CronJob deployment that uses <code>gcloud</code> to create the backups. First, you need to create a service account that has permissions to create Spanner backups. Once you have downloaded the JSON file for the service account, store it as a Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/secret/">Secret</a>.</p>
<p>{% highlight shell %}
$ kubectl create secret generic spannerbackup-keyfile &ndash;from-file svcacct.json
{% endhighlight %}</p>
<p>Make sure to update some of the information below as required, such as, name of the backup, instance name, database name, expiration date, etc. The example below uses the backup name <code>autobackup-yyyymmddthhmmssutc</code> format with a 3-day backup expiration.</p>
<p>{% highlight yaml %}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
name: spannerbackup
spec:
concurrencyPolicy: Forbid
# Run every day @ 2:30am JST (below is UTC)
schedule: &ldquo;30 17 * * *&rdquo;
jobTemplate:
spec:
template:
spec:
containers:
- name: spannerbackup
image: google/cloud-sdk:307.0.0-slim
command: [&quot;/bin/bash&quot;]
args: [&quot;-c&quot;, &ldquo;NAME=autobackup-$(date +%Y%m%dT%H%M%S%Z | awk &lsquo;{print tolower($0)}&rsquo;); EXP=$(date -u -d &lsquo;+3 day&rsquo; +%FT%TZ); gcloud auth activate-service-account &ndash;key-file $GOOGLE_APPLICATION_CREDENTIALS &amp;&amp; gcloud spanner backups create $NAME &ndash;instance=<instancename> &ndash;database=<dbname> &ndash;expiration-date=$EXP &ndash;async&rdquo;]
env:
- name: GET_HOSTS_FROM
value: dns
- name: GOOGLE_APPLICATION_CREDENTIALS
value: /etc/spannerbackup/svcacct.json
volumeMounts:
- name: keyfile
mountPath: &ldquo;/etc/spannerbackup&rdquo;
readOnly: true
restartPolicy: OnFailure
volumes:
- name: keyfile
secret:
secretName: spannerbackup-keyfile
{% endhighlight %}</p>
<p>Finally, deploy to k8s.</p>
<p>{% highlight shell %}</p>
<h1 id="assuming-above-file-is-saved-as-backupyaml">Assuming above file is saved as <code>backup.yaml</code></h1>
<p>$ kubectl create -f backup.yaml
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-09-11-autobackup-spanner-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-09-11-autobackup-spanner-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Automate Spanner backup using Kubernetes CronJob]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is specifically for the autogenerated <a href="https://github.com/google/google-api-go-client">Google APIs Client for Go</a>. I haven&rsquo;t tried the other <a href="https://github.com/GoogleCloudPlatform/google-cloud-go">Google Cloud Library for Go</a> since it didn&rsquo;t have the compute library I needed.</p>
<p>You can use the <a href="https://godoc.org/golang.org/x/oauth2"><code>golang.org/x/oauth2/google</code></a> library for authentication with this library. It can work with <a href="https://cloud.google.com/compute/docs/access/service-accounts">service accounts</a> as well, which is what I am using at the moment.</p>
<h3 id="using-the-google_application_credentials-environment-variable">Using the GOOGLE_APPLICATION_CREDENTIALS environment variable</h3>
<p>After you have created your service account, downloaded the JSON file, and saved it in some location, you can set the <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable with the path of your service account JSON file.</p>
<p>{% highlight shell %}</p>
<h1 id="sample-path-is-used">sample path is used</h1>
<p>$ export GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-acct.json
{% endhighlight %}</p>
<p>With that in place, the <a href="https://github.com/google/google-api-go-client#application-default-credentials-example">Application Default Credentials Example</a> sample code should just work for you.</p>
<h3 id="using-the-service-account-file-directly-to-create-the-client">Using the service account file directly to create the client</h3>
<p>It&rsquo;s all fine and good if you only use one service account file all throughout the application but if you happen to need to use a specific JSON file per call, this section is for you.</p>
<p>{% gist 5241f3cb96b9dfb9a58e77a16be159fe %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-06-09-google-api-client-go-auth/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-06-09-google-api-client-go-auth/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Authenticating Google API Client Library for Go using Service Accounts]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a yet another distributed locking library, this time, based on <a href="https://cloud.google.com/spanner/">Cloud Spanner</a> and <a href="https://cloud.google.com/spanner/docs/true-time-external-consistency">TrueTime</a> technology. It&rsquo;s called <code>spindle</code> and you can find the code <a href="https://github.com/flowerinthenight/spindle/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-12-26-spanner-distributed-lock/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-12-26-spanner-distributed-lock/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A Spanner-based distributed locking library]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
</feed>
