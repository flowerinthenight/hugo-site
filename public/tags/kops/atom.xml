














    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<feed  xml:lang="en"  xmlns="http://www.w3.org/2005/Atom">
    
        <author>
            
                <email>example@example.com</email>
            

            
                <name>John Doe</name>
            

            
                <uri>https://example.com</uri>
            
        </author>
    

    
        <icon>http://localhost:1313/</icon>
    

    <id>tag:localhost:1313,0001-01-01:/tags/kops/atom.xml</id>

    
        

        
            
        

        
            <link href="http://localhost:1313/tags/kops/atom.xml" rel="self" type="application/atom+xml"/>
        
    
        

        
            
        

        
            <link href="http://localhost:1313/tags/kops/" rel="alternate" type="text/html"/>
        
    
        

        

        
            <link href="http://localhost:1313/tags/kops/rss.xml" rel="alternate" type="application/rss+xml"/>
        
    

    

    
        <logo>http://localhost:1313/</logo>
    

    
        <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
    

    

    <title type="html"><![CDATA[Kops · Tags · About]]></title>
    <updated>2024-05-30T00:00:00-07:00</updated>

    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<h2 id="overview">Overview</h2>
<p>This post will walk through the steps on how we provisioned our production Kubernetes cluster <a href="https://twitter.com/mobingi">@mobingi</a>. Some of the bits here are already automated in our case but I will try to include as much details as I can.</p>
<p>Our goals would be the following:</p>
<ul>
<li>Provision a Kubernetes cluster on AWS using <a href="https://github.com/kubernetes/kops">kops</a>.</li>
<li>The cluster will have two autoscaling groups: one for on-demand, one for spot instances.</li>
<li>It&rsquo;s going to be a gossip-based cluster.</li>
<li>RBAC is enabled in the cluster.</li>
</ul>
<p>There is no need to rewrite the otherwise excellent installation instructions written in the <a href="https://github.com/kubernetes/kops/blob/master/docs/aws.md">kops wiki</a>. Basically, we can just follow the setup instructions there. The instructions in this post will be specific to our goals above.</p>
<h2 id="gossip-based-cluster">Gossip-based cluster</h2>
<p>We will skip the DNS configuration section as we are provisioning a gossip-based cluster, meaning, the cluster name will be something like <code>&quot;&lt;some-name&gt;.k8s.local&quot;</code>. We will be using <code>&quot;mycluster.k8s.local&quot;</code> as our cluster name.</p>
<h2 id="ssh-keypair">SSH keypair</h2>
<p>We will create the keypair in AWS under EC2 -&gt; Key Pairs -&gt; Create Key Pair. We need this keypair when we need to ssh to our cluster nodes. After saving the keypair somewhere, we will generate the public key using the following command:</p>
<p>{% highlight shell %}
$ ssh-keygen -y -f mycluster.pem &gt; mycluster.pem.pub
{% endhighlight %}</p>
<h2 id="create-the-cluster">Create the cluster</h2>
<p>At this point, we should already have our environment variables set, mainly <code>NAME</code> and <code>KOPS_STATE_STORE</code>. To create the cluster:</p>
<p>{% highlight shell %}</p>
<h1 id="im-from-japan-so-im-using-ap-northeast-1-tokyo">I&rsquo;m from Japan so I&rsquo;m using ap-northeast-1 (Tokyo)</h1>
<p>$ kops create cluster <br>
&ndash;ssh-public-key mycluster.pem.pub
&ndash;zones ap-northeast-1a,ap-northeast-1c <br>
&ndash;authorization RBAC <br>
&ndash;cloud aws ${NAME} <br>
&ndash;yes
{% endhighlight %}</p>
<p>It will take some time before the cluster will be ready. To validate the cluster:</p>
<p>{% highlight shell %}
$ kops validate cluster
Using cluster from kubectl context: mycluster.k8s.local</p>
<p>Validating cluster mycluster.k8s.local</p>
<p>INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-ap-northeast-1a  Master  m3.medium       1       1       &hellip;
nodes                   Node    t2.medium       2       2       &hellip;</p>
<p>NODE STATUS
NAME                                                    ROLE    READY
ip-x-x-x-x.ap-northeast-1.compute.internal              master  True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
&hellip;</p>
<p>Your cluster mycluster.k8s.local is ready
{% endhighlight %}</p>
<p>Notice that we only have one instance for our master. We can also opt to have a highly available master using <a href="https://github.com/kubernetes/kops/blob/master/docs/commands.md#other-interesting-modes">these options</a>, which is generally recommended for production clusters. Based on our experience though, this single master instance setup is good enough for development and/or staging clusters. There&rsquo;s going to be downtime if master goes down in which case the duration will depend on how long AWS autoscaling group kicks in. During that window, k8s API won&rsquo;t be accessible but the nodes will continue to work, including our deployed applications.</p>
<h2 id="spot-instance-autoscaling-group">Spot instance autoscaling group</h2>
<p>Once the cluster is ready, we will add another instance group for spot instances. The default instance group created in the previous command, named &ldquo;nodes&rdquo;, will be our on-demand group. To add:</p>
<p>{% highlight shell %}
$ kops create ig nodes-spots -subnet ap-northeast-1a,ap-northeast-1c
{% endhighlight %}</p>
<p>You can then edit using the following contents (modify values as needed):</p>
<p>{% highlight ruby %}
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
creationTimestamp: <some-datetime-value-here>
labels:
kops.k8s.io/cluster: mycluster.k8s.local
name: nodes-spot
spec:
image: kope.io/k8s-1.8-debian-jessie-amd64-hvm-ebs-2017-12-02
machineType: t2.medium
maxPrice: &ldquo;0.02&rdquo;
maxSize: 10
minSize: 2
nodeLabels:
kops.k8s.io/instancegroup: nodes
spot: &ldquo;true&rdquo;
role: Node
subnets:</p>
<ul>
<li>ap-northeast-1a</li>
<li>ap-northeast-1c
{% endhighlight %}</li>
</ul>
<p>We can now update our cluster with the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="optional-update-our-on-demand-groups-max-size-to-some-number">[optional] update our on-demand group&rsquo;s max size to some number</h1>
<p>$ kops edit ig nodes</p>
<h1 id="optional-preview-the-changes-to-be-applied">[optional] preview the changes to be applied</h1>
<p>$ kops update cluster ${NAME}</p>
<h1 id="actual-cluster-update">actual cluster update</h1>
<p>$ kops update cluster ${NAME} &ndash;yes</p>
<h1 id="optional-check-if-we-need-rolling-update">[optional] check if we need rolling update</h1>
<p>$ kops rolling-update cluster</p>
<h1 id="if-so-add---yes-option">if so, add &ndash;yes option</h1>
<p>$ kops rolling-update cluster &ndash;yes
{% endhighlight %}</p>
<p>We can now validate the cluster to see our changes:</p>
<p>{% highlight shell %}
$ kops validate cluster
Validating cluster mycluster.k8s.local</p>
<p>INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-ap-northeast-1a  Master  m3.medium       1       1       &hellip;
nodes                   Node    t2.medium       2       4       &hellip;
nodes-spot              Node    t2.medium       2       10      &hellip;</p>
<p>NODE STATUS
NAME                                                    ROLE    READY
ip-x-x-x-x.ap-northeast-1.compute.internal              master  True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
&hellip;</p>
<p>Your cluster mycluster.k8s.local is ready
{% endhighlight %}</p>
<p>When our cluster was created, kops also has automatically generated our config file for kubectl. To verify:</p>
<p>{% highlight shell %}
$ kubectl cluster-info
Kubernetes master is running at https&hellip;
KubeDNS is running at https&hellip;</p>
<p>To further debug and diagnose cluster problems, use &lsquo;kubectl cluster-info dump&rsquo;.
{% endhighlight %}</p>
<h2 id="setup-cluster-autoscaler">Setup cluster autoscaler</h2>
<p>Clusters created using kops use autoscaling groups, but without scaling policies (at the time of writing). To enable dynamic scaling of our cluster, we will use <a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler/cloudprovider/aws">cluster autoscaler</a>. Before cluster autoscaler deployment, we need to setup some prerequisites.</p>
<p>First, we need to attach the following permissions to master and nodes IAM role. Go to IAM roles console and add an inline policy to the roles created by kops. Role names would be something like:</p>
<ul>
<li>master.mycluster.k8s.local</li>
<li>nodes.mycluster.k8s.local</li>
</ul>
<p>{% highlight json %}
{
&ldquo;Version&rdquo;: &ldquo;2012-10-17&rdquo;,
&ldquo;Statement&rdquo;: [
{
&ldquo;Effect&rdquo;: &ldquo;Allow&rdquo;,
&ldquo;Action&rdquo;: [
&ldquo;autoscaling:DescribeAutoScalingGroups&rdquo;,
&ldquo;autoscaling:DescribeAutoScalingInstances&rdquo;,
&ldquo;autoscaling:DescribeTags&rdquo;,
&ldquo;autoscaling:SetDesiredCapacity&rdquo;,
&ldquo;autoscaling:TerminateInstanceInAutoScalingGroup&rdquo;
],
&ldquo;Resource&rdquo;: &ldquo;*&rdquo;
}
]
}
{% endhighlight %}</p>
<p>The latest installation instructions can be found <a href="https://github.com/kubernetes/kops/tree/master/addons/cluster-autoscaler">here</a>. The general idea is to choose the latest yaml file, update it with your own values, and apply the file using kubectl. The readme file also provides a script that does the download and edit for us. We will be using the following command line arguments for our autoscaler:</p>
<p>{% highlight ruby %}
command:</p>
<ul>
<li>./cluster-autoscaler</li>
<li>&ndash;cloud-provider=aws</li>
<li>&ndash;v=4</li>
<li>&ndash;stderrthreshold=info</li>
<li>&ndash;scale-down-delay=5m</li>
<li>&ndash;skip-nodes-with-local-storage=false</li>
<li>&ndash;expander=least-waste</li>
<li>&ndash;nodes=2:4:nodes.mycluster.k8s.local</li>
<li>&ndash;nodes=2:10:nodes-spot.mycluster.k8s.local
{% endhighlight %}</li>
</ul>
<p>You should update the last two line with your own autoscaling group min/max values. Finally, we deploy our autoscaler with:</p>
<p>{% highlight shell %}
$ kubectl create -f cluster-autoscaler.yml
deployment &ldquo;cluster-autoscaler&rdquo; created
{% endhighlight %}</p>
<p>That&rsquo;s it. You may also want to install <a href="https://github.com/kubernetes/kops/blob/master/docs/addons.md#installing-kubernetes-addons">these addons</a> if you like.</p>
<h2 id="ssh-to-a-node">SSH to a node</h2>
<p>{% highlight shell %}</p>
<h1 id="sample-ips-only">sample ip&rsquo;s only</h1>
<p>$ kubectl get node -o wide
NAME                           STATUS    ROLES     AGE   VERSION   EXTERNAL-IP  OS-IMAGE                      &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     master    1d    v1.8.6    1.2.3.4      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.5      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.6      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.7      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.8      Debian GNU/Linux 8 (jessie)   &hellip;</p>
<h1 id="default-username-is-admin">default username is <code>admin</code></h1>
<p>$ ssh -i mycluster.pem <a href="mailto:admin@1.2.3.4">admin@1.2.3.4</a>
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-01-24-k8s-kops-aws/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-01-24-k8s-kops-aws/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Running Kubernetes on AWS using kops]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
</feed>
