













    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/basic-auth/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/basic-auth/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/tags/basic-auth/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        

        <link>http://localhost:1313/tags/basic-auth/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>Basic-Auth · Tags · About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This post is somewhat related to a <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">previous post</a> about accessing k8s services using nginx reverse proxy. Let&rsquo;s try to add a simple basic authentication to these services at the proxy level. Now, this may come in handy in non-production environments but at the very least, make sure that you are doing this over HTTPS as basic authentication credentials are not encrypted.</p>
<p>We will be using the <code>htpasswd</code> tool to generate our passwords. In Ubuntu, you can install this using the following command:</p>
<p>{% highlight shell %}
$ sudo apt-get install apache2-utils
{% endhighlight %}</p>
<p>Let&rsquo;s generate our password file:</p>
<p>{% highlight shell %}
$ htpasswd -c passfile user1
New password:
Re-type new password:
Adding password for user user1
$ cat passfile
user1:$apr1$c/7lb2VS$SQ9pPJ8XfNpPH.jmnHRsE0
{% endhighlight %}</p>
<p>Let&rsquo;s add a config map to our previous YAML file and enable basic authentication to <code>svc1</code> only:</p>
<p>{% highlight ruby %}
apiVersion: v1
kind: ConfigMap
metadata:
name: basicauth
data:
htpasswd: |
# generate: $ htpasswd -c {file} username (then input password)
user1:$apr1$c/7lb2VS$SQ9pPJ8XfNpPH.jmnHRsE0</p>
<hr>
<p>apiVersion: v1
kind: ConfigMap
metadata:
name: serviceproxy-conf
data:
serviceproxy.conf: |
server {
listen 80;
server_name development.mobingi.com;
resolver kube-dns.kube-system.svc.cluster.local valid=10s;</p>
<pre><code>  location ~ ^/svc1/(.*)$ {
    auth_basic &quot;mobingi&quot;;
    auth_basic_user_file /etc/serviceproxy/htpasswd;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $host;
    rewrite ^/svc1/(.*)$ /$1 break;
    proxy_pass &quot;http://svc1.default.svc.cluster.local&quot;;
    proxy_http_version 1.1;
  }

  location ~ ^/svc2/(.*)$ {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $host;
    rewrite ^/svc2/(.*)$ /$1 break;
    proxy_pass &quot;http://svc2.default.svc.cluster.local&quot;;
    proxy_http_version 1.1;
  }

  # root health check requirement in GKE ingress
  location / {
    return 200 'healthy\n';
  }
}
</code></pre>
<hr>
<p>apiVersion: apps/v1
kind: Deployment
metadata:
name: serviceproxy
spec:
replicas: 1
revisionHistoryLimit: 3
selector:
matchLabels:
app: serviceproxy
template:
metadata:
labels:
app: serviceproxy
spec:
containers:
- name: nginx
image: nginx:1.13
ports:
- containerPort: 80
volumeMounts:
- name: config-volume
mountPath: /etc/nginx/conf.d/
- name: htpasswd
mountPath: /etc/serviceproxy/
volumes:
- name: config-volume
configMap:
name: serviceproxy-conf
items:
- key: serviceproxy.conf
path: serviceproxy.conf
- name: htpasswd
configMap:
name: basicauth
items:
- key: htpasswd
path: htpasswd</p>
<hr>
<p>apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
name: serviceproxy-hpa
&hellip;
{% endhighlight %}</p>
<p>You should now be able to access <code>svc1</code> using your username:password.</p>
<p>{% highlight shell %}
$ curl -u user1:password <a href="https://development.mobingi.com/svc1/some-endpoint">https://development.mobingi.com/svc1/some-endpoint</a>
{% endhighlight %}</p>
<p>That&rsquo;s it!</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2019-01-31-nginx-basicauth-k8s/</guid>

                
                    <link>http://localhost:1313/blog/2019-01-31-nginx-basicauth-k8s/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using nginx basic authentication in Kubernetes</title>
                
            </item>
        
    </channel>
</rss>
