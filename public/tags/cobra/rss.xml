













    
        
    

    

    

    
        
    

    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/cobra/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/tags/cobra/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/tags/cobra/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        
            <lastBuildDate>2020-02-27 00:00:00 -0800 PST</lastBuildDate>
        

        <link>http://localhost:1313/tags/cobra/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>Cobra · Tags · About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This post is somehow related to a <a href="https://flowerinthenight.com/blog/2017/12/01/golang-cobra-glog">previous article</a> about using <a href="https://github.com/golang/glog">glog</a> together with <a href="https://github.com/spf13/cobra">cobra</a>. This time, we will be using <a href="https://github.com/kubernetes/klog">klog</a> which is a Kubernetes fork of <a href="https://github.com/golang/glog">glog</a>.</p>
<p>{% gist c1d3267a6e5cc26b9025b4eed74ce00a %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-the--h-command">run the -h command</h1>
<p>$ ./cobraklog -h
Usage of ./cobraklog:
-alsologtostderr
log to standard error as well as files
-log_backtrace_at value
when logging hits line file:N, emit a stack trace
-log_dir string
If non-empty, write log files in this directory
-log_file string
If non-empty, use this log file
-logtostderr
log to standard error instead of files
-skip_headers
If true, avoid header prefixes in the log messages
-stderrthreshold value
logs at or above this threshold go to stderr (default 2)
-v value
log level for V logs
-vmodule value
comma-separated list of pattern=N settings for file-filtered logging
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-cobras-help-command">run cobra&rsquo;s <code>help</code> command</h1>
<p>$ ./cobraklog help
Use klog together with cobra.</p>
<p>Usage:
cobraklog [command]</p>
<p>Available Commands:
help        Help about any command
run         run command</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;log_file string                  If non-empty, use this log file
&ndash;logtostderr                      log to standard error instead of files
&ndash;skip_headers                     If true, avoid header prefixes in the log messages
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for cobraklog</p>
<p>Use &ldquo;cobraklog [command] &ndash;help&rdquo; for more information about a command.
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-help-on-our-subcommand-run">run <code>help</code> on our subcommand <code>run</code></h1>
<p>$ ./cobraklog help run
Run command.</p>
<p>Usage:
cobraklog run [flags]</p>
<p>Flags:
&ndash;str string   string to print (default &ldquo;hello world&rdquo;)
-h, &ndash;help         help for run</p>
<p>Global Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;log_file string                  If non-empty, use this log file
&ndash;logtostderr                      log to standard error instead of files
&ndash;skip_headers                     If true, avoid header prefixes in the log messages
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-run-subcommand">run the <code>run</code> subcommand</h1>
<p>$ ./cobraklog run &ndash;logtostderr
I0205 16:37:39.110849   13672 main.go:41] echo=hello world</p>
<p>$ ./cobraklog run &ndash;logtostderr &ndash;str &ldquo;hello alien world&rdquo;
I0205 16:39:37.212187   13685 main.go:41] echo=hello alien world
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2019-02-05-golang-cobra-klog/</guid>

                
                    <link>http://localhost:1313/blog/2019-02-05-golang-cobra-klog/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using k8s.io/klog together with cobra in golang</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>If you have been programming with golang, you&rsquo;ve probably heard of <a href="https://github.com/spf13/cobra">cobra</a>. I use it extensively at work and also in my personal projects.</p>
<p>Recently though, I&rsquo;ve been using <a href="https://github.com/golang/glog">glog</a> more and more. And I quite like it. The thing is, it has a couple of flag definitions in its <code>init()</code> function using golang&rsquo;s builtin <code>flag</code> library. And I wanted to include those flags into cobra&rsquo;s flag definitions. This is how I did it.</p>
<p>{% gist 221e26cea495e5adc3ae6a323b4fbdba %}</p>
<p>Generated help information will now look something like this.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-help-command">run the help command</h1>
<p>$ ./cobraglog -h
Use glog with cobra.</p>
<p>Usage:
[flags]</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;echo string                      echo string (default &ldquo;hello&rdquo;)
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;logtostderr                      log to standard error instead of files
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for this command
{% endhighlight %}</p>
<p>Note that our cobra-defined flag <code>--echo</code> is also there. The rest are defined by glog internally. Finally, run the application.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-binary-providing-the-logtostderr-flag-defined-by-glog">run the binary, providing the logtostderr flag defined by glog</h1>
<p>$ ./cobraglog &ndash;logtostderr
I1129 13:49:34.166660    2138 main.go:28] echo (info): hello
W1129 13:49:34.166718    2138 main.go:29] echo (warn): hello
E1129 13:49:34.166722    2138 main.go:30] echo (error): hello
{% endhighlight %}</p>
<p>Here&rsquo;s another example using subcommands.</p>
<p>{% gist 447f983882720d817f3b92088f98aaa3 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-12-01-golang-cobra-glog/</guid>

                
                    <link>http://localhost:1313/blog/2017-12-01-golang-cobra-glog/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using glog together with cobra in golang</title>
                
            </item>
        
    </channel>
</rss>
