













    
        
    

    

    

    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    












<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/paige-search.json" rel="alternate" type="application/json"/>
            
        
            

            

            
                <link href="http://localhost:1313/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        
            <lastBuildDate>2024-05-30 00:00:00 -0700 PDT</lastBuildDate>
        

        <link>http://localhost:1313/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.</p>
<h2 id="headings">Headings</h2>
<p>The following HTML <code>&lt;h2&gt;</code>—<code>&lt;h6&gt;</code> elements represent five levels of section headings. <code>&lt;h2&gt;</code> is the highest section level while <code>&lt;h6&gt;</code> is the lowest.</p>
<h2 id="h2">H2</h2>
<h3 id="h3">H3</h3>
<h4 id="h4">H4</h4>
<h5 id="h5">H5</h5>
<h6 id="h6">H6</h6>
<h2 id="paragraph">Paragraph</h2>
<p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.</p>
<p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.</p>
<h2 id="blockquotes">Blockquotes</h2>
<p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a <code>footer</code> or <code>cite</code> element, and optionally with in-line changes such as annotations and abbreviations.</p>
<h3 id="blockquote-without-attribution">Blockquote without attribution</h3>
<blockquote>
<p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
<strong>Note</strong> that you can use <em>Markdown syntax</em> within a blockquote.</p>
</blockquote>
<h3 id="blockquote-with-attribution">Blockquote with attribution</h3>
<blockquote>
<p>Don&rsquo;t communicate by sharing memory, share memory by communicating.<br>
— <cite>Rob Pike<sup id="fnref:1"><a href="http://localhost:1313/tmp/markdown-syntax/#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></cite></p>
</blockquote>
<h2 id="tables">Tables</h2>
<p>Tables aren&rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bob</td>
<td>27</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
</tbody>
</table>
<h3 id="inline-markdown-within-tables">Inline Markdown within tables</h3>
<table>
<thead>
<tr>
<th>Italics</th>
<th>Bold</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>italics</em></td>
<td><strong>bold</strong></td>
<td><code>code</code></td>
</tr>
</tbody>
</table>
<h2 id="code-blocks">Code Blocks</h2>
<h3 id="code-block-with-backticks">Code block with backticks</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="code-block-indented-with-four-spaces">Code block indented with four spaces</h3>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;Example HTML5 Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&rsquo;s internal highlight shortcode</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre></div>
<h2 id="list-types">List Types</h2>
<h3 id="ordered-list">Ordered List</h3>
<ol>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
</ol>
<h3 id="unordered-list">Unordered List</h3>
<ul>
<li>List item</li>
<li>Another item</li>
<li>And another item</li>
</ul>
<h3 id="nested-list">Nested list</h3>
<ul>
<li>Fruit
<ul>
<li>Apple</li>
<li>Orange</li>
<li>Banana</li>
</ul>
</li>
<li>Dairy
<ul>
<li>Milk</li>
<li>Cheese</li>
</ul>
</li>
</ul>
<h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark</h2>
<p><abbr title="Graphics Interchange Format">GIF</abbr> is a bitmap image format.</p>
<p>H<sub>2</sub>O</p>
<p>X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup></p>
<p>Press <kbd><kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>Delete</kbd></kbd> to end the session.</p>
<p>Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The above quote is excerpted from Rob Pike&rsquo;s <a href="https://www.youtube.com/watch?v=PAAkCSZUG1c">talk</a> during Gopherfest, November 18, 2015.&#160;<a href="http://localhost:1313/tmp/markdown-syntax/#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2024-01-18:/tmp/markdown-syntax/</guid>

                
                    <link>http://localhost:1313/tmp/markdown-syntax/</link>
                

                
                    <pubDate>Thu, 18 Jan 2024 21:32:52 -0700</pubDate>
                

                
                    <title>Markdown Syntax Guide</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[






















    























    


<div class="paige-youtube">
    























<div class="paige-video ratio ratio-16x9" >
    






<iframe  allowfullscreen   referrerpolicy="no-referrer-when-downgrade"   src="https://www.youtube.com/embed/dQw4w9WgXcQ?hl=en&amp;modestbranding=1"   title="YouTube video" ></iframe>

</div>

</div>

]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-24:/tmp/video/</guid>

                
                    <link>http://localhost:1313/tmp/video/</link>
                

                
                    <pubDate>Sun, 24 Sep 2023 21:29:31 -0700</pubDate>
                

                
                    <title>Video</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                
                    
                    

                    
                

                

                
                

                

                

                
                    <description><![CDATA[<p>It takes you to the home page.</p>
<p><a href="http://localhost:1313/tmp/link/" title="Link">⏎</a></p>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-24:/tmp/link/</guid>

                
                    <link>https://willfaught.com/paige</link>
                

                
                    <pubDate>Sun, 24 Sep 2023 21:29:30 -0700</pubDate>
                

                
                    <title>Link</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.</p>
<p>In this example we will be using <a href="https://katex.org/">KaTeX</a></p>
<ul>
<li>Create a partial under <code>/layouts/partials/math.html</code></li>
<li>Within this partial reference the <a href="https://katex.org/docs/autorender.html">Auto-render Extension</a> or host these scripts locally.</li>
<li>Include the partial in your templates like so:</li>
</ul>
<pre tabindex="0"><code>{{ if .Params.paige.math }}
{{ partial &#34;math.html&#34; . }}
{{ end }}
</code></pre><p>To enable KaTex on a per page basis include the parameter <code>paige.math: true</code> in content files</p>
<p><strong>Note:</strong> Use the online reference of <a href="https://katex.org/docs/supported.html">Supported TeX Functions</a></p>
<h2 id="examples">Examples</h2>
<p>
Inline math: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)
</p>
<p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$</p>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-18:/tmp/math-typesetting/</guid>

                
                    <link>http://localhost:1313/tmp/math-typesetting/</link>
                

                
                    <pubDate>Mon, 18 Sep 2023 21:33:03 -0700</pubDate>
                

                
                    <title>Math Typesetting</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>Emoji can be enabled in a Hugo project in a number of ways.</p>
<p>The <a href="https://gohugo.io/functions/emojify/"><code>emojify</code></a> function can be called directly in templates or <a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes</a>.</p>
<p>To enable emoji globally, set <code>enableEmoji</code> to <code>true</code> in your site&rsquo;s <a href="https://gohugo.io/getting-started/configuration/">configuration</a> and then you can type emoji shorthand codes directly in content files; e.g.</p>
<p><span class="nowrap"><span class="emojify">🙈</span> <code>:see_no_evil:</code></span>  <span class="nowrap"><span class="emojify">🙉</span> <code>:hear_no_evil:</code></span>  <span class="nowrap"><span class="emojify">🙊</span> <code>:speak_no_evil:</code></span></p>
<br>
<p>The <a href="https://www.emoji-cheat-sheet.com/">Emoji cheat sheet</a> is a useful reference for emoji shorthand codes.</p>
<hr>
<p><strong>N.B.</strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">.emoji {
</span></span><span class="line"><span class="cl">  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-18:/tmp/emoji-support/</guid>

                
                    <link>http://localhost:1313/tmp/emoji-support/</link>
                

                
                    <pubDate>Mon, 18 Sep 2023 21:32:40 -0700</pubDate>
                

                
                    <title>Emoji Support</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This page has the following parameters:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">paige</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">alert</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">message</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Get more information &lt;a href=\&#34;#\&#34; class=\&#34;alert-link\&#34;&gt;here&lt;/a&gt;.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;primary&#34;</span><span class="w">
</span></span></span></code></pre></div>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-18:/tmp/alert/</guid>

                
                    <link>http://localhost:1313/tmp/alert/</link>
                

                
                    <pubDate>Mon, 18 Sep 2023 21:21:05 -0700</pubDate>
                

                
                    <title>Alert</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I uploaded a <a href="https://github.com/flowerinthenight/rmq">simple wrapper</a> to <a href="https://github.com/streadway/amqp">streadway/amqp</a> library for RabbitMQ with support for auto reconnections. This is a simplified version of what I&rsquo;m using in production.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-06-30-amqp-wrapper/</guid>

                
                    <link>http://localhost:1313/blog/2017-06-30-amqp-wrapper/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Wrapper for amqp library for RabbitMQ</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This post is to show a simple way of using Docker&rsquo;s <a href="https://github.com/docker/docker-credential-helpers">credential helper package</a> to utilize the system&rsquo;s native credential store as storage for your Golang-based CLI applications&rsquo; login credentials. This means Keychain for OSX, <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa374792(v=vs.85).aspx"><code>wincred</code></a> for Windows, and <a href="https://www.passwordstore.org/"><code>pass</code></a> for Linux. We use <a href="https://www.passwordstore.org/"><code>pass</code></a> here since <a href="https://specifications.freedesktop.org/secret-service/"><code>secretservice</code></a>, although supported, doesn&rsquo;t work out of the box in headless servers.</p>
<p>Here&rsquo;s a simple implementation of our <code>Set</code>, <code>Get</code>, and <code>Del</code> functions.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore.go?footer=minimal"></script>
<p>Then we create our <code>_darwin.go</code>, <code>_linux.go</code>, and <code>_windows.go</code> files for OS specific implementations.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_darwin.go?footer=minimal"></script>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_windows.go?footer=minimal"></script>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_linux.go?footer=minimal"></script>
<p>Here&rsquo;s a quickstart guide to setup <a href="https://www.passwordstore.org/"><code>pass</code></a> in Ubuntu systems.</p>
<p>{% highlight shell %}</p>
<h1 id="install-pass">install pass</h1>
<p>$ sudo apt-get install pass</p>
<h1 id="generate-your-own-key-using-gpg2-do-not-use-a-passphrase">generate your own key using gpg2, do not use a passphrase</h1>
<p>$ gpg2 &ndash;gen-key</p>
<h1 id="if-the-cmd-seems-stuck-due-to-lack-of-entropy-you-can-open-another-window-and-run-the-ff-cmd">if the cmd seems stuck due to lack of entropy, you can open another window and run the ff cmd:</h1>
<h1 id="dd-ifdevsda-ofdevzero">dd if=/dev/sda of=/dev/zero</h1>
<h1 id="list-your-keys">list your keys</h1>
<h2 id="homeusergnupgpubringkbx">$ gpg2 &ndash;list-keys
/home/user/.gnupg/pubring.kbx</h2>
<p>pub   rsa2048/5486B0F6 2017-09-22 [SC]
uid         [ultimate] IamGroot <a href="mailto:iamgroot@domain.com">iamgroot@domain.com</a>
sub   rsa2048/CDC4C430 2017-09-22 [E]</p>
<h1 id="initialize-pass-use-the-pub-key-id">initialize pass (use the pub key id)</h1>
<p>$ pass init 5486B0F6
{% endhighlight %}</p>
<p>Here&rsquo;s an example on how to use our nativestore functions.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_test.go?footer=minimal"></script>
<p>Finally, you can refer to the whole package <a href="https://github.com/mobingilabs/mobingi-sdk-go/tree/master/pkg/nativestore">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-10-30-nativestore/</guid>

                
                    <link>http://localhost:1313/blog/2017-10-30-nativestore/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using OS specific stores for storing CLI credentials for golang apps</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>If you have been programming with golang, you&rsquo;ve probably heard of <a href="https://github.com/spf13/cobra">cobra</a>. I use it extensively at work and also in my personal projects.</p>
<p>Recently though, I&rsquo;ve been using <a href="https://github.com/golang/glog">glog</a> more and more. And I quite like it. The thing is, it has a couple of flag definitions in its <code>init()</code> function using golang&rsquo;s builtin <code>flag</code> library. And I wanted to include those flags into cobra&rsquo;s flag definitions. This is how I did it.</p>
<p>{% gist 221e26cea495e5adc3ae6a323b4fbdba %}</p>
<p>Generated help information will now look something like this.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-help-command">run the help command</h1>
<p>$ ./cobraglog -h
Use glog with cobra.</p>
<p>Usage:
[flags]</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;echo string                      echo string (default &ldquo;hello&rdquo;)
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;logtostderr                      log to standard error instead of files
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for this command
{% endhighlight %}</p>
<p>Note that our cobra-defined flag <code>--echo</code> is also there. The rest are defined by glog internally. Finally, run the application.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-binary-providing-the-logtostderr-flag-defined-by-glog">run the binary, providing the logtostderr flag defined by glog</h1>
<p>$ ./cobraglog &ndash;logtostderr
I1129 13:49:34.166660    2138 main.go:28] echo (info): hello
W1129 13:49:34.166718    2138 main.go:29] echo (warn): hello
E1129 13:49:34.166722    2138 main.go:30] echo (error): hello
{% endhighlight %}</p>
<p>Here&rsquo;s another example using subcommands.</p>
<p>{% gist 447f983882720d817f3b92088f98aaa3 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-12-01-golang-cobra-glog/</guid>

                
                    <link>http://localhost:1313/blog/2017-12-01-golang-cobra-glog/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using glog together with cobra in golang</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>In Docker&rsquo;s <a href="https://docs.docker.com/engine/admin/logging/etwlogs/">ETW logging driver doc</a>, it uses the tool <code>logman</code> to view the logs. In this article, I will show you how to use <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff685116(v=vs.85).aspx">mftrace</a> to view Docker ETW logs in real-time.</p>
<p>First, here&rsquo;s a simple application written in Go that logs to STDERR every second.</p>
<p>{% gist 5ebeaaa38a59f7ce314a0b96b4357d4a %}</p>
<p>Next, let&rsquo;s create a Docker image (Windows) using the Dockerfile below.</p>
<p>{% gist 9935cfaf68d8de5b5da2d5c4b15b8d85 %}</p>
<p>{% highlight shell %}</p>
<h1 id="assuming-the-code-above-is-saved-in-a-directory-called-demoapp">assuming the code above is saved in a directory called &lsquo;demoapp&rsquo;</h1>
<p>$ docker build -t demoapp .
{% endhighlight %}</p>
<p>To use mftrace, we need a config file.</p>
<p>{% gist 4bd8968cc08c14cc98e03494624030a5 %}</p>
<p>Open a command prompt (or Powershell) and run the following command.</p>
<p>{% highlight shell %}
$ mftrace.exe -c config.xml
{% endhighlight %}</p>
<p>Then open another command prompt (or Powershell) window and run the Docker image.</p>
<p>{% highlight shell %}
$ docker run -d &ndash;log-driver=etwlogs &ndash;name demoapp demoapp:latest
{% endhighlight %}</p>
<p>You should be able to view the application logs in the mftrace window.</p>
<p>You can use this <a href="https://github.com/flowerinthenight/20170914-tokyo-mastercloud-presentation">repo</a> instead of creating your own folder structure. Instructions are provided in the README as well as an x86 version of mftrace.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-09-20-docker-etwlogs/</guid>

                
                    <link>http://localhost:1313/blog/2017-09-20-docker-etwlogs/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using Docker’s ETW log driver in Windows</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>In this way, we can implement a FIFO queue without using explicit locking/synchronization for enqueueing/dequeueing.</p>
<p>For self reference:</p>
<p>{% gist 48d81f079d64dabbad7fa80928159461 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-04-20-apc-as-fifo-queue/</guid>

                
                    <link>http://localhost:1313/blog/2017-04-20-apc-as-fifo-queue/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Using APC as FIFO queue in Windows</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Downloading&hellip;</p>
<p>{% include image.html url=&quot;../../../../images/win10preview1.png&quot; %}</p>
<p>And here we go&hellip;</p>
<p>{% include image.html url=&quot;../../../../images/win10preview2.png&quot; %}</p>
<p>Looking good so far.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-10-trying-bash-on-windows/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-10-trying-bash-on-windows/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Trying out Bash on Windows</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<p>{% gist 29d147a50242198f082fd33f7d24677c %}</p>
<p>To view syslog in realtime</p>
<p>{% highlight shell %}
tail -f /var/log/syslog
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-22-syslog-target-go/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-22-syslog-target-go/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Syslog as target in Go logs</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Note that this function assumes the caller to be running as SYSTEM as well (i.e. Windows service).</p>
<p>For self reference:</p>
<p>{% gist a5ab54fec75bbabf6dac33b917b44c9b %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-05-31-start-process-as-system/</guid>

                
                    <link>http://localhost:1313/blog/2017-05-31-start-process-as-system/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Start process as system using CreateProcessAsUser</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For self reference:</p>
<p>Simulate a touch input down, drag, up programmatically.</p>
<p>{% gist bd264001034db093413a0bb233760588 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-03-28-simple-touch-input-funcs-windows/</guid>

                
                    <link>http://localhost:1313/blog/2017-03-28-simple-touch-input-funcs-windows/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Simple touch/swipe input function in Windows</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>InstallShield seems ubiquitous when it comes to installer scripting, at least based on my experience with companies I&rsquo;ve worked for so far. But for my side projects, I&rsquo;ve always been a fan of <a href="http://www.jrsoftware.org/isinfo.php">InnoSetup</a>. It is simple to use and Pascal is not really that bad. It is free and can do probably all the things you require for an installer.</p>
<p>Here&rsquo;s an example of an InnoSetup script that I have been using as baseline for creating installers for Windows.</p>
<p>{% gist 009f11047563d2cb042a9a5a5e73f91a %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-02-28-simple-innosetup/</guid>

                
                    <link>http://localhost:1313/blog/2017-02-28-simple-innosetup/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Simple Innosetup installation script</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I&rsquo;ve been dabbling a bit with Rust and so far, I&rsquo;m liking it. I&rsquo;ll probably use it more as replacement for my C/C++ projects. And I just uploaded a very simple ETW wrapper I&rsquo;m using in one of my side projects. You can check out the source code <a href="https://github.com/flowerinthenight/rusttrace">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-12-26-rust-etw/</guid>

                
                    <link>http://localhost:1313/blog/2016-12-26-rust-etw/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Simple ETW wrapper for Rust</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<p>{% gist f8114f79b6699ced9a054a595b6c991a %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-19-dir-cleanup-tool/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-19-dir-cleanup-tool/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Simple directory cleanup tool for Windows (golang)</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Vim has always been my go to editor/IDE when I&rsquo;m outside of Visual Studio. Here&rsquo;s my base <code>_vimrc</code> for Windows.</p>
<p>{% highlight conf %}
let mapleader = &quot; &quot;</p>
<p>filetype off
syntax on
colorscheme darkblue</p>
<p>&quot; let pc=$PC
&quot; if pc == &lsquo;HOME&rsquo;
&quot;     set guifont=Letter\ Gothic\ Std:h11
&quot; else
&quot;     set guifont=Lucida\ Sans\ Typewriter:h9
&quot; endif</p>
<p>&quot; Save marks to up to 100 files, save global marks as well (f1). To disable, f0
set viminfo=&lsquo;100,f1</p>
<p>&quot; Folding options
set foldmethod=indent
set foldnestmax=20
set nofoldenable
set foldlevel=0</p>
<p>set guifont=Lucida\ Sans\ Typewriter
set lines=70 columns=160
set ai
set nu
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set wrap
set backspace=2
set encoding=utf-8
set fileencodings=utf-8
set nocompatible
set noswapfile
set shortmess+=I
set ignorecase
set guioptions-=T
set guioptions-=r
set guioptions-=m
set splitright
set splitbelow
set ruler
set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
call vundle#begin(&rsquo;$USERPROFILE/vimfiles/bundle/&rsquo;)
Plugin &lsquo;VundleVim/Vundle.vim&rsquo;
&quot; 1. Vim should be 64-bit (link in ycm site)
&quot; 2. Python should be 64-bit
Plugin &lsquo;Valloric/YouCompleteMe&rsquo;
Plugin &lsquo;fatih/vim-go&rsquo;
Plugin &lsquo;PProvost/vim-ps1&rsquo;
call vundle#end()
filetype plugin indent on
&quot; To ignore plugin indent changes, instead use:
&quot; filetype plugin on
&quot; let g:netrw_liststyle=3</p>
<p>let g:ycm_disable_for_files_larger_than_kb = 0
let g:ycm_autoclose_preview_window_after_completion = 1</p>
<p>&quot; Enable powershell syntax plug
autocmd BufNewFile,BufReadPost *.ps1 set filetype=ps1</p>
<p>&quot; Search for the word under cursor in the current dir (recursively)
command CSM :execute &ldquo;vimgrep /&rdquo; . expand(&quot;<cword>&quot;) . &ldquo;/j ** <Bar> :cw&rdquo;
nnoremap <leader>ms :CSM<CR></p>
<p>&quot; Simple mappings for window manipulations
nnoremap <leader>wq <C-W>q
nnoremap <leader>ws <C-W>s
nnoremap <leader>wv <C-W>v
nnoremap <leader><left><left> <C-W><left>
nnoremap <leader><right><right> <C-W><right>
nnoremap <leader><up><up> <C-W><up>
nnoremap <leader><down><down> <C-W><down></p>
<p>&quot; Display buffers, then prep the colon for the next command
nnoremap <leader>b :ls<CR>:</p>
<p>&quot; Shortcut for save
nnoremap <leader>s :w<CR></p>
<p>&quot; Shortcut for netrw explorer
nnoremap <leader>e :e.<CR></p>
<p>&quot; JSON pretty print (all buffer)
nnoremap <leader>pj :%!python -m json.tool<CR></p>
<p>&quot; Diff all windows (should prep 2 windows for this)
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff!<CR>
{% endhighlight %}</p>
<p>And here&rsquo;s my base <code>.vimrc</code> for Linux and OSX.</p>
<p>{% highlight conf %}
let mapleader = &quot; &quot;</p>
<p>filetype off
syntax on
colorscheme elflord
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin &lsquo;VundleVim/Vundle.vim&rsquo;
Plugin &lsquo;Valloric/YouCompleteMe&rsquo;
Plugin &lsquo;jelera/vim-javascript-syntax&rsquo;
Plugin &lsquo;fatih/vim-go&rsquo;
Plugin &lsquo;majutsushi/tagbar&rsquo;
call vundle#end()
filetype plugin indent on</p>
<p>&quot; Save marks to up to 100 files, save global marks as well (f1). To disable, f0
set viminfo=&lsquo;100,f1</p>
<p>&quot; Folding options
set foldmethod=indent
set foldnestmax=20
set nofoldenable
set foldlevel=0</p>
<p>set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set nu
set encoding=utf-8
set noswapfile
set shortmess+=I
set backspace=2
set nocompatible
set ignorecase
set splitright
set splitbelow
set ruler
&quot; Temporary enable/disable YouCompleteMe. Active = disable, commented = enable
&quot; let g:loaded_youcompleteme = 1
let g:ycm_global_ycm_extra_conf = &ldquo;~/.ycm_extra_conf.py&rdquo;
let g:ycm_disable_for_files_larger_than_kb = 0
let g:ycm_autoclose_preview_window_after_completion = 1</p>
<p>&quot; Options for netrw
let g:netrw_liststyle = 0
let g:netrw_altv = 1</p>
<p>&quot; 1. :PluginInstall
&quot; 2. :GoInstallBinaries (gotags, vim-go)
&quot; 3. Install &lsquo;ctags&rsquo;
&quot; 4. go get -u github.com/jstemmer/gotags
let g:tagbar_type_go = {
\ &lsquo;ctagstype&rsquo; : &lsquo;go&rsquo;,
\ &lsquo;kinds&rsquo;     : [
\ &lsquo;p:package&rsquo;,
\ &lsquo;i:imports:1&rsquo;,
\ &lsquo;c:constants&rsquo;,
\ &lsquo;v:variables&rsquo;,
\ &rsquo;t:types&rsquo;,
\ &rsquo;n:interfaces&rsquo;,
\ &lsquo;w:fields&rsquo;,
\ &rsquo;e:embedded&rsquo;,
\ &rsquo;m:methods&rsquo;,
\ &lsquo;r:constructor&rsquo;,
\ &lsquo;f:functions&rsquo;
\ ],
\ &lsquo;sro&rsquo; : &lsquo;.&rsquo;,
\ &lsquo;kind2scope&rsquo; : {
\ &rsquo;t&rsquo; : &lsquo;ctype&rsquo;,
\ &rsquo;n&rsquo; : &rsquo;ntype&rsquo;
\ },
\ &lsquo;scope2kind&rsquo; : {
\ &lsquo;ctype&rsquo; : &rsquo;t&rsquo;,
\ &rsquo;ntype&rsquo; : &rsquo;n&rsquo;
\ },
\ &lsquo;ctagsbin&rsquo;  : &lsquo;gotags&rsquo;,
\ &lsquo;ctagsargs&rsquo; : &lsquo;-sort -silent&rsquo;
\ }</p>
<p>nnoremap <F8> :TagbarToggle<CR></p>
<p>&quot; Search for the word under cursor in the current dir (recursively)
command CSM execute &ldquo;:vimgrep /&rdquo; . expand(&quot;<cword>&quot;) . &ldquo;/j ** <Bar> :cw&rdquo;
nnoremap <leader>ms :CSM<CR>
set wildignore+=jennah</p>
<p>&quot; Simple mappings for window manipulations
nnoremap <leader>wq <C-W>q
nnoremap <leader>ws <C-W>s
nnoremap <leader>wv <C-W>v
nnoremap <leader><left><left> <C-W><left>
nnoremap <leader><right><right> <C-W><right>
nnoremap <leader><up><up> <C-W><up>
nnoremap <leader><down><down> <C-W><down></p>
<p>&quot; Display buffers, then prep the colon for the next command
nnoremap <leader>b :ls<CR>:</p>
<p>&quot; Shortcut for save
nnoremap <leader>s :w<CR></p>
<p>&quot; Shortcut for netrw explorer
nnoremap <leader>e :e.<CR></p>
<p>&quot; JSON pretty print (all buffer)
nnoremap <leader>pj :%!python -m json.tool<CR></p>
<p>&quot; Diff all windows (should prep 2 windows for this)
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff!<CR></p>
<p>&quot; Highlight/no highlight for search
nnoremap <leader>hl :set hlsearch<CR>
nnoremap <leader>hn :set nohlsearch<CR></p>
<p>&quot; Diff all windows (should prep two windows for this)
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff!<CR>
{% endhighlight %}</p>
<h3 id="update-20160824">Update (2016/08/24)</h3>
<p>Updated <code>vimrc</code> can be viewed <a href="https://github.com/flowerinthenight/vim">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-07-27-sharing-my-vimrc/</guid>

                
                    <link>http://localhost:1313/blog/2016-07-27-sharing-my-vimrc/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Sharing my .vimrc</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I use <code>tmux</code> heavily and in tandem with <code>vim</code>. Much more so now when it&rsquo;s supported on Bash on Windows as well. I don&rsquo;t have to spin up a Linux VM just for the purpose of being my <code>tmux</code> &ldquo;server&rdquo;.</p>
<p>{% highlight conf %}</p>
<h1 id="set-a-ctrl-b-shortcut-for-reloading-tmux-config">Set a Ctrl-b shortcut for reloading tmux config</h1>
<p>unbind r
bind r source-file ~/.tmux.conf</p>
<h1 id="prefix-is-ctrl-a">Prefix is Ctrl-a</h1>
<p>unbind C-b
set -g prefix C-a
bind C-a send-prefix</p>
<h1 id="rename-terminals">Rename terminals</h1>
<p>set -g set-titles on
set -g set-titles-string &lsquo;#(whoami)@#h@#(curl ipecho.net/plain;echo)&rsquo;</p>
<h1 id="status-bar-customization">Status bar customization</h1>
<p>set -g status-bg black
set -g status-fg white
set -g status-interval 5
set -g status-left-length 90
set -g status-right-length 60
set -g status-left &ldquo;#[fg=Green]#(whoami)#[fg=white]@#[fg=red]#(hostname -s)#[fg=white]|#[fg=yellow]#(curl ipecho.net/plain;echo)#[fg=white]|#[fg=yellow]#(hostname -I)#[fg=white]&rdquo;
set -g status-justify left
set -g status-right &lsquo;#[fg=Cyan]#S #[fg=white]%a %d %b %R&rsquo;</p>
<h1 id="easy-to-remember-split-pane-commands">Easy to remember split pane commands</h1>
<p>bind | split-window -h
bind - split-window -v
unbind &lsquo;&quot;&rsquo;
unbind %</p>
<h1 id="vim-friendly-settings-from-httpsgistgithubcomanonymous6bebae3eb9f7b972e6f0">Vim friendly settings (from <a href="https://gist.github.com/anonymous/6bebae3eb9f7b972e6f0">https://gist.github.com/anonymous/6bebae3eb9f7b972e6f0</a>)</h1>
<p>setw -g monitor-activity on
set -g visual-activity on
set -g mode-keys vi</p>
<h1 id="extend-history-limit">Extend history limit</h1>
<p>set -g history-limit 10000
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-11-sharing-my-tmux-conf/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-11-sharing-my-tmux-conf/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Sharing my .tmux.conf</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<h2 id="overview">Overview</h2>
<p>This post will walk through the steps on how we provisioned our production Kubernetes cluster <a href="https://twitter.com/mobingi">@mobingi</a>. Some of the bits here are already automated in our case but I will try to include as much details as I can.</p>
<p>Our goals would be the following:</p>
<ul>
<li>Provision a Kubernetes cluster on AWS using <a href="https://github.com/kubernetes/kops">kops</a>.</li>
<li>The cluster will have two autoscaling groups: one for on-demand, one for spot instances.</li>
<li>It&rsquo;s going to be a gossip-based cluster.</li>
<li>RBAC is enabled in the cluster.</li>
</ul>
<p>There is no need to rewrite the otherwise excellent installation instructions written in the <a href="https://github.com/kubernetes/kops/blob/master/docs/aws.md">kops wiki</a>. Basically, we can just follow the setup instructions there. The instructions in this post will be specific to our goals above.</p>
<h2 id="gossip-based-cluster">Gossip-based cluster</h2>
<p>We will skip the DNS configuration section as we are provisioning a gossip-based cluster, meaning, the cluster name will be something like <code>&quot;&lt;some-name&gt;.k8s.local&quot;</code>. We will be using <code>&quot;mycluster.k8s.local&quot;</code> as our cluster name.</p>
<h2 id="ssh-keypair">SSH keypair</h2>
<p>We will create the keypair in AWS under EC2 -&gt; Key Pairs -&gt; Create Key Pair. We need this keypair when we need to ssh to our cluster nodes. After saving the keypair somewhere, we will generate the public key using the following command:</p>
<p>{% highlight shell %}
$ ssh-keygen -y -f mycluster.pem &gt; mycluster.pem.pub
{% endhighlight %}</p>
<h2 id="create-the-cluster">Create the cluster</h2>
<p>At this point, we should already have our environment variables set, mainly <code>NAME</code> and <code>KOPS_STATE_STORE</code>. To create the cluster:</p>
<p>{% highlight shell %}</p>
<h1 id="im-from-japan-so-im-using-ap-northeast-1-tokyo">I&rsquo;m from Japan so I&rsquo;m using ap-northeast-1 (Tokyo)</h1>
<p>$ kops create cluster <br>
&ndash;ssh-public-key mycluster.pem.pub
&ndash;zones ap-northeast-1a,ap-northeast-1c <br>
&ndash;authorization RBAC <br>
&ndash;cloud aws ${NAME} <br>
&ndash;yes
{% endhighlight %}</p>
<p>It will take some time before the cluster will be ready. To validate the cluster:</p>
<p>{% highlight shell %}
$ kops validate cluster
Using cluster from kubectl context: mycluster.k8s.local</p>
<p>Validating cluster mycluster.k8s.local</p>
<p>INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-ap-northeast-1a  Master  m3.medium       1       1       &hellip;
nodes                   Node    t2.medium       2       2       &hellip;</p>
<p>NODE STATUS
NAME                                                    ROLE    READY
ip-x-x-x-x.ap-northeast-1.compute.internal              master  True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
&hellip;</p>
<p>Your cluster mycluster.k8s.local is ready
{% endhighlight %}</p>
<p>Notice that we only have one instance for our master. We can also opt to have a highly available master using <a href="https://github.com/kubernetes/kops/blob/master/docs/commands.md#other-interesting-modes">these options</a>, which is generally recommended for production clusters. Based on our experience though, this single master instance setup is good enough for development and/or staging clusters. There&rsquo;s going to be downtime if master goes down in which case the duration will depend on how long AWS autoscaling group kicks in. During that window, k8s API won&rsquo;t be accessible but the nodes will continue to work, including our deployed applications.</p>
<h2 id="spot-instance-autoscaling-group">Spot instance autoscaling group</h2>
<p>Once the cluster is ready, we will add another instance group for spot instances. The default instance group created in the previous command, named &ldquo;nodes&rdquo;, will be our on-demand group. To add:</p>
<p>{% highlight shell %}
$ kops create ig nodes-spots -subnet ap-northeast-1a,ap-northeast-1c
{% endhighlight %}</p>
<p>You can then edit using the following contents (modify values as needed):</p>
<p>{% highlight ruby %}
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
creationTimestamp: <some-datetime-value-here>
labels:
kops.k8s.io/cluster: mycluster.k8s.local
name: nodes-spot
spec:
image: kope.io/k8s-1.8-debian-jessie-amd64-hvm-ebs-2017-12-02
machineType: t2.medium
maxPrice: &ldquo;0.02&rdquo;
maxSize: 10
minSize: 2
nodeLabels:
kops.k8s.io/instancegroup: nodes
spot: &ldquo;true&rdquo;
role: Node
subnets:</p>
<ul>
<li>ap-northeast-1a</li>
<li>ap-northeast-1c
{% endhighlight %}</li>
</ul>
<p>We can now update our cluster with the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="optional-update-our-on-demand-groups-max-size-to-some-number">[optional] update our on-demand group&rsquo;s max size to some number</h1>
<p>$ kops edit ig nodes</p>
<h1 id="optional-preview-the-changes-to-be-applied">[optional] preview the changes to be applied</h1>
<p>$ kops update cluster ${NAME}</p>
<h1 id="actual-cluster-update">actual cluster update</h1>
<p>$ kops update cluster ${NAME} &ndash;yes</p>
<h1 id="optional-check-if-we-need-rolling-update">[optional] check if we need rolling update</h1>
<p>$ kops rolling-update cluster</p>
<h1 id="if-so-add---yes-option">if so, add &ndash;yes option</h1>
<p>$ kops rolling-update cluster &ndash;yes
{% endhighlight %}</p>
<p>We can now validate the cluster to see our changes:</p>
<p>{% highlight shell %}
$ kops validate cluster
Validating cluster mycluster.k8s.local</p>
<p>INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-ap-northeast-1a  Master  m3.medium       1       1       &hellip;
nodes                   Node    t2.medium       2       4       &hellip;
nodes-spot              Node    t2.medium       2       10      &hellip;</p>
<p>NODE STATUS
NAME                                                    ROLE    READY
ip-x-x-x-x.ap-northeast-1.compute.internal              master  True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
&hellip;</p>
<p>Your cluster mycluster.k8s.local is ready
{% endhighlight %}</p>
<p>When our cluster was created, kops also has automatically generated our config file for kubectl. To verify:</p>
<p>{% highlight shell %}
$ kubectl cluster-info
Kubernetes master is running at https&hellip;
KubeDNS is running at https&hellip;</p>
<p>To further debug and diagnose cluster problems, use &lsquo;kubectl cluster-info dump&rsquo;.
{% endhighlight %}</p>
<h2 id="setup-cluster-autoscaler">Setup cluster autoscaler</h2>
<p>Clusters created using kops use autoscaling groups, but without scaling policies (at the time of writing). To enable dynamic scaling of our cluster, we will use <a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler/cloudprovider/aws">cluster autoscaler</a>. Before cluster autoscaler deployment, we need to setup some prerequisites.</p>
<p>First, we need to attach the following permissions to master and nodes IAM role. Go to IAM roles console and add an inline policy to the roles created by kops. Role names would be something like:</p>
<ul>
<li>master.mycluster.k8s.local</li>
<li>nodes.mycluster.k8s.local</li>
</ul>
<p>{% highlight json %}
{
&ldquo;Version&rdquo;: &ldquo;2012-10-17&rdquo;,
&ldquo;Statement&rdquo;: [
{
&ldquo;Effect&rdquo;: &ldquo;Allow&rdquo;,
&ldquo;Action&rdquo;: [
&ldquo;autoscaling:DescribeAutoScalingGroups&rdquo;,
&ldquo;autoscaling:DescribeAutoScalingInstances&rdquo;,
&ldquo;autoscaling:DescribeTags&rdquo;,
&ldquo;autoscaling:SetDesiredCapacity&rdquo;,
&ldquo;autoscaling:TerminateInstanceInAutoScalingGroup&rdquo;
],
&ldquo;Resource&rdquo;: &ldquo;*&rdquo;
}
]
}
{% endhighlight %}</p>
<p>The latest installation instructions can be found <a href="https://github.com/kubernetes/kops/tree/master/addons/cluster-autoscaler">here</a>. The general idea is to choose the latest yaml file, update it with your own values, and apply the file using kubectl. The readme file also provides a script that does the download and edit for us. We will be using the following command line arguments for our autoscaler:</p>
<p>{% highlight ruby %}
command:</p>
<ul>
<li>./cluster-autoscaler</li>
<li>&ndash;cloud-provider=aws</li>
<li>&ndash;v=4</li>
<li>&ndash;stderrthreshold=info</li>
<li>&ndash;scale-down-delay=5m</li>
<li>&ndash;skip-nodes-with-local-storage=false</li>
<li>&ndash;expander=least-waste</li>
<li>&ndash;nodes=2:4:nodes.mycluster.k8s.local</li>
<li>&ndash;nodes=2:10:nodes-spot.mycluster.k8s.local
{% endhighlight %}</li>
</ul>
<p>You should update the last two line with your own autoscaling group min/max values. Finally, we deploy our autoscaler with:</p>
<p>{% highlight shell %}
$ kubectl create -f cluster-autoscaler.yml
deployment &ldquo;cluster-autoscaler&rdquo; created
{% endhighlight %}</p>
<p>That&rsquo;s it. You may also want to install <a href="https://github.com/kubernetes/kops/blob/master/docs/addons.md#installing-kubernetes-addons">these addons</a> if you like.</p>
<h2 id="ssh-to-a-node">SSH to a node</h2>
<p>{% highlight shell %}</p>
<h1 id="sample-ips-only">sample ip&rsquo;s only</h1>
<p>$ kubectl get node -o wide
NAME                           STATUS    ROLES     AGE   VERSION   EXTERNAL-IP  OS-IMAGE                      &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     master    1d    v1.8.6    1.2.3.4      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.5      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.6      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.7      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.8      Debian GNU/Linux 8 (jessie)   &hellip;</p>
<h1 id="default-username-is-admin">default username is <code>admin</code></h1>
<p>$ ssh -i mycluster.pem <a href="mailto:admin@1.2.3.4">admin@1.2.3.4</a>
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2018-01-24-k8s-kops-aws/</guid>

                
                    <link>http://localhost:1313/blog/2018-01-24-k8s-kops-aws/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Running Kubernetes on AWS using kops</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Happy new year to all! To the bookworms out there, I&rsquo;ve added a new page in the site called <a href="http://flowerinthenight.com/bookshelf/">Bookshelf</a>, a list of all the books I&rsquo;ve read so far. If you have any suggestions/recommendations, please don&rsquo;t hesitate to leave a comment. Thank you.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-01-04-bookshelf/</guid>

                
                    <link>http://localhost:1313/blog/2017-01-04-bookshelf/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>New ‘Bookshelf’ page</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Update 2017/03/24: Transferred to a separate repository <a href="https://github.com/flowerinthenight/git-cheatsheet">here</a>.</p>
<p>For personal reference:</p>
<h3 id="reset-a-file">Reset a file</h3>
<p>{% highlight shell %}
git checkout HEAD &ndash; my-file.txt
{% endhighlight %}</p>
<h3 id="delete-last-commit">Delete last commit</h3>
<p>{% highlight shell %}
git reset &ndash;hard HEAD~1
{% endhighlight %}</p>
<h3 id="delete-local-branch">Delete local branch</h3>
<p>{% highlight shell %}
git branch -d <branch-name>
{% endhighlight %}</p>
<p>or to force delete</p>
<p>{% highlight shell %}
git branch -D <branch-name>
{% endhighlight %}</p>
<h3 id="delete-branch-from-remote-repository">Delete branch from remote repository</h3>
<p>{% highlight shell %}
git push origin &ndash;delete <remote-branch-name>
{% endhighlight %}</p>
<h3 id="search-for-the-merge-commit-from-a-specific-commit">Search for the merge commit from a specific commit</h3>
<p>{% highlight shell %}
git log <SHA>..master &ndash;ancestry-path &ndash;merges
{% endhighlight %}</p>
<h3 id="search-for-a-commit-message">Search for a commit message</h3>
<p>{% highlight shell %}
git log | grep <pattern>
{% endhighlight %}</p>
<h3 id="list-commits-on-range-line-of-codes-for-one-file">List commits on range line of codes for one file</h3>
<p>{% highlight shell %}
git blame -L&lt;line#&gt;,+<offset> &ndash; <filename>
{% endhighlight %}</p>
<p>For example, three lines starting from line 257 of main.cpp</p>
<p>{% highlight shell %}
git blame -L257,+3 &ndash; main.cpp
{% endhighlight %}</p>
<h3 id="history-of-a-line-or-lines-in-a-file">History of a line (or lines) in a file</h3>
<p>{% highlight shell %}
git log &ndash;topo-order &ndash;graph -u -L <line-start>,<line-end>:<file>
{% endhighlight %}</p>
<p>For example, history of line 155 of main.cpp</p>
<p>{% highlight shell %}
git log &ndash;topo-order &ndash;graph -u -L 155,155:main.cpp
{% endhighlight %}</p>
<h3 id="compare-diff-a-file-from-the-current-branch-to-another-branch">Compare (diff) a file from the current branch to another branch</h3>
<p>{% highlight shell %}
git diff ..<target-branch> <path-to-file>
{% endhighlight %}</p>
<p>Or if <code>difftool</code> is configured</p>
<p>{% highlight shell %}
git difftool ..<target-branch> <path-to-file>
{% endhighlight %}</p>
<h3 id="rebasesquash-all-branch-commits">Rebase/squash all branch commits</h3>
<p>{% highlight shell %}
git checkout -b new-branch
modify&hellip;
commit&hellip;
&hellip;
git rebase -i master
(sometimes, I branch out of master for a clean branch and do a git rebase -i clean-branch)
git checkout master
git rebase new-branch
(delete clean-branch)
{% endhighlight %}</p>
<h3 id="combine-all-branch-commits-to-one-before-merging-to-master-sort-of-like-the-one-above">Combine all branch commits to one before merging to master (sort of like the one above)</h3>
<p>{% highlight shell %}
git checkout master
git checkout -b clean
git merge &ndash;squash branch_to_merge_to_one_commit
git commit
(add commit message)
git checkout master
git merge clean
{% endhighlight %}</p>
<h3 id="custom-format-for-log">Custom format for log</h3>
<p>Add to global <code>.gitconfig</code> using <code>git config --global alias.logp &quot;...&quot;</code></p>
<p>{% highlight shell %}
git log &ndash;pretty=format:&rsquo;%Cred%h %C(yellow)%d%Creset %s %Cgreen(%cr|%ci) %C(bold blue)[%an]%Creset'
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-18-git-commands-notes/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-18-git-commands-notes/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>My commonly used commands in GIT</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For self reference:</p>
<p>{% gist caa8ae4a0112f25eeabb67d0fbd837dd %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-08-31-golang-json-prettify/</guid>

                
                    <link>http://localhost:1313/blog/2017-08-31-golang-json-prettify/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>JSON prettifier function in Go</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<p>{% gist b6e639978dc2c21042ccea526700f214 %}</p>
<h3 id="access-root">Access root</h3>
<p>{% highlight shell %}
http://localhost:8000
{% endhighlight %}</p>
<h3 id="access-expvar-information">Access expvar information</h3>
<p>{% highlight shell %}
http://localhost:8000/debug/vars
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-20-expvar-gorilla-mux/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-20-expvar-gorilla-mux/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>How to serve expvar when using gorilla/mux</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>After six or so years living in Japan, I just got mine today. Yeah, I know&hellip;</p>
<p><a href="https://gaijinpot.com/">GaijinPot</a> has an <a href="https://blog.gaijinpot.com/convenience-store-point-cards/">article</a> about point cards from three of the most common convenience stores in the country. I already have Lawsons Ponta card and Family Marts T-Point ages ago but for some reason, I actually havent heard of 7-11s <a href="https://en.wikipedia.org/wiki/Nanaco">Nanaco</a>. Or maybe I did but I probably didnt bother.</p>
<p>But now that I have a Seven Bank account, I noticed from their online bank access site an option to register to their point service. Unsurprisingly, they offer Nanaco points to almost all of my bank transactions (deposits, withdrawals, fund transfers, etc.) which I think is brilliant. But I have to have a Nanaco point card in the first place before I can register. It also said that I can get the card from any 7-11 store. I just have to fill up some application form (surely in Japanese). Or, I can also fill up the application form online, print it and submit to any 7-11 store. I went for the later.</p>
<p><a href="https://www.nanaco-net.jp/index_pc.html">Nanaco official website</a> is in Japanese. So Google Translate is your friend here. My Chrome browser is set to auto-translate so Im good to go. Go to this <a href="https://www.nanaco-net.jp/entry/index02.html">link</a>, scroll down a bit, and press the big red button. It looks like this:</p>
<p>{% include image.html url=&quot;../../../../images/nanaco1.png&quot; %}</p>
<p>It will open a new window with some more Japanese instructions. Scroll down to the very bottom and click the left button.</p>
<p>{% include image.html url=&quot;../../../../images/nanaco2.png&quot; %}</p>
<p>The next page will be the actual form. You will need to input personal information such as your name, birthday, address (both Japanese and Katakana), phone number, etc. I had a few attempts because the password field only accepts numbers (although Google Translation said &ldquo;alphanumeric&rdquo;. Oh well). Then click the Next button (the only button) at the very bottom. If you got it right, you will receive a confirmation email containing a link to the document to be printed. It will look like this:</p>
<p>{% include image.html url=&quot;../../../../images/nanaco3.png&quot; %}</p>
<p>Print it and submit to any 7-11 store. The card will cost you 300 yen. After payment, you will get your card right away.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-02-25-apply-nanaco-point-card/</guid>

                
                    <link>http://localhost:1313/blog/2016-02-25-apply-nanaco-point-card/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>How to apply for a Nanaco point card</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I installed Samba to my Ubuntu Server (which is an old ThinkPad laptop that has been gathering dust in my closet for ages):</p>
<p>{% highlight shell %}
sudo apt-get install samba
{% endhighlight %}</p>
<p>I have three 3-TB HDDs that I planned to use as my main server storage; one main server, and the other two for backup. All of these HDDs are in ext4 format.</p>
<p>Then I created a new directory under <code>/media</code> where I will mount my main server storage:</p>
<p>{% highlight shell %}
mkdir /media/myserver
{% endhighlight %}</p>
<p>Then I edited the samba config file <code>/etc/samba/smb.conf</code>. I just scrolled to the very bottom and added these lines (after [print$] section):</p>
<p>{% highlight conf %}
[MYSERVER]
path = /media/myserver
browsable = yes
writable = yes
guest ok = yes
read only = no
{% endhighlight %}</p>
<p>Then I tested the config file for syntax errors using the command:</p>
<p>{% highlight shell %}
testparm
{% endhighlight %}</p>
<p>Before I added the mount entry for my server to <code>/etc/fstab</code>, I took note of my HDD&rsquo;s UUID from the following command:</p>
<p>{% highlight shell %}
sudo blkid
{% endhighlight %}</p>
<p>in which the output looked something like</p>
<p>{% highlight shell %}
/dev/sdb1: UUID=&ldquo;996a1b79-bf22-49fd-a3d1-33eab2708cfb&rdquo; TYPE=&ldquo;ext4&rdquo;
{% endhighlight %}</p>
<p>Then I edited <code>/etc/fstab</code> and added the line below:</p>
<p>{% highlight shell %}
UUID=996a1b79-bf22-49fd-a3d1-33eab2708cfb /media/myserver ext4 defaults 0 0
{% endhighlight %}</p>
<p>Lastly, I then rebooted my server.</p>
<h1 id="accessing-my-file-server-from-windows">Accessing my file server from Windows</h1>
<p>To access my server, I opened File Explorer and browsed to <code>\\my_server_ip\myserver</code>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-28-setup-samba-server/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-28-setup-samba-server/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>How I set up my Samba file server</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>As of this writing, GitHub Pages still doesn&rsquo;t support HTTPS for custom domains. Last week, I came across <a href="https://www.netlify.com/github-pages-vs-netlify/">Netlify</a> being able to serve GitHub Pages as is, with HTTPS support even with custom domains. I gave it a go. And it worked. If you&rsquo;re in the same boat as me (using GH-Pages with custom domains), give <a href="https://www.netlify.com/">Netlify</a> a go.</p>
<p>Note: I am not affiliated with Netlify in any way, whatsoever.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-07-31-ghpages-netlify/</guid>

                
                    <link>http://localhost:1313/blog/2017-07-31-ghpages-netlify/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>From GitHub Pages to Netlify</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Recently, I was working on a project that involves the encoding of .NET bitmaps using <a href="https://www.ffmpeg.org/">ffmpeg</a>&rsquo;s h264 encoder with <code>mp4</code> as container. This video output will be used in a <code>&lt;video&gt;</code> tag in html5. Sample codes have been all over the place so it took me quite a while to come up with a working solution. The official sample from ffmpeg only encodes to raw h264 stream. This is just a basic sample code for reference.</p>
<p>Check out the source code <a href="https://github.com/flowerinthenight/ffmpeg-encode-h264mp4">here</a>.</p>
<p>Lastly, some useful links that I used:</p>
<ul>
<li><a href="https://en.code-bude.net/2013/04/17/how-to-create-video-files-in-c-from-single-images/">https://en.code-bude.net/2013/04/17/how-to-create-video-files-in-c-from-single-images/</a></li>
<li><a href="https://github.com/FFmpeg/FFmpeg/blob/master/doc/examples/decoding_encoding.c">https://github.com/FFmpeg/FFmpeg/blob/master/doc/examples/decoding_encoding.c</a></li>
<li><a href="http://www.imc-store.com.au/Articles.asp?ID=276">http://www.imc-store.com.au/Articles.asp?ID=276</a></li>
</ul>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-11-28-ffmpeg-encode-h264mp4/</guid>

                
                    <link>http://localhost:1313/blog/2016-11-28-ffmpeg-encode-h264mp4/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Encoding .NET bitmaps to H264 using FFMPEG</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I&rsquo;ve found this <a href="https://gist-it.appspot.com/">nifty little tool</a> that can embed codes directly from your GitHub repositories without using Gist. It&rsquo;s very easy to use. For example, if you want to embed, say, <a href="https://github.com/flowerinthenight/rusttrace/blob/master/src/main.rs">this whole file</a>, you only need to add this snippet somewhere in your post.md file.</p>
<p>{% highlight html %}</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rusttrace/blob/master/src/main.rs?footer=minimal"></script>
<p>{% endhighlight %}</p>
<p>The <code>?footer=minimal</code> part is optional. It will look something like this:</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rusttrace/blob/master/src/main.rs?footer=minimal"></script>
<p>It can also embed just a section of code based on line numbers. For example, to embed line 234 to line 257 of <a href="https://github.com/flowerinthenight/rmq/blob/master/rabbitmq.go">this file</a>, this snippet will do.</p>
<p>{% highlight html %}</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rmq/blob/master/rabbitmq.go?slice=233:257&footer=minimal"></script>
<p>{% endhighlight %}</p>
<p>It will look something like this:</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rmq/blob/master/rabbitmq.go?slice=233:257&footer=minimal"></script>
<p>Just note that the <code>slice=</code> parameter is zero-based and GitHub&rsquo;s line numbering starts at 1.</p>
<p>Finally, if you have an HTTPS blog, make sure to use <code>https://gist-it.appspot.com/...</code>, not <code>http://gist-it.appspot.com/...</code>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-11-28-embed-github-code/</guid>

                
                    <link>http://localhost:1313/blog/2017-11-28-embed-github-code/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Embed code from GitHub to GitHub Pages blog like Gist</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Yet another service code for Windows. This time, it&rsquo;s an ATL service. ATL services are basically the same as <a href="https://github.com/flowerinthenight/win32-base-service">traditional Windows services</a> but with some advantages.</p>
<ul>
<li>Can be started on-demand automatically by the first client call (via COM).</li>
<li>Clients can call service functions with parameters and return values using COM. In traditional services, clients normally communicate using service control codes and you need some kind of IPC (named pipes, shared memory, etc.) for bi-directional data exchange.</li>
</ul>
<p>A client console app is provided to demonstrate service function call with return value and service-to-client notification via IDispatch.</p>
<p>Check out the source code <a href="https://github.com/flowerinthenight/base-atlcom-svc">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2017-01-18-base-atl-service/</guid>

                
                    <link>http://localhost:1313/blog/2017-01-18-base-atl-service/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>ATL service base code</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<p>{% gist 8da2984e90dd4a3a26ff645e6a37f275 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-21-log-prefix-fname-go/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-21-log-prefix-fname-go/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Add function name prefix to log.Println in Go</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Recently, I&rsquo;ve been working on a service that runs on a lot of VM&rsquo;s across different locations. If I have a new service build, updating all of the running instances quickly became a bit of a pain. I have to log in to every VM (in some cases through a VPN) and then do a manual upgrade. Now, there are probably tools that already exist for this type of use case but since I&rsquo;m still learning Go at the moment, I thought this would be a good exercise.</p>
<p>Basically, this is a Windows service that has an http endpoint that accepts a file upload (in this case, a new version of itself). The service then saves this file, calls the <code>MoveFileEx</code> API with the <code>MOVEFILE_DELAY_UNTIL_REBOOT</code> flag, then reboots the system. I also added a simple client (still written in Go) that will upload the file.</p>
<p>With these tools, I can now update all the running service instances with a script.</p>
<p>Full source code <a href="https://github.com/flowerinthenight/go-windows-delay-update-svc">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-09-27-windows-delay-update-service-go/</guid>

                
                    <link>http://localhost:1313/blog/2016-09-27-windows-delay-update-service-go/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A Windows service with an http endpoint for uploading a new version of itself</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>{% highlight powershell %}
function ZipFiles($ZipFileName, $SourceDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
$compressionLevel = [System.IO.Compression.CompressionLevel]::Optimal
[System.IO.Compression.ZipFile]::CreateFromDirectory($SourceDir, $ZipFileName, $compressionLevel, $false)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
ZipFiles -ZipFileName test.zip -SourceDir .\folder\to\zip
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-05-zip-function-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-05-zip-function-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple zip function in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>{% highlight powershell %}
function UnzipFiles($ZipFileName, $DestDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($ZipFileName, $DestDir)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
UnzipFiles -ZipFileName .\folder\file.zip -DestDir .\destination
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-06-unzip-function-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-06-unzip-function-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple unzip function in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Personal reference:</p>
<p>{% gist 1ea9a6b71bc9d4a6e5a269e63028d046 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-13-signal-handler-linux-cpp/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-13-signal-handler-linux-cpp/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple signal handler in C/C++ (Linux)</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>For personal reference:</p>
<p>{% gist 8fae6c9a56df98b8ff96f117a7c9f341 %}</p>
<p>Full source code <a href="https://github.com/flowerinthenight/win-restclientserver-console">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-08-24-rest-client-server-c%23/</guid>

                
                    <link>http://localhost:1313/blog/2016-08-24-rest-client-server-c%23/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple REST client/server console app in C#</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>A couple of days ago, I was working on a powershell-based script for mstest automation and I needed to call <code>vsdevcmd.bat</code> from Visual Studio&rsquo;s tools folder.</p>
<p>{% highlight powershell %}
function Invoke-Environment([Parameter(Mandatory=1)][string]$Command, [switch]$Output, [switch]$Force)
{
$stream = if ($Output) { ($temp = [IO.Path]::GetTempFileName()) } else { &rsquo;nul&rsquo; }
$operator = if ($Force) {&rsquo;&amp;&rsquo;} else {&rsquo;&amp;&amp;'}</p>
<pre><code>foreach($_ in cmd /c &quot; $Command &gt; `&quot;$stream`&quot; 2&gt;&amp;1 $operator SET&quot;)
{
    if ($_ -match '^([^=]+)=(.*)')
    {
        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
    }
}

if ($Output)
{
    Get-Content -LiteralPath $temp
    Remove-Item -LiteralPath $temp
}
</code></pre>
<p>}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
Invoke-Environment &lsquo;&ldquo;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat&rdquo;&rsquo;
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-05-06-import-environment-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-05-06-import-environment-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple Powershell function to import an environment</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Personal reference:</p>
<p>{% gist 66dd730db7f15d4b79b2523d8a03a468 %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-06-13-folder-file-watcher-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-06-13-folder-file-watcher-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple folder/file watcher in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>A couple of days ago, I uploaded a generic service in GitHub that has a feature of updating itself. Check out the post <a href="http://flowerinthenight.com/blog/2016/09/27/windows-delay-update-service-go">here</a>. Today, I uploaded the actual service I&rsquo;m using in our CI environment, excluding the configuration file.</p>
<p>Check out the source code <a href="https://github.com/flowerinthenight/holly">here</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-10-07-cron-like-windows-service-go/</guid>

                
                    <link>http://localhost:1313/blog/2016-10-07-cron-like-windows-service-go/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple cron-like Windows service</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Basically, 2 steps:</p>
<p>Create a C++ Windows Runtime Component (dll) that will use the ETW header file.
Reference the WinRT DLL to C# project.</p>
<h1 id="winrt-dll">WinRT DLL</h1>
<p>My logging class looks like this:</p>
<p>{% highlight cpp %}
public ref class TraceCore sealed
{
private:
TraceCore();
~TraceCore();</p>
<pre><code>static TraceCore^ m_Instance;
</code></pre>
<p>public:
static property TraceCore^ Instance
{
TraceCore^ get()
{
if (m_Instance == nullptr)
{
m_Instance = ref new TraceCore();
}</p>
<pre><code>        return m_Instance;
    }
}

void Verbose(Platform::String^ mod, Platform::String^ file, Platform::String^ func, Platform::String^ m);
</code></pre>
<p>};
{% endhighlight %}</p>
<p>And heres the implementation:</p>
<p>{% highlight cpp %}
#include &ldquo;pch.h&rdquo;
#include &ldquo;TraceCore.h&rdquo;</p>
<p>using namespace LibRTWrapperETW;
using namespace Platform;</p>
<p>#include &ldquo;jytrace.h&rdquo;</p>
<p>TraceCore^ TraceCore::m_Instance = nullptr;</p>
<p>TraceCore::TraceCore()
{
EventRegisterJyTrace();
}</p>
<p>TraceCore::~TraceCore()
{
EventUnregisterJyTrace();
}</p>
<p>void TraceCore::Verbose(String^ mod, String^ file, String^ func, String^ m)
{
EventWriteSimple(mod-&gt;Data(), file-&gt;Data(), func-&gt;Data(), L&quot;Trace&quot;, m-&gt;Data());
}
{% endhighlight %}</p>
<h1 id="wrapper-class">Wrapper Class</h1>
<p>Just like in part 5, I wrapped the C++ bits to a C# class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes:</p>
<p>{% highlight csharp %}
public static class TraceCoreWrapper
{
public static void VerboseCore(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
TraceCore.Instance.Verbose(&ldquo;CORE_RT [&rdquo; + Environment.CurrentManagedThreadId + &ldquo;]&rdquo;, Path.GetFileName(srcFile), memberName, m);
}
}
{% endhighlight %}</p>
<p>And finally, the actual logging in C#:</p>
<p>{% highlight csharp %}
TraceCoreWrapper.VerboseCore(&ldquo;Hello from UApp (CS) world!&rdquo;);
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-22-etw-part6/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-22-etw-part6/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 6] Logging with Universal Apps</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>I generated a C# logging class using this command:</p>
<p>{% highlight shell %}
mc -css &lt;Namespace_here&gt; jytrace.man
{% endhighlight %}</p>
<p>So far, most of my event templates use an ANSI string data type which (I believe) is not supported by C#. As you can see in part 1, I use ANSI data type for my File and Function fields so that I can use <code>__FILE__</code> and <code>__FUNCTION__</code> as inputs in C++. Thats why I added a new event template with all fields using UNICODE data types. Again, you can refer to the whole package here for reference.</p>
<p>To use the logging class, I added the generated file to my project. I also added a wrapper class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes in C#.</p>
<p>{% highlight csharp %}
public static bool Verbose(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
return JyTrace.ProviderJyTrace.EventWriteSimple(&ldquo;ETWTest&rdquo;, Path.GetFileName(srcFile), memberName, &ldquo;Trace:&rdquo;, m);
}
{% endhighlight %}</p>
<p>The actual log call:</p>
<p>{% highlight csharp %}
TraceCore.Verbose(&ldquo;Hello from CS!&rdquo;);
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/22/etw-part6">part 6</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-19-etw-part5/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-19-etw-part5/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 5] Logging with C# applications</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="getting-the-logs">Getting the logs</h1>
<p>Now that I have my modules spitting out logs for me, it&rsquo;s time to actually consume (or view) them. Most of the time, I use <code>MFTrace</code> and <code>logman</code> tools.</p>
<h1 id="mftrace">MFTrace</h1>
<p>Although <code>MFTrace</code> is primarily a tool for generating logs for Media Foundation apps, it is a great tool for viewing ETW logs in general as well. It is included in the MS SDK.</p>
<p>To view logs in real time, I use this command in either Powershell or command line:</p>
<p>{% highlight shell %}
mftrace -c config.xml
{% endhighlight %}</p>
<p>To stop the trace collection, press <code>CTRL+C</code>.</p>
<h1 id="logman">logman</h1>
<p><code>logman</code> is a very powerful builtin performance counter and event trace log tool from Microsoft. For more information, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490956.aspx">here</a>.</p>
<p>You can use <code>logman</code> as alternative to <code>MFTrace</code>.</p>
<h2 id="start-tracing">Start tracing</h2>
<p>{% highlight shell %}
logman start <name> -p &lt;provider_guid_or_name&gt; <kw> <level> -o &lt;output.etl&gt; -ets
{% endhighlight %}</p>
<h3 id="examples">Examples</h3>
<p>{% highlight shell %}
logman start lms -p {3A8FD7D2-CAB3-455D-A8E5-9E1741365FEB} 0x1 win:Verbose -o c:\output.etl -ets
logman start lms -p MyProviderName 0x3 win:Informational -o c:\output.etl -ets
logman start lms -p {277c604b-1962-47fa-9307-7ce0855dfea6} 0xffffffffffffffff 0xff -o c:\output.etl -ets
{% endhighlight %}</p>
<h2 id="stop-tracing">Stop tracing</h2>
<p>{% highlight shell %}
logman stop <name> -ets
{% endhighlight %}</p>
<h3 id="examples-1">Examples</h3>
<p>{% highlight shell %}
logman stop lms -ets
{% endhighlight %}</p>
<h1 id="collecting-etw-traces-from-testproduction-systems">Collecting ETW traces from test/production systems</h1>
<p>To collect ETW trace logs from test/production systems, manifest file and message/resource file need not be registered.</p>
<p>{% highlight shell %}
mftrace -c config.xml -o c:\output.etl
{% endhighlight %}</p>
<p><code>c:\output.etl</code> is just an example. You can use any location and any filename as long as the extension is .etl. The output .etl file can only be read on a system where the manifest file and the resource/message file are registered. To read the traces:</p>
<p>{% highlight shell %}
tracerpt -y output.etl
{% endhighlight %}</p>
<p>The default readable output file that contains all the trace information will be <code>dumpfile.xml</code>. A <code>summary.txt</code> file will also be generated. For more information about <code>tracerpt</code>, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490959.aspx">here</a>.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/19/etw-part5">part 5</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-07-etw-part4/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-07-etw-part4/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 4] Log collection</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>If you remember in part 2, we compiled our manifest file with</p>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>and we got a header file as one of the outputs. We just have to include that header file to our sources and we are good to go.</p>
<p>{% highlight cpp %}
#include &hellip;
#include &ldquo;&lt;manifest_file&gt;.h&rdquo;</p>
<p>int main(&hellip;)
{
EventRegister&lt;provider_name_in_manifest&gt;();
&hellip;
CreateFile(&hellip;);
// Example of using the LastError event in our manifest file
EventWriteLastError(L&quot;THIS_EXE&quot;, <strong>FILE</strong>, <strong>FUNC</strong>, L&quot;CreateFile&quot;, GetLastError());
&hellip;
EventUnregister&lt;provider_name_in_manifest&gt;();
}
{% endhighlight %}</p>
<h1 id="notes">Notes</h1>
<ul>
<li>Any module can use the ETW provider, be it dll or exe, simultaneously. But you can also create a provider for each module if you prefer.</li>
<li>For a dll, you can call the <code>EventRegister()</code> inside your <code>DllMain</code> -&gt; <code>DLL_PROCESS_ATTACH</code> and your <code>EventUnregister()</code> in <code>DLL_PROCESS_DETACH</code>.</li>
</ul>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/07/etw-part4">part 4</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-03-etw-part3/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-03-etw-part3/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 3] Logging with C/C++ applications</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="compiling-the-manifest-file">Compiling the manifest file</h1>
<p>This is how I compiled my manifest file.</p>
<ul>
<li>Open Visual Studio command prompt.</li>
<li>Compile manifest file.</li>
</ul>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>When successful, output files are:</p>
<p>{% highlight shell %}
<filename>.h
<filename>.rc
<filename>TEMP.BIN
MSG00001.bin
{% endhighlight %}</p>
<h1 id="creating-the-message-resource-dll">Creating the message resource DLL</h1>
<p>I like to create a separate dll just for the manifest file resource although you can also add the .rc file to any of your existing dll or exe.</p>
<h2 id="compile-rc-to-res">Compile .rc to .res</h2>
<p>{% highlight shell %}
rc <filename>.rc
{% endhighlight %}</p>
<h2 id="create-dll-from-res">Create .dll from .res</h2>
<p>{% highlight shell %}
link -dll -noentry -out:<out>.dll <filename>.res
{% endhighlight %}</p>
<h1 id="register-the-manifest-to-the-system-optional">Register the manifest to the system (optional)</h1>
<p>I always register the manifest file on my development systems. As for client systems, its up to you. I dont.</p>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil im &lt;manifest_file&gt;.man /rf:&ldquo;full_path_to_resource_dll&rdquo; /mf:&ldquo;full_path_to_resource_dll&rdquo;
{% endhighlight %}</p>
<h1 id="remove-the-manifest-from-the-system">Remove the manifest from the system</h1>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/03/etw-part3">part 3</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-02-etw-part2/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-02-etw-part2/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 2] Manifest file compilation and setup</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Ive been using ETW as my go-to logging mechanism for Windows development. I will be sharing how I setup my environment here.</p>
<h1 id="creating-the-manifest-file-man">Creating the manifest file (.man)</h1>
<p>I use <code>ecmangen.exe</code> to create my manifest file. This tool is included in the SDK. I have Visual Studio 2015 installed on a Win10 64-bit machine, and its location is <code>C:\Program Files (x86)\Windows Kits\10\bin\x64\</code>. It looks something like this (my completed manifest):</p>
<p>{% include image.html url=&quot;../../../../images/etw1.png&quot; %}</p>
<p>The red strip is the manifest file name, or my ETW provider name.</p>
<p>I started by right-clicking Events Section -&gt; New -&gt; Provider, then gave it a name. Then prepended the string Provider to the existing name for the Symbol, auto-generated the GUID, left the other fields as blank, then Save.</p>
<h1 id="setting-up-keywords">Setting up Keywords</h1>
<p>{% include image.html url=&quot;../../../../images/etw2.png&quot; %}</p>
<p>Keywords basically is a mask for filtering log outputs. Mine is just a simple logging mechanism so I have only two keywords. Im not even using <code>KeywordFunctionEntryExit</code> (set to 0x1) that much nowadays so <code>KeywordGeneric</code> (set to 0x2) for me is enough. With this, I have the option later to output only the logs with the keyword <code>KeywordFunctionEntryExit</code> or <code>KeywordGeneric</code>, or both.</p>
<h1 id="setting-up-templates">Setting up Templates</h1>
<p>{% include image.html url=&quot;../../../../images/etw3.png&quot; %}</p>
<p>Templates are, well, templates for the events (in this context, a log is basically an event). Templates will contain the fields (with data types) I want to include in my log. My goal was to have logs with a format of <code>[module_name: src_file_name:  function_name] key: value</code>, where <code>key</code> would be any label, say, variable name, and <code>value</code> as, well, any value, be it int or bool, or last error, etc. I thought that this format is generic enough for me to log any information from my code.</p>
<p>All events require a template (whether your template or default, which I admit I have never used). Multiple events can use a single template.</p>
<h1 id="setting-up-events">Setting up Events</h1>
<p>{% include image.html url=&quot;../../../../images/etw4.png&quot; %}</p>
<p>Lastly, the events themselves. From the image above, I defined quite a number of events. If you noticed, my <code>LastError</code> event (which I use to log the <code>GetLastError()</code> API) specified the template <code>TemplateKeyValueLastError</code> and the keyword <code>KeywordGeneric</code>.</p>
<p>When the manifest file is compiled, all the defined events by default (can be modified during compilation) will generate a logging API with the name <code>EventWrite&lt;event_name&gt;</code>, which in the case of the highlighted one, <code>EventWriteLastError()</code>.</p>
<p>Another thing to point out is the <code>Message</code>. The <code>%[number]</code> corresponds to the fields defined in the template used. First field will be %1, second field will be %2, and so on and so on.</p>
<p>Lastly, save your manifest file. The xml file will have a <code>.man</code> extension.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/02/etw-part2">part 2</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-01-etw-part1/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-01-etw-part1/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 1] How I set up ETW for logging (native, .NET, Metro and UApp)</title>
                
            </item>
        
    </channel>
</rss>
