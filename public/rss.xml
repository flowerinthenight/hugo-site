













    
        
    

    

    

    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
    

    

    

    

    
        
    

    

    
        
    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    












<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/paige-search.json" rel="alternate" type="application/json"/>
            
        
            

            

            
                <link href="http://localhost:1313/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        
            <lastBuildDate>2024-05-30 00:00:00 -0700 PDT</lastBuildDate>
        

        <link>http://localhost:1313/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.</p>
<h2 id="headings">Headings</h2>
<p>The following HTML <code>&lt;h2&gt;</code>—<code>&lt;h6&gt;</code> elements represent five levels of section headings. <code>&lt;h2&gt;</code> is the highest section level while <code>&lt;h6&gt;</code> is the lowest.</p>
<h2 id="h2">H2</h2>
<h3 id="h3">H3</h3>
<h4 id="h4">H4</h4>
<h5 id="h5">H5</h5>
<h6 id="h6">H6</h6>
<h2 id="paragraph">Paragraph</h2>
<p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.</p>
<p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.</p>
<h2 id="blockquotes">Blockquotes</h2>
<p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a <code>footer</code> or <code>cite</code> element, and optionally with in-line changes such as annotations and abbreviations.</p>
<h3 id="blockquote-without-attribution">Blockquote without attribution</h3>
<blockquote>
<p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
<strong>Note</strong> that you can use <em>Markdown syntax</em> within a blockquote.</p>
</blockquote>
<h3 id="blockquote-with-attribution">Blockquote with attribution</h3>
<blockquote>
<p>Don&rsquo;t communicate by sharing memory, share memory by communicating.<br>
— <cite>Rob Pike<sup id="fnref:1"><a href="http://localhost:1313/tmp/markdown-syntax/#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></cite></p>
</blockquote>
<h2 id="tables">Tables</h2>
<p>Tables aren&rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bob</td>
<td>27</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
</tbody>
</table>
<h3 id="inline-markdown-within-tables">Inline Markdown within tables</h3>
<table>
<thead>
<tr>
<th>Italics</th>
<th>Bold</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>italics</em></td>
<td><strong>bold</strong></td>
<td><code>code</code></td>
</tr>
</tbody>
</table>
<h2 id="code-blocks">Code Blocks</h2>
<h3 id="code-block-with-backticks">Code block with backticks</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="code-block-indented-with-four-spaces">Code block indented with four spaces</h3>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;Example HTML5 Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&rsquo;s internal highlight shortcode</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre></div>
<h2 id="list-types">List Types</h2>
<h3 id="ordered-list">Ordered List</h3>
<ol>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
</ol>
<h3 id="unordered-list">Unordered List</h3>
<ul>
<li>List item</li>
<li>Another item</li>
<li>And another item</li>
</ul>
<h3 id="nested-list">Nested list</h3>
<ul>
<li>Fruit
<ul>
<li>Apple</li>
<li>Orange</li>
<li>Banana</li>
</ul>
</li>
<li>Dairy
<ul>
<li>Milk</li>
<li>Cheese</li>
</ul>
</li>
</ul>
<h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark</h2>
<p><abbr title="Graphics Interchange Format">GIF</abbr> is a bitmap image format.</p>
<p>H<sub>2</sub>O</p>
<p>X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup></p>
<p>Press <kbd><kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>Delete</kbd></kbd> to end the session.</p>
<p>Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The above quote is excerpted from Rob Pike&rsquo;s <a href="https://www.youtube.com/watch?v=PAAkCSZUG1c">talk</a> during Gopherfest, November 18, 2015.&#160;<a href="http://localhost:1313/tmp/markdown-syntax/#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2024-01-18:/tmp/markdown-syntax/</guid>

                
                    <link>http://localhost:1313/tmp/markdown-syntax/</link>
                

                
                    <pubDate>Thu, 18 Jan 2024 21:32:52 -0700</pubDate>
                

                
                    <title>Markdown Syntax Guide</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[






















    























    


<div class="paige-youtube">
    























<div class="paige-video ratio ratio-16x9" >
    






<iframe  allowfullscreen   referrerpolicy="no-referrer-when-downgrade"   src="https://www.youtube.com/embed/dQw4w9WgXcQ?hl=en&amp;modestbranding=1"   title="YouTube video" ></iframe>

</div>

</div>

]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-24:/tmp/video/</guid>

                
                    <link>http://localhost:1313/tmp/video/</link>
                

                
                    <pubDate>Sun, 24 Sep 2023 21:29:31 -0700</pubDate>
                

                
                    <title>Video</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                
                    
                    

                    
                

                

                
                

                

                

                
                    <description><![CDATA[<p>It takes you to the home page.</p>
<p><a href="http://localhost:1313/tmp/link/" title="Link">⏎</a></p>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-24:/tmp/link/</guid>

                
                    <link>https://willfaught.com/paige</link>
                

                
                    <pubDate>Sun, 24 Sep 2023 21:29:30 -0700</pubDate>
                

                
                    <title>Link</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.</p>
<p>In this example we will be using <a href="https://katex.org/">KaTeX</a></p>
<ul>
<li>Create a partial under <code>/layouts/partials/math.html</code></li>
<li>Within this partial reference the <a href="https://katex.org/docs/autorender.html">Auto-render Extension</a> or host these scripts locally.</li>
<li>Include the partial in your templates like so:</li>
</ul>
<pre tabindex="0"><code>{{ if .Params.paige.math }}
{{ partial &#34;math.html&#34; . }}
{{ end }}
</code></pre><p>To enable KaTex on a per page basis include the parameter <code>paige.math: true</code> in content files</p>
<p><strong>Note:</strong> Use the online reference of <a href="https://katex.org/docs/supported.html">Supported TeX Functions</a></p>
<h2 id="examples">Examples</h2>
<p>
Inline math: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)
</p>
<p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$</p>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-18:/tmp/math-typesetting/</guid>

                
                    <link>http://localhost:1313/tmp/math-typesetting/</link>
                

                
                    <pubDate>Mon, 18 Sep 2023 21:33:03 -0700</pubDate>
                

                
                    <title>Math Typesetting</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>Emoji can be enabled in a Hugo project in a number of ways.</p>
<p>The <a href="https://gohugo.io/functions/emojify/"><code>emojify</code></a> function can be called directly in templates or <a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes</a>.</p>
<p>To enable emoji globally, set <code>enableEmoji</code> to <code>true</code> in your site&rsquo;s <a href="https://gohugo.io/getting-started/configuration/">configuration</a> and then you can type emoji shorthand codes directly in content files; e.g.</p>
<p><span class="nowrap"><span class="emojify">🙈</span> <code>:see_no_evil:</code></span>  <span class="nowrap"><span class="emojify">🙉</span> <code>:hear_no_evil:</code></span>  <span class="nowrap"><span class="emojify">🙊</span> <code>:speak_no_evil:</code></span></p>
<br>
<p>The <a href="https://www.emoji-cheat-sheet.com/">Emoji cheat sheet</a> is a useful reference for emoji shorthand codes.</p>
<hr>
<p><strong>N.B.</strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">.emoji {
</span></span><span class="line"><span class="cl">  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-18:/tmp/emoji-support/</guid>

                
                    <link>http://localhost:1313/tmp/emoji-support/</link>
                

                
                    <pubDate>Mon, 18 Sep 2023 21:32:40 -0700</pubDate>
                

                
                    <title>Emoji Support</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                
                    

                    
                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>This page has the following parameters:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">paige</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">alert</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">message</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Get more information &lt;a href=\&#34;#\&#34; class=\&#34;alert-link\&#34;&gt;here&lt;/a&gt;.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;primary&#34;</span><span class="w">
</span></span></span></code></pre></div>]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,2023-09-18:/tmp/alert/</guid>

                
                    <link>http://localhost:1313/tmp/alert/</link>
                

                
                    <pubDate>Mon, 18 Sep 2023 21:21:05 -0700</pubDate>
                

                
                    <title>Alert</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Downloading&hellip;</p>
<p>{% include image.html url=&quot;../../../../images/win10preview1.png&quot; %}</p>
<p>And here we go&hellip;</p>
<p>{% include image.html url=&quot;../../../../images/win10preview2.png&quot; %}</p>
<p>Looking good so far.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-10-trying-bash-on-windows/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-10-trying-bash-on-windows/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Trying out Bash on Windows</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>After six or so years living in Japan, I just got mine today. Yeah, I know&hellip;</p>
<p><a href="https://gaijinpot.com/">GaijinPot</a> has an <a href="https://blog.gaijinpot.com/convenience-store-point-cards/">article</a> about point cards from three of the most common convenience stores in the country. I already have Lawsons Ponta card and Family Marts T-Point ages ago but for some reason, I actually havent heard of 7-11s <a href="https://en.wikipedia.org/wiki/Nanaco">Nanaco</a>. Or maybe I did but I probably didnt bother.</p>
<p>But now that I have a Seven Bank account, I noticed from their online bank access site an option to register to their point service. Unsurprisingly, they offer Nanaco points to almost all of my bank transactions (deposits, withdrawals, fund transfers, etc.) which I think is brilliant. But I have to have a Nanaco point card in the first place before I can register. It also said that I can get the card from any 7-11 store. I just have to fill up some application form (surely in Japanese). Or, I can also fill up the application form online, print it and submit to any 7-11 store. I went for the later.</p>
<p><a href="https://www.nanaco-net.jp/index_pc.html">Nanaco official website</a> is in Japanese. So Google Translate is your friend here. My Chrome browser is set to auto-translate so Im good to go. Go to this <a href="https://www.nanaco-net.jp/entry/index02.html">link</a>, scroll down a bit, and press the big red button. It looks like this:</p>
<p>{% include image.html url=&quot;../../../../images/nanaco1.png&quot; %}</p>
<p>It will open a new window with some more Japanese instructions. Scroll down to the very bottom and click the left button.</p>
<p>{% include image.html url=&quot;../../../../images/nanaco2.png&quot; %}</p>
<p>The next page will be the actual form. You will need to input personal information such as your name, birthday, address (both Japanese and Katakana), phone number, etc. I had a few attempts because the password field only accepts numbers (although Google Translation said &ldquo;alphanumeric&rdquo;. Oh well). Then click the Next button (the only button) at the very bottom. If you got it right, you will receive a confirmation email containing a link to the document to be printed. It will look like this:</p>
<p>{% include image.html url=&quot;../../../../images/nanaco3.png&quot; %}</p>
<p>Print it and submit to any 7-11 store. The card will cost you 300 yen. After payment, you will get your card right away.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-02-25-apply-nanaco-point-card/</guid>

                
                    <link>http://localhost:1313/blog/2016-02-25-apply-nanaco-point-card/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>How to apply for a Nanaco point card</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>I installed Samba to my Ubuntu Server (which is an old ThinkPad laptop that has been gathering dust in my closet for ages):</p>
<p>{% highlight shell %}
sudo apt-get install samba
{% endhighlight %}</p>
<p>I have three 3-TB HDDs that I planned to use as my main server storage; one main server, and the other two for backup. All of these HDDs are in ext4 format.</p>
<p>Then I created a new directory under <code>/media</code> where I will mount my main server storage:</p>
<p>{% highlight shell %}
mkdir /media/myserver
{% endhighlight %}</p>
<p>Then I edited the samba config file <code>/etc/samba/smb.conf</code>. I just scrolled to the very bottom and added these lines (after [print$] section):</p>
<p>{% highlight conf %}
[MYSERVER]
path = /media/myserver
browsable = yes
writable = yes
guest ok = yes
read only = no
{% endhighlight %}</p>
<p>Then I tested the config file for syntax errors using the command:</p>
<p>{% highlight shell %}
testparm
{% endhighlight %}</p>
<p>Before I added the mount entry for my server to <code>/etc/fstab</code>, I took note of my HDD&rsquo;s UUID from the following command:</p>
<p>{% highlight shell %}
sudo blkid
{% endhighlight %}</p>
<p>in which the output looked something like</p>
<p>{% highlight shell %}
/dev/sdb1: UUID=&ldquo;996a1b79-bf22-49fd-a3d1-33eab2708cfb&rdquo; TYPE=&ldquo;ext4&rdquo;
{% endhighlight %}</p>
<p>Then I edited <code>/etc/fstab</code> and added the line below:</p>
<p>{% highlight shell %}
UUID=996a1b79-bf22-49fd-a3d1-33eab2708cfb /media/myserver ext4 defaults 0 0
{% endhighlight %}</p>
<p>Lastly, I then rebooted my server.</p>
<h1 id="accessing-my-file-server-from-windows">Accessing my file server from Windows</h1>
<p>To access my server, I opened File Explorer and browsed to <code>\\my_server_ip\myserver</code>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-28-setup-samba-server/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-28-setup-samba-server/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>How I set up my Samba file server</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>{% highlight powershell %}
function ZipFiles($ZipFileName, $SourceDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
$compressionLevel = [System.IO.Compression.CompressionLevel]::Optimal
[System.IO.Compression.ZipFile]::CreateFromDirectory($SourceDir, $ZipFileName, $compressionLevel, $false)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
ZipFiles -ZipFileName test.zip -SourceDir .\folder\to\zip
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-05-zip-function-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-05-zip-function-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple zip function in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>{% highlight powershell %}
function UnzipFiles($ZipFileName, $DestDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($ZipFileName, $DestDir)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
UnzipFiles -ZipFileName .\folder\file.zip -DestDir .\destination
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-06-unzip-function-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-06-unzip-function-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple unzip function in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>A couple of days ago, I was working on a powershell-based script for mstest automation and I needed to call <code>vsdevcmd.bat</code> from Visual Studio&rsquo;s tools folder.</p>
<p>{% highlight powershell %}
function Invoke-Environment([Parameter(Mandatory=1)][string]$Command, [switch]$Output, [switch]$Force)
{
$stream = if ($Output) { ($temp = [IO.Path]::GetTempFileName()) } else { &rsquo;nul&rsquo; }
$operator = if ($Force) {&rsquo;&amp;&rsquo;} else {&rsquo;&amp;&amp;'}</p>
<pre><code>foreach($_ in cmd /c &quot; $Command &gt; `&quot;$stream`&quot; 2&gt;&amp;1 $operator SET&quot;)
{
    if ($_ -match '^([^=]+)=(.*)')
    {
        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
    }
}

if ($Output)
{
    Get-Content -LiteralPath $temp
    Remove-Item -LiteralPath $temp
}
</code></pre>
<p>}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
Invoke-Environment &lsquo;&ldquo;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat&rdquo;&rsquo;
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-05-06-import-environment-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-05-06-import-environment-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple Powershell function to import an environment</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Basically, 2 steps:</p>
<p>Create a C++ Windows Runtime Component (dll) that will use the ETW header file.
Reference the WinRT DLL to C# project.</p>
<h1 id="winrt-dll">WinRT DLL</h1>
<p>My logging class looks like this:</p>
<p>{% highlight cpp %}
public ref class TraceCore sealed
{
private:
TraceCore();
~TraceCore();</p>
<pre><code>static TraceCore^ m_Instance;
</code></pre>
<p>public:
static property TraceCore^ Instance
{
TraceCore^ get()
{
if (m_Instance == nullptr)
{
m_Instance = ref new TraceCore();
}</p>
<pre><code>        return m_Instance;
    }
}

void Verbose(Platform::String^ mod, Platform::String^ file, Platform::String^ func, Platform::String^ m);
</code></pre>
<p>};
{% endhighlight %}</p>
<p>And heres the implementation:</p>
<p>{% highlight cpp %}
#include &ldquo;pch.h&rdquo;
#include &ldquo;TraceCore.h&rdquo;</p>
<p>using namespace LibRTWrapperETW;
using namespace Platform;</p>
<p>#include &ldquo;jytrace.h&rdquo;</p>
<p>TraceCore^ TraceCore::m_Instance = nullptr;</p>
<p>TraceCore::TraceCore()
{
EventRegisterJyTrace();
}</p>
<p>TraceCore::~TraceCore()
{
EventUnregisterJyTrace();
}</p>
<p>void TraceCore::Verbose(String^ mod, String^ file, String^ func, String^ m)
{
EventWriteSimple(mod-&gt;Data(), file-&gt;Data(), func-&gt;Data(), L&quot;Trace&quot;, m-&gt;Data());
}
{% endhighlight %}</p>
<h1 id="wrapper-class">Wrapper Class</h1>
<p>Just like in part 5, I wrapped the C++ bits to a C# class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes:</p>
<p>{% highlight csharp %}
public static class TraceCoreWrapper
{
public static void VerboseCore(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
TraceCore.Instance.Verbose(&ldquo;CORE_RT [&rdquo; + Environment.CurrentManagedThreadId + &ldquo;]&rdquo;, Path.GetFileName(srcFile), memberName, m);
}
}
{% endhighlight %}</p>
<p>And finally, the actual logging in C#:</p>
<p>{% highlight csharp %}
TraceCoreWrapper.VerboseCore(&ldquo;Hello from UApp (CS) world!&rdquo;);
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-22-etw-part6/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-22-etw-part6/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 6] Logging with Universal Apps</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>I generated a C# logging class using this command:</p>
<p>{% highlight shell %}
mc -css &lt;Namespace_here&gt; jytrace.man
{% endhighlight %}</p>
<p>So far, most of my event templates use an ANSI string data type which (I believe) is not supported by C#. As you can see in part 1, I use ANSI data type for my File and Function fields so that I can use <code>__FILE__</code> and <code>__FUNCTION__</code> as inputs in C++. Thats why I added a new event template with all fields using UNICODE data types. Again, you can refer to the whole package here for reference.</p>
<p>To use the logging class, I added the generated file to my project. I also added a wrapper class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes in C#.</p>
<p>{% highlight csharp %}
public static bool Verbose(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
return JyTrace.ProviderJyTrace.EventWriteSimple(&ldquo;ETWTest&rdquo;, Path.GetFileName(srcFile), memberName, &ldquo;Trace:&rdquo;, m);
}
{% endhighlight %}</p>
<p>The actual log call:</p>
<p>{% highlight csharp %}
TraceCore.Verbose(&ldquo;Hello from CS!&rdquo;);
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/22/etw-part6">part 6</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-19-etw-part5/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-19-etw-part5/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 5] Logging with C# applications</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="getting-the-logs">Getting the logs</h1>
<p>Now that I have my modules spitting out logs for me, it&rsquo;s time to actually consume (or view) them. Most of the time, I use <code>MFTrace</code> and <code>logman</code> tools.</p>
<h1 id="mftrace">MFTrace</h1>
<p>Although <code>MFTrace</code> is primarily a tool for generating logs for Media Foundation apps, it is a great tool for viewing ETW logs in general as well. It is included in the MS SDK.</p>
<p>To view logs in real time, I use this command in either Powershell or command line:</p>
<p>{% highlight shell %}
mftrace -c config.xml
{% endhighlight %}</p>
<p>To stop the trace collection, press <code>CTRL+C</code>.</p>
<h1 id="logman">logman</h1>
<p><code>logman</code> is a very powerful builtin performance counter and event trace log tool from Microsoft. For more information, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490956.aspx">here</a>.</p>
<p>You can use <code>logman</code> as alternative to <code>MFTrace</code>.</p>
<h2 id="start-tracing">Start tracing</h2>
<p>{% highlight shell %}
logman start <name> -p &lt;provider_guid_or_name&gt; <kw> <level> -o &lt;output.etl&gt; -ets
{% endhighlight %}</p>
<h3 id="examples">Examples</h3>
<p>{% highlight shell %}
logman start lms -p {3A8FD7D2-CAB3-455D-A8E5-9E1741365FEB} 0x1 win:Verbose -o c:\output.etl -ets
logman start lms -p MyProviderName 0x3 win:Informational -o c:\output.etl -ets
logman start lms -p {277c604b-1962-47fa-9307-7ce0855dfea6} 0xffffffffffffffff 0xff -o c:\output.etl -ets
{% endhighlight %}</p>
<h2 id="stop-tracing">Stop tracing</h2>
<p>{% highlight shell %}
logman stop <name> -ets
{% endhighlight %}</p>
<h3 id="examples-1">Examples</h3>
<p>{% highlight shell %}
logman stop lms -ets
{% endhighlight %}</p>
<h1 id="collecting-etw-traces-from-testproduction-systems">Collecting ETW traces from test/production systems</h1>
<p>To collect ETW trace logs from test/production systems, manifest file and message/resource file need not be registered.</p>
<p>{% highlight shell %}
mftrace -c config.xml -o c:\output.etl
{% endhighlight %}</p>
<p><code>c:\output.etl</code> is just an example. You can use any location and any filename as long as the extension is .etl. The output .etl file can only be read on a system where the manifest file and the resource/message file are registered. To read the traces:</p>
<p>{% highlight shell %}
tracerpt -y output.etl
{% endhighlight %}</p>
<p>The default readable output file that contains all the trace information will be <code>dumpfile.xml</code>. A <code>summary.txt</code> file will also be generated. For more information about <code>tracerpt</code>, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490959.aspx">here</a>.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/19/etw-part5">part 5</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-07-etw-part4/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-07-etw-part4/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 4] Log collection</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>If you remember in part 2, we compiled our manifest file with</p>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>and we got a header file as one of the outputs. We just have to include that header file to our sources and we are good to go.</p>
<p>{% highlight cpp %}
#include &hellip;
#include &ldquo;&lt;manifest_file&gt;.h&rdquo;</p>
<p>int main(&hellip;)
{
EventRegister&lt;provider_name_in_manifest&gt;();
&hellip;
CreateFile(&hellip;);
// Example of using the LastError event in our manifest file
EventWriteLastError(L&quot;THIS_EXE&quot;, <strong>FILE</strong>, <strong>FUNC</strong>, L&quot;CreateFile&quot;, GetLastError());
&hellip;
EventUnregister&lt;provider_name_in_manifest&gt;();
}
{% endhighlight %}</p>
<h1 id="notes">Notes</h1>
<ul>
<li>Any module can use the ETW provider, be it dll or exe, simultaneously. But you can also create a provider for each module if you prefer.</li>
<li>For a dll, you can call the <code>EventRegister()</code> inside your <code>DllMain</code> -&gt; <code>DLL_PROCESS_ATTACH</code> and your <code>EventUnregister()</code> in <code>DLL_PROCESS_DETACH</code>.</li>
</ul>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/07/etw-part4">part 4</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-03-etw-part3/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-03-etw-part3/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 3] Logging with C/C++ applications</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="compiling-the-manifest-file">Compiling the manifest file</h1>
<p>This is how I compiled my manifest file.</p>
<ul>
<li>Open Visual Studio command prompt.</li>
<li>Compile manifest file.</li>
</ul>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>When successful, output files are:</p>
<p>{% highlight shell %}
<filename>.h
<filename>.rc
<filename>TEMP.BIN
MSG00001.bin
{% endhighlight %}</p>
<h1 id="creating-the-message-resource-dll">Creating the message resource DLL</h1>
<p>I like to create a separate dll just for the manifest file resource although you can also add the .rc file to any of your existing dll or exe.</p>
<h2 id="compile-rc-to-res">Compile .rc to .res</h2>
<p>{% highlight shell %}
rc <filename>.rc
{% endhighlight %}</p>
<h2 id="create-dll-from-res">Create .dll from .res</h2>
<p>{% highlight shell %}
link -dll -noentry -out:<out>.dll <filename>.res
{% endhighlight %}</p>
<h1 id="register-the-manifest-to-the-system-optional">Register the manifest to the system (optional)</h1>
<p>I always register the manifest file on my development systems. As for client systems, its up to you. I dont.</p>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil im &lt;manifest_file&gt;.man /rf:&ldquo;full_path_to_resource_dll&rdquo; /mf:&ldquo;full_path_to_resource_dll&rdquo;
{% endhighlight %}</p>
<h1 id="remove-the-manifest-from-the-system">Remove the manifest from the system</h1>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/03/etw-part3">part 3</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-02-etw-part2/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-02-etw-part2/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 2] Manifest file compilation and setup</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Ive been using ETW as my go-to logging mechanism for Windows development. I will be sharing how I setup my environment here.</p>
<h1 id="creating-the-manifest-file-man">Creating the manifest file (.man)</h1>
<p>I use <code>ecmangen.exe</code> to create my manifest file. This tool is included in the SDK. I have Visual Studio 2015 installed on a Win10 64-bit machine, and its location is <code>C:\Program Files (x86)\Windows Kits\10\bin\x64\</code>. It looks something like this (my completed manifest):</p>
<p>{% include image.html url=&quot;../../../../images/etw1.png&quot; %}</p>
<p>The red strip is the manifest file name, or my ETW provider name.</p>
<p>I started by right-clicking Events Section -&gt; New -&gt; Provider, then gave it a name. Then prepended the string Provider to the existing name for the Symbol, auto-generated the GUID, left the other fields as blank, then Save.</p>
<h1 id="setting-up-keywords">Setting up Keywords</h1>
<p>{% include image.html url=&quot;../../../../images/etw2.png&quot; %}</p>
<p>Keywords basically is a mask for filtering log outputs. Mine is just a simple logging mechanism so I have only two keywords. Im not even using <code>KeywordFunctionEntryExit</code> (set to 0x1) that much nowadays so <code>KeywordGeneric</code> (set to 0x2) for me is enough. With this, I have the option later to output only the logs with the keyword <code>KeywordFunctionEntryExit</code> or <code>KeywordGeneric</code>, or both.</p>
<h1 id="setting-up-templates">Setting up Templates</h1>
<p>{% include image.html url=&quot;../../../../images/etw3.png&quot; %}</p>
<p>Templates are, well, templates for the events (in this context, a log is basically an event). Templates will contain the fields (with data types) I want to include in my log. My goal was to have logs with a format of <code>[module_name: src_file_name:  function_name] key: value</code>, where <code>key</code> would be any label, say, variable name, and <code>value</code> as, well, any value, be it int or bool, or last error, etc. I thought that this format is generic enough for me to log any information from my code.</p>
<p>All events require a template (whether your template or default, which I admit I have never used). Multiple events can use a single template.</p>
<h1 id="setting-up-events">Setting up Events</h1>
<p>{% include image.html url=&quot;../../../../images/etw4.png&quot; %}</p>
<p>Lastly, the events themselves. From the image above, I defined quite a number of events. If you noticed, my <code>LastError</code> event (which I use to log the <code>GetLastError()</code> API) specified the template <code>TemplateKeyValueLastError</code> and the keyword <code>KeywordGeneric</code>.</p>
<p>When the manifest file is compiled, all the defined events by default (can be modified during compilation) will generate a logging API with the name <code>EventWrite&lt;event_name&gt;</code>, which in the case of the highlighted one, <code>EventWriteLastError()</code>.</p>
<p>Another thing to point out is the <code>Message</code>. The <code>%[number]</code> corresponds to the fields defined in the template used. First field will be %1, second field will be %2, and so on and so on.</p>
<p>Lastly, save your manifest file. The xml file will have a <code>.man</code> extension.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/02/etw-part2">part 2</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-01-etw-part1/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-01-etw-part1/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 1] How I set up ETW for logging (native, .NET, Metro and UApp)</title>
                
            </item>
        
    </channel>
</rss>
