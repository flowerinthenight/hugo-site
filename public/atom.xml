














    

    

    

    
        
    

    
        
    

    
        
    

    

    

    
        
    

    
        
    

    
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    

    
        
    












<?xml version="1.0" encoding="utf-8"?>
<feed  xml:lang="en"  xmlns="http://www.w3.org/2005/Atom">
    
        <author>
            
                <email>example@example.com</email>
            

            
                <name>John Doe</name>
            

            
                <uri>https://example.com</uri>
            
        </author>
    

    
        <icon>http://localhost:1313/</icon>
    

    <id>tag:localhost:1313,0001-01-01:/atom.xml</id>

    
        

        
            
        

        
            <link href="http://localhost:1313/atom.xml" rel="self" type="application/atom+xml"/>
        
    
        

        
            
        

        
            <link href="http://localhost:1313/" rel="alternate" type="text/html"/>
        
    
        

        

        
            <link href="http://localhost:1313/paige-search.json" rel="alternate" type="application/json"/>
        
    
        

        

        
            <link href="http://localhost:1313/rss.xml" rel="alternate" type="application/rss+xml"/>
        
    

    

    
        <logo>http://localhost:1313/</logo>
    

    
        <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
    

    

    <title type="html"><![CDATA[About]]></title>
    <updated>2024-05-30T00:00:00-07:00</updated>

    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            

            
                
                    <author>
                        

                        

                        
                    </author>
                
            

            
                <content type="html"><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.</p>
<h2 id="headings">Headings</h2>
<p>The following HTML <code>&lt;h2&gt;</code>—<code>&lt;h6&gt;</code> elements represent five levels of section headings. <code>&lt;h2&gt;</code> is the highest section level while <code>&lt;h6&gt;</code> is the lowest.</p>
<h2 id="h2">H2</h2>
<h3 id="h3">H3</h3>
<h4 id="h4">H4</h4>
<h5 id="h5">H5</h5>
<h6 id="h6">H6</h6>
<h2 id="paragraph">Paragraph</h2>
<p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.</p>
<p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.</p>
<h2 id="blockquotes">Blockquotes</h2>
<p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a <code>footer</code> or <code>cite</code> element, and optionally with in-line changes such as annotations and abbreviations.</p>
<h3 id="blockquote-without-attribution">Blockquote without attribution</h3>
<blockquote>
<p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
<strong>Note</strong> that you can use <em>Markdown syntax</em> within a blockquote.</p>
</blockquote>
<h3 id="blockquote-with-attribution">Blockquote with attribution</h3>
<blockquote>
<p>Don&rsquo;t communicate by sharing memory, share memory by communicating.<br>
— <cite>Rob Pike<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></cite></p>
</blockquote>
<h2 id="tables">Tables</h2>
<p>Tables aren&rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bob</td>
<td>27</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
</tbody>
</table>
<h3 id="inline-markdown-within-tables">Inline Markdown within tables</h3>
<table>
<thead>
<tr>
<th>Italics</th>
<th>Bold</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>italics</em></td>
<td><strong>bold</strong></td>
<td><code>code</code></td>
</tr>
</tbody>
</table>
<h2 id="code-blocks">Code Blocks</h2>
<h3 id="code-block-with-backticks">Code block with backticks</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="code-block-indented-with-four-spaces">Code block indented with four spaces</h3>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;Example HTML5 Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&rsquo;s internal highlight shortcode</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre></div>
<h2 id="list-types">List Types</h2>
<h3 id="ordered-list">Ordered List</h3>
<ol>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
</ol>
<h3 id="unordered-list">Unordered List</h3>
<ul>
<li>List item</li>
<li>Another item</li>
<li>And another item</li>
</ul>
<h3 id="nested-list">Nested list</h3>
<ul>
<li>Fruit
<ul>
<li>Apple</li>
<li>Orange</li>
<li>Banana</li>
</ul>
</li>
<li>Dairy
<ul>
<li>Milk</li>
<li>Cheese</li>
</ul>
</li>
</ul>
<h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark</h2>
<p><abbr title="Graphics Interchange Format">GIF</abbr> is a bitmap image format.</p>
<p>H<sub>2</sub>O</p>
<p>X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup></p>
<p>Press <kbd><kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>Delete</kbd></kbd> to end the session.</p>
<p>Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The above quote is excerpted from Rob Pike&rsquo;s <a href="https://www.youtube.com/watch?v=PAAkCSZUG1c">talk</a> during Gopherfest, November 18, 2015.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content>
            

            <id>tag:localhost:1313,2024-01-18:/tmp/markdown-syntax/</id>

            
                

                
                    

                    <link href="http://localhost:1313/tmp/markdown-syntax/" rel="alternate" type="text/html"/>
                
            

            

            
                <published>2024-01-18T21:32:52-07:00</published>
            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            
                <summary type="html"><![CDATA[2024-01-18: The ultimate guide to markdown syntax in paige.]]></summary>
            

            <title type="html"><![CDATA[Markdown Syntax Guide]]></title>
            <updated>2024-01-18T21:32:52-07:00</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            

            
                
                    <author>
                        

                        

                        
                    </author>
                
            

            
                <content type="html"><![CDATA[






















    























    


<div class="paige-youtube">
    























<div class="paige-video ratio ratio-16x9" >
    






<iframe  allowfullscreen   referrerpolicy="no-referrer-when-downgrade"   src="https://www.youtube.com/embed/dQw4w9WgXcQ?hl=en&amp;modestbranding=1"   title="YouTube video" ></iframe>

</div>

</div>

]]></content>
            

            <id>tag:localhost:1313,2023-09-24:/tmp/video/</id>

            
                

                
                    

                    <link href="http://localhost:1313/tmp/video/" rel="alternate" type="text/html"/>
                
            

            

            
                <published>2023-09-24T21:29:31-07:00</published>
            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            
                <summary type="html"><![CDATA[Only a video.]]></summary>
            

            <title type="html"><![CDATA[Video]]></title>
            <updated>2023-09-24T21:29:31-07:00</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            
                
                

                
            

            

            

            

            
                
                    <author>
                        

                        

                        
                    </author>
                
            

            
                <content type="html"><![CDATA[<p>It takes you to the home page.</p>
<p><a href="http://localhost:1313/tmp/link/" title="Link">⏎</a></p>]]></content>
            

            <id>tag:localhost:1313,2023-09-24:/tmp/link/</id>

            
                

                
                    

                    <link href="https://willfaught.com/paige" rel="alternate" type="text/html"/>
                
            

            

            
                <published>2023-09-24T21:29:30-07:00</published>
            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            
                <summary type="html"><![CDATA[A front matter link.]]></summary>
            

            <title type="html"><![CDATA[Link]]></title>
            <updated>2023-09-24T21:29:30-07:00</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            

            
                
                    <author>
                        

                        

                        
                    </author>
                
            

            
                <content type="html"><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.</p>
<p>In this example we will be using <a href="https://katex.org/">KaTeX</a></p>
<ul>
<li>Create a partial under <code>/layouts/partials/math.html</code></li>
<li>Within this partial reference the <a href="https://katex.org/docs/autorender.html">Auto-render Extension</a> or host these scripts locally.</li>
<li>Include the partial in your templates like so:</li>
</ul>
<pre tabindex="0"><code>{{ if .Params.paige.math }}
{{ partial &#34;math.html&#34; . }}
{{ end }}
</code></pre><p>To enable KaTex on a per page basis include the parameter <code>paige.math: true</code> in content files</p>
<p><strong>Note:</strong> Use the online reference of <a href="https://katex.org/docs/supported.html">Supported TeX Functions</a></p>
<h2 id="examples">Examples</h2>
<p>
Inline math: \(\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…\)
</p>
<p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$</p>]]></content>
            

            <id>tag:localhost:1313,2023-09-18:/tmp/math-typesetting/</id>

            
                

                
                    

                    <link href="http://localhost:1313/tmp/math-typesetting/" rel="alternate" type="text/html"/>
                
            

            

            
                <published>2023-09-18T21:33:03-07:00</published>
            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            
                <summary type="html"><![CDATA[A brief guide to setup KaTeX.]]></summary>
            

            <title type="html"><![CDATA[Math Typesetting]]></title>
            <updated>2023-09-18T21:33:03-07:00</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            

            
                
                    <author>
                        

                        

                        
                    </author>
                
            

            
                <content type="html"><![CDATA[<!--
The MIT License (MIT)

Copyright (c) 2014 Steve Francia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<p>Emoji can be enabled in a Hugo project in a number of ways.</p>
<p>The <a href="https://gohugo.io/functions/emojify/"><code>emojify</code></a> function can be called directly in templates or <a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes</a>.</p>
<p>To enable emoji globally, set <code>enableEmoji</code> to <code>true</code> in your site&rsquo;s <a href="https://gohugo.io/getting-started/configuration/">configuration</a> and then you can type emoji shorthand codes directly in content files; e.g.</p>
<p><span class="nowrap"><span class="emojify">🙈</span> <code>:see_no_evil:</code></span>  <span class="nowrap"><span class="emojify">🙉</span> <code>:hear_no_evil:</code></span>  <span class="nowrap"><span class="emojify">🙊</span> <code>:speak_no_evil:</code></span></p>
<br>
<p>The <a href="https://www.emoji-cheat-sheet.com/">Emoji cheat sheet</a> is a useful reference for emoji shorthand codes.</p>
<hr>
<p><strong>N.B.</strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">.emoji {
</span></span><span class="line"><span class="cl">  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
</span></span><span class="line"><span class="cl">}</span></span></code></pre></div>]]></content>
            

            <id>tag:localhost:1313,2023-09-18:/tmp/emoji-support/</id>

            
                

                
                    

                    <link href="http://localhost:1313/tmp/emoji-support/" rel="alternate" type="text/html"/>
                
            

            

            
                <published>2023-09-18T21:32:40-07:00</published>
            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            
                <summary type="html"><![CDATA[Guide to emoji usage in Hugo.]]></summary>
            

            <title type="html"><![CDATA[Emoji Support]]></title>
            <updated>2023-09-18T21:32:40-07:00</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            

            
                
                    <author>
                        

                        

                        
                    </author>
                
            

            
                <content type="html"><![CDATA[<p>This page has the following parameters:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">paige</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">alert</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">message</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Get more information &lt;a href=\&#34;#\&#34; class=\&#34;alert-link\&#34;&gt;here&lt;/a&gt;.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;primary&#34;</span><span class="w">
</span></span></span></code></pre></div>]]></content>
            

            <id>tag:localhost:1313,2023-09-18:/tmp/alert/</id>

            
                

                
                    

                    <link href="http://localhost:1313/tmp/alert/" rel="alternate" type="text/html"/>
                
            

            

            
                <published>2023-09-18T21:21:05-07:00</published>
            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            
                <summary type="html"><![CDATA[An alert.]]></summary>
            

            <title type="html"><![CDATA[Alert]]></title>
            <updated>2023-09-18T21:21:05-07:00</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a <a href="https://github.com/flowerinthenight/rmq">simple wrapper</a> to <a href="https://github.com/streadway/amqp">streadway/amqp</a> library for RabbitMQ with support for auto reconnections. This is a simplified version of what I&rsquo;m using in production.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-06-30-amqp-wrapper/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-06-30-amqp-wrapper/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Wrapper for amqp library for RabbitMQ]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>If you&rsquo;ve been following the blog, you know that I&rsquo;m a fan of <a href="https://github.com/spf13/cobra">cobra</a> as a CLI library. Let me share how I use <a href="https://golang.org/pkg/text/tabwriter/">tabwriter</a> to compliment cobra&rsquo;s autogenerated help information. For reference, you can check this <a href="https://flowerinthenight.com/blog/2017/12/01/golang-cobra-glog">post</a> as well.</p>
<p>The following code is a copy (not an exact copy) of one of the tools that I use at work.</p>
<p>{% gist d00e0d81ba85b3940312f0a3c33bcaef %}</p>
<p>It will look something like this.</p>
<p>{% highlight plaintext %}
Trigger a manual run, among other tools.</p>
<p>Format for the &ndash;input flag:
payer:<id>[/link1,link2,&hellip;]     run manual calculation at payer level, optional link acct list is for log filtering
msp:<id>                         run manual calculation at MSP level
link:<id>                        run manual calculation at link acct level
detectri:&lt;msp|payer&gt;[:id]        run RI detection manually
detectsp:&lt;msp|payer&gt;[:id]        run SavingsPlan detection manually
curlinks:&lt;msp|payer&gt;[:id]        detect actual customers from CUR, can use &ndash;detect-moved-payer flag
fees:<id>                        detect fees for the input link id
detecttags:<id>                  detect tags for the input payer id</p>
<p>Notes:</p>
<ul>
<li>When triggering CUR (using trigger: input), it&rsquo;s recommended to use the &ndash;use-sns flag.</li>
</ul>
<p>Usage:
linkbatchd manualrun [flags]</p>
<p>Flags:
&ndash;input string              see subcommand description for more details
&ndash;date string               date to trigger in UTC, fmt: yyyy-mm-dd, yyyy-mm-dd,yyyy-mm-dd for date range (from,to)
&ndash;invoice-type string       type of invoice to calculate: &lsquo;account&rsquo; or &lsquo;cross_tag&rsquo;, used in trigger: input
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-02-27-cobra-tabwriter/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-02-27-cobra-tabwriter/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using tabwriter to improve on cobra&rsquo;s help information]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="https://github.com/wercker/stern"><code>stern</code></a> as my goto log viewer for Kubernetes. It supports multiple pods and other convenient functions on top of <code>kubectl logs</code>. And of course, grepping goes hand in hand with log viewing, doesn&rsquo;t it? To combine grep with stern, I use the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="for-osx">For OSX:</h1>
<h1 id="stern-some-prod-prefix--grep--i---line-buffered--e-extended-regex">stern <some-prod-prefix> | grep -i &ndash;line-buffered -E &lsquo;<extended-regex>&rsquo;</h1>
<p>$ stern user | grep -i &ndash;line-buffered -E &lsquo;failed&rsquo;</p>
<h1 id="for-linux-ubuntu-specifically">For Linux (Ubuntu specifically):</h1>
<h1 id="stern-some-prod-prefix--grep--i--e-extended-regex">stern <some-prod-prefix> | grep -i -E &lsquo;<extended-regex>&rsquo;</h1>
<p>$ stern user -s 1h | grep -i -E &rsquo;error'
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-09-30-stern-grep/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-09-30-stern-grep/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using stern together with grep]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<p><strong>My current setup:</strong></p>
<ul>
<li>Router has a static IP provided by my ISP</li>
<li>Router web server is accessible from 192.168.1.1 (home network)</li>
<li>SSH server box in my home network with a static IP of 192.168.1.130 (home network)</li>
<li>Router port forwarding is setup to forward router SSH port to my SSH server box (192.168.1.130:22)</li>
<li>SSH server box is configured to only accept public/private key authentication; password disabled</li>
</ul>
<p><strong>Reason for access:</strong></p>
<p>I want to be able to access my router web server from outside to configure some settings on the fly, like VPN settings, etc.</p>
<p><strong>How:</strong></p>
<ul>
<li>Run the following command:</li>
</ul>
<p>{% highlight shell %}</p>
<h1 id="-l-form--l-local-porttargettarget-port">-L form: -L local-port:target:target-port</h1>
<h1 id="user--ssh-username">&lsquo;user&rsquo; = SSH username</h1>
<p>$ ssh -i /path/to/ssh/key -L 8080:192.168.1.1:80 user@router-static-ip
{% endhighlight %}</p>
<ul>
<li>Open localhost:8080 to access the router web server.</li>
<li>That&rsquo;s it!</li>
</ul>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-08-14-ssh-tunnel-home-router/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-08-14-ssh-tunnel-home-router/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using SSH tunnelling to access home router]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is to show a simple way of using Docker&rsquo;s <a href="https://github.com/docker/docker-credential-helpers">credential helper package</a> to utilize the system&rsquo;s native credential store as storage for your Golang-based CLI applications&rsquo; login credentials. This means Keychain for OSX, <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa374792(v=vs.85).aspx"><code>wincred</code></a> for Windows, and <a href="https://www.passwordstore.org/"><code>pass</code></a> for Linux. We use <a href="https://www.passwordstore.org/"><code>pass</code></a> here since <a href="https://specifications.freedesktop.org/secret-service/"><code>secretservice</code></a>, although supported, doesn&rsquo;t work out of the box in headless servers.</p>
<p>Here&rsquo;s a simple implementation of our <code>Set</code>, <code>Get</code>, and <code>Del</code> functions.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore.go?footer=minimal"></script>
<p>Then we create our <code>_darwin.go</code>, <code>_linux.go</code>, and <code>_windows.go</code> files for OS specific implementations.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_darwin.go?footer=minimal"></script>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_windows.go?footer=minimal"></script>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_linux.go?footer=minimal"></script>
<p>Here&rsquo;s a quickstart guide to setup <a href="https://www.passwordstore.org/"><code>pass</code></a> in Ubuntu systems.</p>
<p>{% highlight shell %}</p>
<h1 id="install-pass">install pass</h1>
<p>$ sudo apt-get install pass</p>
<h1 id="generate-your-own-key-using-gpg2-do-not-use-a-passphrase">generate your own key using gpg2, do not use a passphrase</h1>
<p>$ gpg2 &ndash;gen-key</p>
<h1 id="if-the-cmd-seems-stuck-due-to-lack-of-entropy-you-can-open-another-window-and-run-the-ff-cmd">if the cmd seems stuck due to lack of entropy, you can open another window and run the ff cmd:</h1>
<h1 id="dd-ifdevsda-ofdevzero">dd if=/dev/sda of=/dev/zero</h1>
<h1 id="list-your-keys">list your keys</h1>
<h2 id="homeusergnupgpubringkbx">$ gpg2 &ndash;list-keys
/home/user/.gnupg/pubring.kbx</h2>
<p>pub   rsa2048/5486B0F6 2017-09-22 [SC]
uid         [ultimate] IamGroot <a href="mailto:iamgroot@domain.com">iamgroot@domain.com</a>
sub   rsa2048/CDC4C430 2017-09-22 [E]</p>
<h1 id="initialize-pass-use-the-pub-key-id">initialize pass (use the pub key id)</h1>
<p>$ pass init 5486B0F6
{% endhighlight %}</p>
<p>Here&rsquo;s an example on how to use our nativestore functions.</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/mobingilabs/mobingi-sdk-go/blob/master/pkg/nativestore/nativestore_test.go?footer=minimal"></script>
<p>Finally, you can refer to the whole package <a href="https://github.com/mobingilabs/mobingi-sdk-go/tree/master/pkg/nativestore">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-10-30-nativestore/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-10-30-nativestore/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using OS specific stores for storing CLI credentials for golang apps]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is somewhat related to a <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">previous post</a> about accessing k8s services using nginx reverse proxy. Let&rsquo;s try to add a simple basic authentication to these services at the proxy level. Now, this may come in handy in non-production environments but at the very least, make sure that you are doing this over HTTPS as basic authentication credentials are not encrypted.</p>
<p>We will be using the <code>htpasswd</code> tool to generate our passwords. In Ubuntu, you can install this using the following command:</p>
<p>{% highlight shell %}
$ sudo apt-get install apache2-utils
{% endhighlight %}</p>
<p>Let&rsquo;s generate our password file:</p>
<p>{% highlight shell %}
$ htpasswd -c passfile user1
New password:
Re-type new password:
Adding password for user user1
$ cat passfile
user1:$apr1$c/7lb2VS$SQ9pPJ8XfNpPH.jmnHRsE0
{% endhighlight %}</p>
<p>Let&rsquo;s add a config map to our previous YAML file and enable basic authentication to <code>svc1</code> only:</p>
<p>{% highlight ruby %}
apiVersion: v1
kind: ConfigMap
metadata:
name: basicauth
data:
htpasswd: |
# generate: $ htpasswd -c {file} username (then input password)
user1:$apr1$c/7lb2VS$SQ9pPJ8XfNpPH.jmnHRsE0</p>
<hr>
<p>apiVersion: v1
kind: ConfigMap
metadata:
name: serviceproxy-conf
data:
serviceproxy.conf: |
server {
listen 80;
server_name development.mobingi.com;
resolver kube-dns.kube-system.svc.cluster.local valid=10s;</p>
<pre><code>  location ~ ^/svc1/(.*)$ {
    auth_basic &quot;mobingi&quot;;
    auth_basic_user_file /etc/serviceproxy/htpasswd;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $host;
    rewrite ^/svc1/(.*)$ /$1 break;
    proxy_pass &quot;http://svc1.default.svc.cluster.local&quot;;
    proxy_http_version 1.1;
  }

  location ~ ^/svc2/(.*)$ {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $host;
    rewrite ^/svc2/(.*)$ /$1 break;
    proxy_pass &quot;http://svc2.default.svc.cluster.local&quot;;
    proxy_http_version 1.1;
  }

  # root health check requirement in GKE ingress
  location / {
    return 200 'healthy\n';
  }
}
</code></pre>
<hr>
<p>apiVersion: apps/v1
kind: Deployment
metadata:
name: serviceproxy
spec:
replicas: 1
revisionHistoryLimit: 3
selector:
matchLabels:
app: serviceproxy
template:
metadata:
labels:
app: serviceproxy
spec:
containers:
- name: nginx
image: nginx:1.13
ports:
- containerPort: 80
volumeMounts:
- name: config-volume
mountPath: /etc/nginx/conf.d/
- name: htpasswd
mountPath: /etc/serviceproxy/
volumes:
- name: config-volume
configMap:
name: serviceproxy-conf
items:
- key: serviceproxy.conf
path: serviceproxy.conf
- name: htpasswd
configMap:
name: basicauth
items:
- key: htpasswd
path: htpasswd</p>
<hr>
<p>apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
name: serviceproxy-hpa
&hellip;
{% endhighlight %}</p>
<p>You should now be able to access <code>svc1</code> using your username:password.</p>
<p>{% highlight shell %}
$ curl -u user1:password <a href="https://development.mobingi.com/svc1/some-endpoint">https://development.mobingi.com/svc1/some-endpoint</a>
{% endhighlight %}</p>
<p>That&rsquo;s it!</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-01-31-nginx-basicauth-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-01-31-nginx-basicauth-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using nginx basic authentication in Kubernetes]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a simple library that abstracts the use of distributed locking to elect a master among group of workers at a specified time interval. It&rsquo;s called <a href="https://github.com/flowerinthenight/kettle"><code>kettle</code></a>. You can find the source code <a href="https://github.com/flowerinthenight/kettle">here</a>.</p>
<p>We&rsquo;ve been using this library mostly on these two recurring use case patterns:</p>
<ul>
<li>Consuming a <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html">dynamodbstreams</a> endpoint across multiple containers running in Kubernetes. In this case, the master tracks the dynamic addition/removal of shards of a specific endpoint and distributes those shards to the other worker containers.</li>
<li>Distributing processing to multiple containers from a list of work items. In this case, we have a table of items where each item needs some processing applied to it. We scale out the number of containers to something directly proportional to the number of items on the list. Instead of all containers querying the same table simultaneously, the master will do the querying, publish each item to a pubsub topic, and workers will do the processing from the pubsub items.</li>
</ul>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-06-05-master-election-using-kettle/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-06-05-master-election-using-kettle/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using kettle library for master election using distributed locking]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is somehow related to a <a href="https://flowerinthenight.com/blog/2017/12/01/golang-cobra-glog">previous article</a> about using <a href="https://github.com/golang/glog">glog</a> together with <a href="https://github.com/spf13/cobra">cobra</a>. This time, we will be using <a href="https://github.com/kubernetes/klog">klog</a> which is a Kubernetes fork of <a href="https://github.com/golang/glog">glog</a>.</p>
<p>{% gist c1d3267a6e5cc26b9025b4eed74ce00a %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-the--h-command">run the -h command</h1>
<p>$ ./cobraklog -h
Usage of ./cobraklog:
-alsologtostderr
log to standard error as well as files
-log_backtrace_at value
when logging hits line file:N, emit a stack trace
-log_dir string
If non-empty, write log files in this directory
-log_file string
If non-empty, use this log file
-logtostderr
log to standard error instead of files
-skip_headers
If true, avoid header prefixes in the log messages
-stderrthreshold value
logs at or above this threshold go to stderr (default 2)
-v value
log level for V logs
-vmodule value
comma-separated list of pattern=N settings for file-filtered logging
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-cobras-help-command">run cobra&rsquo;s <code>help</code> command</h1>
<p>$ ./cobraklog help
Use klog together with cobra.</p>
<p>Usage:
cobraklog [command]</p>
<p>Available Commands:
help        Help about any command
run         run command</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;log_file string                  If non-empty, use this log file
&ndash;logtostderr                      log to standard error instead of files
&ndash;skip_headers                     If true, avoid header prefixes in the log messages
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for cobraklog</p>
<p>Use &ldquo;cobraklog [command] &ndash;help&rdquo; for more information about a command.
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-help-on-our-subcommand-run">run <code>help</code> on our subcommand <code>run</code></h1>
<p>$ ./cobraklog help run
Run command.</p>
<p>Usage:
cobraklog run [flags]</p>
<p>Flags:
&ndash;str string   string to print (default &ldquo;hello world&rdquo;)
-h, &ndash;help         help for run</p>
<p>Global Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;log_file string                  If non-empty, use this log file
&ndash;logtostderr                      log to standard error instead of files
&ndash;skip_headers                     If true, avoid header prefixes in the log messages
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
{% endhighlight %}</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-run-subcommand">run the <code>run</code> subcommand</h1>
<p>$ ./cobraklog run &ndash;logtostderr
I0205 16:37:39.110849   13672 main.go:41] echo=hello world</p>
<p>$ ./cobraklog run &ndash;logtostderr &ndash;str &ldquo;hello alien world&rdquo;
I0205 16:39:37.212187   13685 main.go:41] echo=hello alien world
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-02-05-golang-cobra-klog/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-02-05-golang-cobra-klog/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using k8s.io/klog together with cobra in golang]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<h4 id="a-create-your-own-homebrew-tap">a) Create your own homebrew tap</h4>
<p>Create a new GitHub public repository with a prefix <code>homebrew-</code>, i.e. <code>homebrew-tap</code>. This will house all the apps that you want to distribute via your tap. Users will install your apps using the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="no-need-to-include-the-homebrew--prefix">No need to include the &lsquo;homebrew-&rsquo; prefix</h1>
<p>$ brew tap flowerinthenight/tap
$ brew install <toolname>
{% endhighlight %}</p>
<p>The <code>toolname</code> part will correspond to the filename inside your repository tap. If your repository has an entry with a filename of <code>toolx.rb</code>, it can be installed using the following commands:</p>
<p>{% highlight shell %}
$ brew tap flowerinthenight/tap
$ brew install toolx
{% endhighlight %}</p>
<p>Here&rsquo;s an example of a formula for a golang app:</p>
<p>{% highlight ruby %}
class Kubepfm &lt; Formula
desc &ldquo;A simple wrapper to kubectl port-forward for multiple pods.&rdquo;
homepage &ldquo;<a href="https://github.com/flowerinthenight/kubepfm"">https://github.com/flowerinthenight/kubepfm"</a>
url &ldquo;<a href="https://github.com/flowerinthenight/kubepfm/archive/v0.0.3.tar.gz"">https://github.com/flowerinthenight/kubepfm/archive/v0.0.3.tar.gz"</a>
sha256 &ldquo;7852a5500f3e35a47b57d138c756de5641bc3c48bf7e329d2724c1107ccb1207&rdquo;</p>
<p>depends_on &ldquo;go&rdquo;</p>
<p>def install
ENV[&ldquo;GOPATH&rdquo;] = buildpath
ENV[&ldquo;GO111MODULE&rdquo;] = &ldquo;on&rdquo;
ENV[&ldquo;GOFLAGS&rdquo;] = &ldquo;-mod=vendor&rdquo;
ENV[&ldquo;PATH&rdquo;] = &ldquo;#{ENV[&ldquo;PATH&rdquo;]}:#{buildpath}/bin&rdquo;
(buildpath/&ldquo;src/github.com/flowerinthenight/kubepfm&rdquo;).install buildpath.children
cd &ldquo;src/github.com/flowerinthenight/kubepfm&rdquo; do
system &ldquo;go&rdquo;, &ldquo;build&rdquo;, &ldquo;-o&rdquo;, bin/&ldquo;kubepfm&rdquo;, &ldquo;.&rdquo;
end
end</p>
<p>test do
assert_match /Simple port-forward wrapper tool for multiple pods/, shell_output(&rdquo;#{bin}/kubepfm -h&rdquo;, 0)
end
end
{% endhighlight %}</p>
<p>You can check out <a href="https://github.com/flowerinthenight/homebrew-tap">https://github.com/flowerinthenight/homebrew-tap</a> for reference.</p>
<p>The <code>url</code> part is the path of the source <code>tar.gz</code> of your source files. You can create this by using <a href="https://help.github.com/en/enterprise/2.16/user/articles/about-releases">tagged releases</a> in GitHub.</p>
<p>You can generate the <code>sha256</code> part by running the <code>shasum</code> (OSX) or <code>sha256sum</code> (Linux) tool against your <code>tar.gz</code> file.</p>
<h4 id="b-updating-your-formula">b) Updating your formula</h4>
<p>If you have a new version of your tool, first, create a new tag or release. Download the new <code>tar.gz</code> file of the new release, run the <code>sha256sum/shasum</code> tool against it, and update the <code>.rb</code> file in your tap repository.</p>
<p>Example:</p>
<p>{% highlight shell %}
$ git clone <a href="https://github.com/flowerinthenight/kubepfm">https://github.com/flowerinthenight/kubepfm</a>
$ cd kubepfm/
$ git tag v1.0.1 # our new tag
$ git push &ndash;tags # push tags to remote
$ wget <a href="https://github.com/flowerinthenight/kubepfm/archive/v1.0.1.tar.gz">https://github.com/flowerinthenight/kubepfm/archive/v1.0.1.tar.gz</a></p>
<h1 id="osx">OSX</h1>
<p>$ shasum -a 256 v1.0.1.tar.gz
7852a5500f3e35a47b57d138c756de5641bc3c48bf7e329d2724c1107ccb1207  v1.0.1.tar.gz</p>
<h1 id="linux">Linux</h1>
<p>$ sha256sum v1.0.1.tar.gz
7852a5500f3e35a47b57d138c756de5641bc3c48bf7e329d2724c1107ccb1207  v1.0.1.tar.gz
{% endhighlight %}</p>
<p>Finally, update the <code>url</code> and <code>sha256</code> part of your <code>.rb</code> file. Users will now be able to update their copies:</p>
<p>{% highlight shell %}
$ brew upgrade kubepfm
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-07-30-homebrew-golang/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-07-30-homebrew-golang/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using Homebrew for distributing Go (golang) apps]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>If you have been programming with golang, you&rsquo;ve probably heard of <a href="https://github.com/spf13/cobra">cobra</a>. I use it extensively at work and also in my personal projects.</p>
<p>Recently though, I&rsquo;ve been using <a href="https://github.com/golang/glog">glog</a> more and more. And I quite like it. The thing is, it has a couple of flag definitions in its <code>init()</code> function using golang&rsquo;s builtin <code>flag</code> library. And I wanted to include those flags into cobra&rsquo;s flag definitions. This is how I did it.</p>
<p>{% gist 221e26cea495e5adc3ae6a323b4fbdba %}</p>
<p>Generated help information will now look something like this.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-help-command">run the help command</h1>
<p>$ ./cobraglog -h
Use glog with cobra.</p>
<p>Usage:
[flags]</p>
<p>Flags:
&ndash;alsologtostderr                  log to standard error as well as files
&ndash;echo string                      echo string (default &ldquo;hello&rdquo;)
&ndash;log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
&ndash;log_dir string                   If non-empty, write log files in this directory
&ndash;logtostderr                      log to standard error instead of files
&ndash;stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
-v, &ndash;v Level                          log level for V logs
&ndash;vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
-h, &ndash;help                             help for this command
{% endhighlight %}</p>
<p>Note that our cobra-defined flag <code>--echo</code> is also there. The rest are defined by glog internally. Finally, run the application.</p>
<p>{% highlight shell %}</p>
<h1 id="run-the-binary-providing-the-logtostderr-flag-defined-by-glog">run the binary, providing the logtostderr flag defined by glog</h1>
<p>$ ./cobraglog &ndash;logtostderr
I1129 13:49:34.166660    2138 main.go:28] echo (info): hello
W1129 13:49:34.166718    2138 main.go:29] echo (warn): hello
E1129 13:49:34.166722    2138 main.go:30] echo (error): hello
{% endhighlight %}</p>
<p>Here&rsquo;s another example using subcommands.</p>
<p>{% gist 447f983882720d817f3b92088f98aaa3 %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-12-01-golang-cobra-glog/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-12-01-golang-cobra-glog/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using glog together with cobra in golang]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>In Docker&rsquo;s <a href="https://docs.docker.com/engine/admin/logging/etwlogs/">ETW logging driver doc</a>, it uses the tool <code>logman</code> to view the logs. In this article, I will show you how to use <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff685116(v=vs.85).aspx">mftrace</a> to view Docker ETW logs in real-time.</p>
<p>First, here&rsquo;s a simple application written in Go that logs to STDERR every second.</p>
<p>{% gist 5ebeaaa38a59f7ce314a0b96b4357d4a %}</p>
<p>Next, let&rsquo;s create a Docker image (Windows) using the Dockerfile below.</p>
<p>{% gist 9935cfaf68d8de5b5da2d5c4b15b8d85 %}</p>
<p>{% highlight shell %}</p>
<h1 id="assuming-the-code-above-is-saved-in-a-directory-called-demoapp">assuming the code above is saved in a directory called &lsquo;demoapp&rsquo;</h1>
<p>$ docker build -t demoapp .
{% endhighlight %}</p>
<p>To use mftrace, we need a config file.</p>
<p>{% gist 4bd8968cc08c14cc98e03494624030a5 %}</p>
<p>Open a command prompt (or Powershell) and run the following command.</p>
<p>{% highlight shell %}
$ mftrace.exe -c config.xml
{% endhighlight %}</p>
<p>Then open another command prompt (or Powershell) window and run the Docker image.</p>
<p>{% highlight shell %}
$ docker run -d &ndash;log-driver=etwlogs &ndash;name demoapp demoapp:latest
{% endhighlight %}</p>
<p>You should be able to view the application logs in the mftrace window.</p>
<p>You can use this <a href="https://github.com/flowerinthenight/20170914-tokyo-mastercloud-presentation">repo</a> instead of creating your own folder structure. Instructions are provided in the README as well as an x86 version of mftrace.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-09-20-docker-etwlogs/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-09-20-docker-etwlogs/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using Docker&rsquo;s ETW log driver in Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>In this way, we can implement a FIFO queue without using explicit locking/synchronization for enqueueing/dequeueing.</p>
<p>For self reference:</p>
<p>{% gist 48d81f079d64dabbad7fa80928159461 %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-04-20-apc-as-fifo-queue/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-04-20-apc-as-fifo-queue/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Using APC as FIFO queue in Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Updated 2019/03/13:</p>
<p>A pretty good writeup that explains the internals of writing a camera filter driver in Windows can be found <a href="https://virusbulletin.com/virusbulletin/2018/09/through-looking-glass-webcam-interception-and-protection-kernel-mode/">here</a>. I&rsquo;m putting this information out as this repo is one of the references used in the writeup.</p>
<p>Original post:</p>
<p>This post is a bit of a departure from my usual golang/cloud-related ramblings. I posted an open-source <a href="https://github.com/flowerinthenight/windows-camera-class-filter-driver">camera class filter driver</a> for Windows ages ago hoping that it would help someone working on a similar project. If you are familiar with this type of driver, you probably know that it&rsquo;s not that straightforward to write mainly due to it being generally undocumented. A lot of reverse engineering has been done to write this driver. Anyway, recently, someone pointed out to me that it&rsquo;s been discussed in <a href="https://www.osronline.com/showthread.cfm?link=288736">this forum post</a>. So if you&rsquo;re working on a similar project, give it a whirl, and if you find some issues, I would appreciate it if you could submit a PR for fixes. Thanks.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-03-13-ccfltr-updates/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-03-13-ccfltr-updates/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Updates to Camera Class Filter Driver for Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I am a fan of the <a href="https://www.gnome-look.org/p/1112273/">Minimalis</a> <a href="https://github.com/brndnmtthws/conky">conky</a> config for quite some time now. I&rsquo;ve tweaked it a little bit due to the original config not displaying some of the information. Mind you, my system is Linux-based (Pop!_OS) using wired connection only, no WIFI, so I&rsquo;ve removed the WIFI section and replaced it with the wired one. Here&rsquo;s a screenshot of it from my desktop.</p>
<p><img alt="conky" src="https://bn1302files.storage.live.com/y4m2kfcOnlwKVRH5Gp1n5-ws20iU6M-O0BFHpBQ07D901QSt5XWZg5QTFFm6VBEyW7zYdeQnlYISyjFNQVRXPWP21yQKi8xQW8wBQE3Wbh0IXoQ_1AgJ4fVH0_rpxU09pCWdhqvfYjoxkmfe0iRVAOb88NWGZio78XO9Xt235l0D2sL6Nh8h-ebBb0OTbOB3yrc?width=826&height=1087&cropmode=none"></p>
<p>The full configuration can be found <a href="https://github.com/flowerinthenight/.files/blob/master/conky.conf">here</a>, in case you&rsquo;re interested. Changes as far as I can remember are the addition of additional CPU cores, both CPU and GPU temperatures, processes, and network.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-03-27-minimalist-conky/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-03-27-minimalist-conky/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Updated config for Minimalis conky]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Updated 2020/01/27:</p>
<ul>
<li>Support for forwarding to deployments and services</li>
</ul>
<p>Original post:</p>
<p>I recently uploaded a tool to GitHub that wraps <code>kubectl port-forward</code> command and supports port-forwarding to multiple pods. It&rsquo;s called <a href="https://github.com/flowerinthenight/kubepfm"><code>kubepfm</code></a>. I use this tool heavily in my development work. You can check out the code <a href="https://github.com/flowerinthenight/kubepfm">here</a>. You might find this useful.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-01-27-kubepfm-update/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-01-27-kubepfm-update/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Update to kubepfm, a kubectl port-forward wrapper for multiple pods]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Updated 2019/02/20:</p>
<ul>
<li>Support for namespaces <a href="https://github.com/flowerinthenight/kubepfm/issues/1">https://github.com/flowerinthenight/kubepfm/issues/1</a></li>
<li>Improved handling of input patterns</li>
</ul>
<p>Original post:</p>
<p>I recently uploaded a tool to GitHub that wraps <code>kubectl port-forward</code> command and supports port-forwarding to multiple pods. It&rsquo;s called <a href="https://github.com/flowerinthenight/kubepfm"><code>kubepfm</code></a>. I use this tool heavily in my development work. You can check out the code <a href="https://github.com/flowerinthenight/kubepfm">here</a>. You might find this useful.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-02-20-kubepfm-update/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-02-20-kubepfm-update/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Update to kubepfm, a kubectl port-forward wrapper for multiple pods]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Reference:</p>
<p>Ever since I&rsquo;ve started using Spacemacs on Linux, I&rsquo;ve been using this simple script as a command alias to update Spacemacs using the command line.</p>
<p>{% highlight shell %}
alias upe=&lsquo;git -C ~/.emacs.d/ pull &amp;&amp; <br>
emacs &ndash;batch -l ~/.emacs.d/init.el <br>
&ndash;eval=&quot;(configuration-layer/update-packages t)&quot; 2&gt;&amp;1 | <br>
tee /tmp/emacs-update &amp;&amp; <br>
grep -i -E &ldquo;Found.*to.<em>update.</em>&rdquo; /tmp/emacs-update &amp;&amp; <br>
emacs&rsquo;
{% endhighlight %}</p>
<p>I use the develop branch of Spacemacs, thus the update using git. Then it will check if there are package updates and if so, it will relaunch Spacemacs to actually install the updates.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-02-21-update-spacemacs-cmdline/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-02-21-update-spacemacs-cmdline/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Update Spacemacs from command line]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded an ancient prototype driver code I used ages ago in testing the <a href="http://www.ti.com/lit/ds/symlink/drv2605.pdf">DRV2605</a> haptic device from Texas Instruments. I can&rsquo;t figure out (and I also don&rsquo;t have time either) how to make this thing build using the recent versions of Visual Studio. Nonetheless, I&rsquo;m putting this out there as reference to somebody doing something similar to this project. Source code is <a href="https://github.com/flowerinthenight/tidrv2605-haptic-driver-umdf">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-04-28-drv2605-umdf-haptic-driver/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-04-28-drv2605-umdf-haptic-driver/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[UMDF driver code for DRV2605 haptic device]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I just upgraded my home server from Ubuntu 16.04 LTS to 18.04 LTS without any problems so far. For context, this server runs a Samba file server using ZFS. Although after update, I had to run the following command to my pool:</p>
<p>{% highlight shell %}</p>
<h1 id="pool-name-is-m0">pool name is &lsquo;m0&rsquo;</h1>
<p>$ sudo zpool upgrade m0
{% endhighlight %}</p>
<p>By the way, at the time of this writing, Ubuntu Server update is not yet available (I think you have to wait for 18.04.1). I used the following command to update mine:</p>
<p>{% highlight shell %}
$ do-release-upgrade -m server -d
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-05-06-xenial-to-bionic-lts-server-upgrade-zfs/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-05-06-xenial-to-bionic-lts-server-upgrade-zfs/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Ubuntu 16.04 LTS to Ubuntu 18.04 LTS]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Downloading&hellip;</p>
<p>{% include image.html url=&quot;../../../../images/win10preview1.png&quot; %}</p>
<p>And here we go&hellip;</p>
<p>{% include image.html url=&quot;../../../../images/win10preview2.png&quot; %}</p>
<p>Looking good so far.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-04-10-trying-bash-on-windows/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-04-10-trying-bash-on-windows/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Trying out Bash on Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<p>{% gist 29d147a50242198f082fd33f7d24677c %}</p>
<p>To view syslog in realtime</p>
<p>{% highlight shell %}
tail -f /var/log/syslog
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-22-syslog-target-go/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-22-syslog-target-go/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Syslog as target in Go logs]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I use this handy little script to switch between different Go (golang) versions:</p>
<p>{% highlight shell %}
#!/bin/bash
$1 version &amp;&gt;/dev/null
if [ $? -eq 0 ]; then
ln -sf $GOPATH/bin/$1 $HOME/.local/bin/go
go version
exit 0
fi</p>
<p>go get golang.org/dl/$1 &amp;&amp; $1 download
ln -sf $GOPATH/bin/$1 $HOME/.local/bin/go
go version
{% endhighlight %}</p>
<p>Saving this as an executable script <code>goset</code>, I could now switch to different versions like so:</p>
<p>{% highlight shell %}
$ goset go1.16.4
go version go1.16.4 linux/amd64
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-05-31-switching-different-go-versions/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-05-31-switching-different-go-versions/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Switching to different Go versions]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This is just a quick one.</p>
<p>I had some trouble making the <a href="https://developers.google.com/protocol-buffers/docs/proto3#any"><code>Any</code></a> protobuf type work when running <a href="https://github.com/grpc-ecosystem/grpc-gateway"><code>grpc-gateway</code></a> from a separate process with the gateway throwing an unknown message type error. A quick fix for this is to import the generated <code>pb.go</code> file to your proxy source. Something like:</p>
<p>{% highlight go %}
package main</p>
<p>import (
&hellip;</p>
<pre><code>_ &quot;github.com/username/pkgwithpbgo&quot;
</code></pre>
<p>)
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-12-31-support-any-grpc-gateway-separate-process/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-12-31-support-any-grpc-gateway-separate-process/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Support the &lsquo;Any&rsquo; protobuf type from an external grpc-gateway process]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Note that this function assumes the caller to be running as SYSTEM as well (i.e. Windows service).</p>
<p>For self reference:</p>
<p>{% gist a5ab54fec75bbabf6dac33b917b44c9b %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-05-31-start-process-as-system/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-05-31-start-process-as-system/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Start process as system using CreateProcessAsUser]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For self reference:</p>
<p>Simulate a touch input down, drag, up programmatically.</p>
<p>{% gist bd264001034db093413a0bb233760588 %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-03-28-simple-touch-input-funcs-windows/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-03-28-simple-touch-input-funcs-windows/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Simple touch/swipe input function in Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p><em>For personal reference:</em></p>
<p>Lately, I&rsquo;ve been doing loads of CSV processing on the terminal with lots of string replacing/splitting. There are probably better (shorter) ways to do this but I&rsquo;ve been leaning on <code>awk</code> a lot recently.</p>
<p>Some examples.</p>
<p>{% highlight shell %}</p>
<h1 id="one-line-separator-replace">One-line separator replace:</h1>
<p>$ echo &ldquo;1,2,3,4,5&rdquo; | awk &lsquo;{gsub(/,/,&quot; &ldquo;);print}&rsquo;
1 2 3 4 5</p>
<h1 id="then-i-can-use-it-with-something-like">Then I can use it with something like:</h1>
<p>for v in $(echo &ldquo;1,2,3,4,5&rdquo; | awk &lsquo;{gsub(/,/,&rdquo; &ldquo;);print}&rsquo;); do echo &ldquo;val=$v&rdquo;; done
val=1
val=2
val=3
val=4
val=5</p>
<h1 id="another-separator">Another separator:</h1>
<p>$ echo &ldquo;1|2|3|4|5&rdquo; | awk &lsquo;{gsub(/|/,&rdquo;,&quot;);print}&rsquo;
1,2,3,4,5</p>
<h1 id="join-multiple-lines-with-a-separator">Join multiple lines with a separator&hellip;</h1>
<h1 id="ref-httpswwwbaeldungcomlinuxjoin-multiple-lines">Ref: <a href="https://www.baeldung.com/linux/join-multiple-lines">https://www.baeldung.com/linux/join-multiple-lines</a></h1>
<p>$ cat file.txt
one
two
three
four
five
five</p>
<h1 id="while-removing-duplicates">&hellip;while removing duplicates:</h1>
<p>$ cat file.txt | uniq | awk -v d=&quot;,&quot; &lsquo;{s=(NR==1?s:s d)$0}END{print s}&rsquo;
one,two,three,four,five
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-06-17-string-split-awk/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-06-17-string-split-awk/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Simple string manipulations (splits/replaces) with awk]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>InstallShield seems ubiquitous when it comes to installer scripting, at least based on my experience with companies I&rsquo;ve worked for so far. But for my side projects, I&rsquo;ve always been a fan of <a href="http://www.jrsoftware.org/isinfo.php">InnoSetup</a>. It is simple to use and Pascal is not really that bad. It is free and can do probably all the things you require for an installer.</p>
<p>Here&rsquo;s an example of an InnoSetup script that I have been using as baseline for creating installers for Windows.</p>
<p>{% gist 009f11047563d2cb042a9a5a5e73f91a %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-02-28-simple-innosetup/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-02-28-simple-innosetup/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Simple Innosetup installation script]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I&rsquo;ve been dabbling a bit with Rust and so far, I&rsquo;m liking it. I&rsquo;ll probably use it more as replacement for my C/C++ projects. And I just uploaded a very simple ETW wrapper I&rsquo;m using in one of my side projects. You can check out the source code <a href="https://github.com/flowerinthenight/rusttrace">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-12-26-rust-etw/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-12-26-rust-etw/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Simple ETW wrapper for Rust]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<p>{% gist f8114f79b6699ced9a054a595b6c991a %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-19-dir-cleanup-tool/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-19-dir-cleanup-tool/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Simple directory cleanup tool for Windows (golang)]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Vim has always been my go to editor/IDE when I&rsquo;m outside of Visual Studio. Here&rsquo;s my base <code>_vimrc</code> for Windows.</p>
<p>{% highlight conf %}
let mapleader = &quot; &quot;</p>
<p>filetype off
syntax on
colorscheme darkblue</p>
<p>&quot; let pc=$PC
&quot; if pc == &lsquo;HOME&rsquo;
&quot;     set guifont=Letter\ Gothic\ Std:h11
&quot; else
&quot;     set guifont=Lucida\ Sans\ Typewriter:h9
&quot; endif</p>
<p>&quot; Save marks to up to 100 files, save global marks as well (f1). To disable, f0
set viminfo=&lsquo;100,f1</p>
<p>&quot; Folding options
set foldmethod=indent
set foldnestmax=20
set nofoldenable
set foldlevel=0</p>
<p>set guifont=Lucida\ Sans\ Typewriter
set lines=70 columns=160
set ai
set nu
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set wrap
set backspace=2
set encoding=utf-8
set fileencodings=utf-8
set nocompatible
set noswapfile
set shortmess+=I
set ignorecase
set guioptions-=T
set guioptions-=r
set guioptions-=m
set splitright
set splitbelow
set ruler
set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
call vundle#begin(&rsquo;$USERPROFILE/vimfiles/bundle/&rsquo;)
Plugin &lsquo;VundleVim/Vundle.vim&rsquo;
&quot; 1. Vim should be 64-bit (link in ycm site)
&quot; 2. Python should be 64-bit
Plugin &lsquo;Valloric/YouCompleteMe&rsquo;
Plugin &lsquo;fatih/vim-go&rsquo;
Plugin &lsquo;PProvost/vim-ps1&rsquo;
call vundle#end()
filetype plugin indent on
&quot; To ignore plugin indent changes, instead use:
&quot; filetype plugin on
&quot; let g:netrw_liststyle=3</p>
<p>let g:ycm_disable_for_files_larger_than_kb = 0
let g:ycm_autoclose_preview_window_after_completion = 1</p>
<p>&quot; Enable powershell syntax plug
autocmd BufNewFile,BufReadPost *.ps1 set filetype=ps1</p>
<p>&quot; Search for the word under cursor in the current dir (recursively)
command CSM :execute &ldquo;vimgrep /&rdquo; . expand(&quot;<cword>&quot;) . &ldquo;/j ** <Bar> :cw&rdquo;
nnoremap <leader>ms :CSM<CR></p>
<p>&quot; Simple mappings for window manipulations
nnoremap <leader>wq <C-W>q
nnoremap <leader>ws <C-W>s
nnoremap <leader>wv <C-W>v
nnoremap <leader><left><left> <C-W><left>
nnoremap <leader><right><right> <C-W><right>
nnoremap <leader><up><up> <C-W><up>
nnoremap <leader><down><down> <C-W><down></p>
<p>&quot; Display buffers, then prep the colon for the next command
nnoremap <leader>b :ls<CR>:</p>
<p>&quot; Shortcut for save
nnoremap <leader>s :w<CR></p>
<p>&quot; Shortcut for netrw explorer
nnoremap <leader>e :e.<CR></p>
<p>&quot; JSON pretty print (all buffer)
nnoremap <leader>pj :%!python -m json.tool<CR></p>
<p>&quot; Diff all windows (should prep 2 windows for this)
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff!<CR>
{% endhighlight %}</p>
<p>And here&rsquo;s my base <code>.vimrc</code> for Linux and OSX.</p>
<p>{% highlight conf %}
let mapleader = &quot; &quot;</p>
<p>filetype off
syntax on
colorscheme elflord
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin &lsquo;VundleVim/Vundle.vim&rsquo;
Plugin &lsquo;Valloric/YouCompleteMe&rsquo;
Plugin &lsquo;jelera/vim-javascript-syntax&rsquo;
Plugin &lsquo;fatih/vim-go&rsquo;
Plugin &lsquo;majutsushi/tagbar&rsquo;
call vundle#end()
filetype plugin indent on</p>
<p>&quot; Save marks to up to 100 files, save global marks as well (f1). To disable, f0
set viminfo=&lsquo;100,f1</p>
<p>&quot; Folding options
set foldmethod=indent
set foldnestmax=20
set nofoldenable
set foldlevel=0</p>
<p>set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set nu
set encoding=utf-8
set noswapfile
set shortmess+=I
set backspace=2
set nocompatible
set ignorecase
set splitright
set splitbelow
set ruler
&quot; Temporary enable/disable YouCompleteMe. Active = disable, commented = enable
&quot; let g:loaded_youcompleteme = 1
let g:ycm_global_ycm_extra_conf = &ldquo;~/.ycm_extra_conf.py&rdquo;
let g:ycm_disable_for_files_larger_than_kb = 0
let g:ycm_autoclose_preview_window_after_completion = 1</p>
<p>&quot; Options for netrw
let g:netrw_liststyle = 0
let g:netrw_altv = 1</p>
<p>&quot; 1. :PluginInstall
&quot; 2. :GoInstallBinaries (gotags, vim-go)
&quot; 3. Install &lsquo;ctags&rsquo;
&quot; 4. go get -u github.com/jstemmer/gotags
let g:tagbar_type_go = {
\ &lsquo;ctagstype&rsquo; : &lsquo;go&rsquo;,
\ &lsquo;kinds&rsquo;     : [
\ &lsquo;p:package&rsquo;,
\ &lsquo;i:imports:1&rsquo;,
\ &lsquo;c:constants&rsquo;,
\ &lsquo;v:variables&rsquo;,
\ &rsquo;t:types&rsquo;,
\ &rsquo;n:interfaces&rsquo;,
\ &lsquo;w:fields&rsquo;,
\ &rsquo;e:embedded&rsquo;,
\ &rsquo;m:methods&rsquo;,
\ &lsquo;r:constructor&rsquo;,
\ &lsquo;f:functions&rsquo;
\ ],
\ &lsquo;sro&rsquo; : &lsquo;.&rsquo;,
\ &lsquo;kind2scope&rsquo; : {
\ &rsquo;t&rsquo; : &lsquo;ctype&rsquo;,
\ &rsquo;n&rsquo; : &rsquo;ntype&rsquo;
\ },
\ &lsquo;scope2kind&rsquo; : {
\ &lsquo;ctype&rsquo; : &rsquo;t&rsquo;,
\ &rsquo;ntype&rsquo; : &rsquo;n&rsquo;
\ },
\ &lsquo;ctagsbin&rsquo;  : &lsquo;gotags&rsquo;,
\ &lsquo;ctagsargs&rsquo; : &lsquo;-sort -silent&rsquo;
\ }</p>
<p>nnoremap <F8> :TagbarToggle<CR></p>
<p>&quot; Search for the word under cursor in the current dir (recursively)
command CSM execute &ldquo;:vimgrep /&rdquo; . expand(&quot;<cword>&quot;) . &ldquo;/j ** <Bar> :cw&rdquo;
nnoremap <leader>ms :CSM<CR>
set wildignore+=jennah</p>
<p>&quot; Simple mappings for window manipulations
nnoremap <leader>wq <C-W>q
nnoremap <leader>ws <C-W>s
nnoremap <leader>wv <C-W>v
nnoremap <leader><left><left> <C-W><left>
nnoremap <leader><right><right> <C-W><right>
nnoremap <leader><up><up> <C-W><up>
nnoremap <leader><down><down> <C-W><down></p>
<p>&quot; Display buffers, then prep the colon for the next command
nnoremap <leader>b :ls<CR>:</p>
<p>&quot; Shortcut for save
nnoremap <leader>s :w<CR></p>
<p>&quot; Shortcut for netrw explorer
nnoremap <leader>e :e.<CR></p>
<p>&quot; JSON pretty print (all buffer)
nnoremap <leader>pj :%!python -m json.tool<CR></p>
<p>&quot; Diff all windows (should prep 2 windows for this)
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff!<CR></p>
<p>&quot; Highlight/no highlight for search
nnoremap <leader>hl :set hlsearch<CR>
nnoremap <leader>hn :set nohlsearch<CR></p>
<p>&quot; Diff all windows (should prep two windows for this)
nnoremap <leader>dt :windo diffthis<CR>
nnoremap <leader>do :windo diffoff!<CR>
{% endhighlight %}</p>
<h3 id="update-20160824">Update (2016/08/24)</h3>
<p>Updated <code>vimrc</code> can be viewed <a href="https://github.com/flowerinthenight/vim">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-07-27-sharing-my-vimrc/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-07-27-sharing-my-vimrc/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Sharing my .vimrc]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I use <code>tmux</code> heavily and in tandem with <code>vim</code>. Much more so now when it&rsquo;s supported on Bash on Windows as well. I don&rsquo;t have to spin up a Linux VM just for the purpose of being my <code>tmux</code> &ldquo;server&rdquo;.</p>
<p>{% highlight conf %}</p>
<h1 id="set-a-ctrl-b-shortcut-for-reloading-tmux-config">Set a Ctrl-b shortcut for reloading tmux config</h1>
<p>unbind r
bind r source-file ~/.tmux.conf</p>
<h1 id="prefix-is-ctrl-a">Prefix is Ctrl-a</h1>
<p>unbind C-b
set -g prefix C-a
bind C-a send-prefix</p>
<h1 id="rename-terminals">Rename terminals</h1>
<p>set -g set-titles on
set -g set-titles-string &lsquo;#(whoami)@#h@#(curl ipecho.net/plain;echo)&rsquo;</p>
<h1 id="status-bar-customization">Status bar customization</h1>
<p>set -g status-bg black
set -g status-fg white
set -g status-interval 5
set -g status-left-length 90
set -g status-right-length 60
set -g status-left &ldquo;#[fg=Green]#(whoami)#[fg=white]@#[fg=red]#(hostname -s)#[fg=white]|#[fg=yellow]#(curl ipecho.net/plain;echo)#[fg=white]|#[fg=yellow]#(hostname -I)#[fg=white]&rdquo;
set -g status-justify left
set -g status-right &lsquo;#[fg=Cyan]#S #[fg=white]%a %d %b %R&rsquo;</p>
<h1 id="easy-to-remember-split-pane-commands">Easy to remember split pane commands</h1>
<p>bind | split-window -h
bind - split-window -v
unbind &lsquo;&quot;&rsquo;
unbind %</p>
<h1 id="vim-friendly-settings-from-httpsgistgithubcomanonymous6bebae3eb9f7b972e6f0">Vim friendly settings (from <a href="https://gist.github.com/anonymous/6bebae3eb9f7b972e6f0">https://gist.github.com/anonymous/6bebae3eb9f7b972e6f0</a>)</h1>
<p>setw -g monitor-activity on
set -g visual-activity on
set -g mode-keys vi</p>
<h1 id="extend-history-limit">Extend history limit</h1>
<p>set -g history-limit 10000
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-11-sharing-my-tmux-conf/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-11-sharing-my-tmux-conf/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Sharing my .tmux.conf]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This is just a quick one.</p>
<p>Although I use <a href="https://wiki.gnome.org/Apps/Clocks">Gnome Clocks</a> occassionally, most of the time I set an alarm via the commandline.</p>
<p>{% highlight shell %}</p>
<h1 id="os-is-pop_os-using-vlc">OS is POP_OS!, using VLC:</h1>
<p>$ sleep 10m &amp;&amp; <br>
cvlc ~/alarm.mp3 &ndash;play-and-exit &amp;&amp; <br>
notify-send &lsquo;alarm done&rsquo;
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-11-08-alarm-from-cmdline/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-11-08-alarm-from-cmdline/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Setting alarm from commandline]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<h2 id="overview">Overview</h2>
<p>This post will walk through the steps on how we provisioned our production Kubernetes cluster <a href="https://twitter.com/mobingi">@mobingi</a>. Some of the bits here are already automated in our case but I will try to include as much details as I can.</p>
<p>Our goals would be the following:</p>
<ul>
<li>Provision a Kubernetes cluster on AWS using <a href="https://github.com/kubernetes/kops">kops</a>.</li>
<li>The cluster will have two autoscaling groups: one for on-demand, one for spot instances.</li>
<li>It&rsquo;s going to be a gossip-based cluster.</li>
<li>RBAC is enabled in the cluster.</li>
</ul>
<p>There is no need to rewrite the otherwise excellent installation instructions written in the <a href="https://github.com/kubernetes/kops/blob/master/docs/aws.md">kops wiki</a>. Basically, we can just follow the setup instructions there. The instructions in this post will be specific to our goals above.</p>
<h2 id="gossip-based-cluster">Gossip-based cluster</h2>
<p>We will skip the DNS configuration section as we are provisioning a gossip-based cluster, meaning, the cluster name will be something like <code>&quot;&lt;some-name&gt;.k8s.local&quot;</code>. We will be using <code>&quot;mycluster.k8s.local&quot;</code> as our cluster name.</p>
<h2 id="ssh-keypair">SSH keypair</h2>
<p>We will create the keypair in AWS under EC2 -&gt; Key Pairs -&gt; Create Key Pair. We need this keypair when we need to ssh to our cluster nodes. After saving the keypair somewhere, we will generate the public key using the following command:</p>
<p>{% highlight shell %}
$ ssh-keygen -y -f mycluster.pem &gt; mycluster.pem.pub
{% endhighlight %}</p>
<h2 id="create-the-cluster">Create the cluster</h2>
<p>At this point, we should already have our environment variables set, mainly <code>NAME</code> and <code>KOPS_STATE_STORE</code>. To create the cluster:</p>
<p>{% highlight shell %}</p>
<h1 id="im-from-japan-so-im-using-ap-northeast-1-tokyo">I&rsquo;m from Japan so I&rsquo;m using ap-northeast-1 (Tokyo)</h1>
<p>$ kops create cluster <br>
&ndash;ssh-public-key mycluster.pem.pub
&ndash;zones ap-northeast-1a,ap-northeast-1c <br>
&ndash;authorization RBAC <br>
&ndash;cloud aws ${NAME} <br>
&ndash;yes
{% endhighlight %}</p>
<p>It will take some time before the cluster will be ready. To validate the cluster:</p>
<p>{% highlight shell %}
$ kops validate cluster
Using cluster from kubectl context: mycluster.k8s.local</p>
<p>Validating cluster mycluster.k8s.local</p>
<p>INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-ap-northeast-1a  Master  m3.medium       1       1       &hellip;
nodes                   Node    t2.medium       2       2       &hellip;</p>
<p>NODE STATUS
NAME                                                    ROLE    READY
ip-x-x-x-x.ap-northeast-1.compute.internal              master  True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
&hellip;</p>
<p>Your cluster mycluster.k8s.local is ready
{% endhighlight %}</p>
<p>Notice that we only have one instance for our master. We can also opt to have a highly available master using <a href="https://github.com/kubernetes/kops/blob/master/docs/commands.md#other-interesting-modes">these options</a>, which is generally recommended for production clusters. Based on our experience though, this single master instance setup is good enough for development and/or staging clusters. There&rsquo;s going to be downtime if master goes down in which case the duration will depend on how long AWS autoscaling group kicks in. During that window, k8s API won&rsquo;t be accessible but the nodes will continue to work, including our deployed applications.</p>
<h2 id="spot-instance-autoscaling-group">Spot instance autoscaling group</h2>
<p>Once the cluster is ready, we will add another instance group for spot instances. The default instance group created in the previous command, named &ldquo;nodes&rdquo;, will be our on-demand group. To add:</p>
<p>{% highlight shell %}
$ kops create ig nodes-spots -subnet ap-northeast-1a,ap-northeast-1c
{% endhighlight %}</p>
<p>You can then edit using the following contents (modify values as needed):</p>
<p>{% highlight ruby %}
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
creationTimestamp: <some-datetime-value-here>
labels:
kops.k8s.io/cluster: mycluster.k8s.local
name: nodes-spot
spec:
image: kope.io/k8s-1.8-debian-jessie-amd64-hvm-ebs-2017-12-02
machineType: t2.medium
maxPrice: &ldquo;0.02&rdquo;
maxSize: 10
minSize: 2
nodeLabels:
kops.k8s.io/instancegroup: nodes
spot: &ldquo;true&rdquo;
role: Node
subnets:</p>
<ul>
<li>ap-northeast-1a</li>
<li>ap-northeast-1c
{% endhighlight %}</li>
</ul>
<p>We can now update our cluster with the following commands:</p>
<p>{% highlight shell %}</p>
<h1 id="optional-update-our-on-demand-groups-max-size-to-some-number">[optional] update our on-demand group&rsquo;s max size to some number</h1>
<p>$ kops edit ig nodes</p>
<h1 id="optional-preview-the-changes-to-be-applied">[optional] preview the changes to be applied</h1>
<p>$ kops update cluster ${NAME}</p>
<h1 id="actual-cluster-update">actual cluster update</h1>
<p>$ kops update cluster ${NAME} &ndash;yes</p>
<h1 id="optional-check-if-we-need-rolling-update">[optional] check if we need rolling update</h1>
<p>$ kops rolling-update cluster</p>
<h1 id="if-so-add---yes-option">if so, add &ndash;yes option</h1>
<p>$ kops rolling-update cluster &ndash;yes
{% endhighlight %}</p>
<p>We can now validate the cluster to see our changes:</p>
<p>{% highlight shell %}
$ kops validate cluster
Validating cluster mycluster.k8s.local</p>
<p>INSTANCE GROUPS
NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS
master-ap-northeast-1a  Master  m3.medium       1       1       &hellip;
nodes                   Node    t2.medium       2       4       &hellip;
nodes-spot              Node    t2.medium       2       10      &hellip;</p>
<p>NODE STATUS
NAME                                                    ROLE    READY
ip-x-x-x-x.ap-northeast-1.compute.internal              master  True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
ip-x-x-x-x.ap-northeast-1.compute.internal              node    True
&hellip;</p>
<p>Your cluster mycluster.k8s.local is ready
{% endhighlight %}</p>
<p>When our cluster was created, kops also has automatically generated our config file for kubectl. To verify:</p>
<p>{% highlight shell %}
$ kubectl cluster-info
Kubernetes master is running at https&hellip;
KubeDNS is running at https&hellip;</p>
<p>To further debug and diagnose cluster problems, use &lsquo;kubectl cluster-info dump&rsquo;.
{% endhighlight %}</p>
<h2 id="setup-cluster-autoscaler">Setup cluster autoscaler</h2>
<p>Clusters created using kops use autoscaling groups, but without scaling policies (at the time of writing). To enable dynamic scaling of our cluster, we will use <a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler/cloudprovider/aws">cluster autoscaler</a>. Before cluster autoscaler deployment, we need to setup some prerequisites.</p>
<p>First, we need to attach the following permissions to master and nodes IAM role. Go to IAM roles console and add an inline policy to the roles created by kops. Role names would be something like:</p>
<ul>
<li>master.mycluster.k8s.local</li>
<li>nodes.mycluster.k8s.local</li>
</ul>
<p>{% highlight json %}
{
&ldquo;Version&rdquo;: &ldquo;2012-10-17&rdquo;,
&ldquo;Statement&rdquo;: [
{
&ldquo;Effect&rdquo;: &ldquo;Allow&rdquo;,
&ldquo;Action&rdquo;: [
&ldquo;autoscaling:DescribeAutoScalingGroups&rdquo;,
&ldquo;autoscaling:DescribeAutoScalingInstances&rdquo;,
&ldquo;autoscaling:DescribeTags&rdquo;,
&ldquo;autoscaling:SetDesiredCapacity&rdquo;,
&ldquo;autoscaling:TerminateInstanceInAutoScalingGroup&rdquo;
],
&ldquo;Resource&rdquo;: &ldquo;*&rdquo;
}
]
}
{% endhighlight %}</p>
<p>The latest installation instructions can be found <a href="https://github.com/kubernetes/kops/tree/master/addons/cluster-autoscaler">here</a>. The general idea is to choose the latest yaml file, update it with your own values, and apply the file using kubectl. The readme file also provides a script that does the download and edit for us. We will be using the following command line arguments for our autoscaler:</p>
<p>{% highlight ruby %}
command:</p>
<ul>
<li>./cluster-autoscaler</li>
<li>&ndash;cloud-provider=aws</li>
<li>&ndash;v=4</li>
<li>&ndash;stderrthreshold=info</li>
<li>&ndash;scale-down-delay=5m</li>
<li>&ndash;skip-nodes-with-local-storage=false</li>
<li>&ndash;expander=least-waste</li>
<li>&ndash;nodes=2:4:nodes.mycluster.k8s.local</li>
<li>&ndash;nodes=2:10:nodes-spot.mycluster.k8s.local
{% endhighlight %}</li>
</ul>
<p>You should update the last two line with your own autoscaling group min/max values. Finally, we deploy our autoscaler with:</p>
<p>{% highlight shell %}
$ kubectl create -f cluster-autoscaler.yml
deployment &ldquo;cluster-autoscaler&rdquo; created
{% endhighlight %}</p>
<p>That&rsquo;s it. You may also want to install <a href="https://github.com/kubernetes/kops/blob/master/docs/addons.md#installing-kubernetes-addons">these addons</a> if you like.</p>
<h2 id="ssh-to-a-node">SSH to a node</h2>
<p>{% highlight shell %}</p>
<h1 id="sample-ips-only">sample ip&rsquo;s only</h1>
<p>$ kubectl get node -o wide
NAME                           STATUS    ROLES     AGE   VERSION   EXTERNAL-IP  OS-IMAGE                      &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     master    1d    v1.8.6    1.2.3.4      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.5      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.6      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.7      Debian GNU/Linux 8 (jessie)   &hellip;
ip-x.x.x.x.ap-northeast-1&hellip;   Ready     node      1d    v1.8.6    1.2.3.8      Debian GNU/Linux 8 (jessie)   &hellip;</p>
<h1 id="default-username-is-admin">default username is <code>admin</code></h1>
<p>$ ssh -i mycluster.pem <a href="mailto:admin@1.2.3.4">admin@1.2.3.4</a>
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-01-24-k8s-kops-aws/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-01-24-k8s-kops-aws/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Running Kubernetes on AWS using kops]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Some golang-based tools I&rsquo;ve used (or even written) use the builtin <code>log</code> package that output logs to stderr by default. I also use <a href="https://en.wikipedia.org/wiki/Tee_(command)">tee</a> for piping console outputs to file for later viewing. This is the command I generally use:</p>
<p>{% highlight shell %}</p>
<h1 id="example-tool">Example tool:</h1>
<p>$ sometool &ndash;flag1 &ndash;flag2 2&gt;&amp;1 | tee out.txt</p>
<h1 id="21----redirect-stderr-to-stdout">2&gt;&amp;1 &lt;&ndash; redirect stderr to stdout</h1>
<h1 id="tee----pipe-the-console-output-to-outtxt-while-retaining-the-actual-console-logs-during-command-execution">tee &lt;&ndash; pipe the console output to out.txt while retaining the actual console logs during command execution</h1>
<p>{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-10-29-stderr-tee/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-10-29-stderr-tee/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Output golang cmdline tools to stdout and file using tee]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>If you&rsquo;re using <a href="https://github.com/golang/glog">glog</a> in your Go codes, you can output those when running <code>go test ...</code> by using the <code>--args</code> parameter:</p>
<p>{% highlight shell %}
$ go test -v ./&hellip; -count=1 -cover -race -mod=vendor &ndash;args &ndash;logtostderr &ndash;v=1
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-03-18-glog-gotest/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-03-18-glog-gotest/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Output glog from go test]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Most of the time when I open a man page for a certain command or tool, I use Vim:</p>
<p>{% highlight shell %}</p>
<h1 id="open-man-page-for-the-dd-command">Open man page for the &lsquo;dd&rsquo; command:</h1>
<p>$ man dd | col -b | vim -MR -
{% endhighlight %}</p>
<p>It&rsquo;s actually a handful to type but since I use <a href="https://www.zsh.org/">zsh</a> + <a href="https://github.com/junegunn/fzf">fzf</a>, it&rsquo;s not really a big deal as recalling the command is pretty straightforward.</p>
<p>But yesterday, I came across this nifty little plugin called <a href="https://github.com/lambdalisue/vim-manpager">vim-manpager</a>. I tried adding it to my vimrc, added the environment variable below to my zshrc:</p>
<p>{% highlight shell %}
export MANPAGER=&ldquo;vim -c MANPAGER -&rdquo;
{% endhighlight %}</p>
<p>And now, I can open all man pages by calling the <code>man</code> command directly. I can also open man pages directly from within Vim. Brilliant!</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-04-22-open-manpages-vim/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-04-22-open-manpages-vim/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Open man pages in Vim]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Happy new year to all! To the bookworms out there, I&rsquo;ve added a new page in the site called <a href="http://flowerinthenight.com/bookshelf/">Bookshelf</a>, a list of all the books I&rsquo;ve read so far. If you have any suggestions/recommendations, please don&rsquo;t hesitate to leave a comment. Thank you.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-01-04-bookshelf/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-01-04-bookshelf/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[New &lsquo;Bookshelf&rsquo; page]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Update 2017/03/24: Transferred to a separate repository <a href="https://github.com/flowerinthenight/git-cheatsheet">here</a>.</p>
<p>For personal reference:</p>
<h3 id="reset-a-file">Reset a file</h3>
<p>{% highlight shell %}
git checkout HEAD &ndash; my-file.txt
{% endhighlight %}</p>
<h3 id="delete-last-commit">Delete last commit</h3>
<p>{% highlight shell %}
git reset &ndash;hard HEAD~1
{% endhighlight %}</p>
<h3 id="delete-local-branch">Delete local branch</h3>
<p>{% highlight shell %}
git branch -d <branch-name>
{% endhighlight %}</p>
<p>or to force delete</p>
<p>{% highlight shell %}
git branch -D <branch-name>
{% endhighlight %}</p>
<h3 id="delete-branch-from-remote-repository">Delete branch from remote repository</h3>
<p>{% highlight shell %}
git push origin &ndash;delete <remote-branch-name>
{% endhighlight %}</p>
<h3 id="search-for-the-merge-commit-from-a-specific-commit">Search for the merge commit from a specific commit</h3>
<p>{% highlight shell %}
git log <SHA>..master &ndash;ancestry-path &ndash;merges
{% endhighlight %}</p>
<h3 id="search-for-a-commit-message">Search for a commit message</h3>
<p>{% highlight shell %}
git log | grep <pattern>
{% endhighlight %}</p>
<h3 id="list-commits-on-range-line-of-codes-for-one-file">List commits on range line of codes for one file</h3>
<p>{% highlight shell %}
git blame -L&lt;line#&gt;,+<offset> &ndash; <filename>
{% endhighlight %}</p>
<p>For example, three lines starting from line 257 of main.cpp</p>
<p>{% highlight shell %}
git blame -L257,+3 &ndash; main.cpp
{% endhighlight %}</p>
<h3 id="history-of-a-line-or-lines-in-a-file">History of a line (or lines) in a file</h3>
<p>{% highlight shell %}
git log &ndash;topo-order &ndash;graph -u -L <line-start>,<line-end>:<file>
{% endhighlight %}</p>
<p>For example, history of line 155 of main.cpp</p>
<p>{% highlight shell %}
git log &ndash;topo-order &ndash;graph -u -L 155,155:main.cpp
{% endhighlight %}</p>
<h3 id="compare-diff-a-file-from-the-current-branch-to-another-branch">Compare (diff) a file from the current branch to another branch</h3>
<p>{% highlight shell %}
git diff ..<target-branch> <path-to-file>
{% endhighlight %}</p>
<p>Or if <code>difftool</code> is configured</p>
<p>{% highlight shell %}
git difftool ..<target-branch> <path-to-file>
{% endhighlight %}</p>
<h3 id="rebasesquash-all-branch-commits">Rebase/squash all branch commits</h3>
<p>{% highlight shell %}
git checkout -b new-branch
modify&hellip;
commit&hellip;
&hellip;
git rebase -i master
(sometimes, I branch out of master for a clean branch and do a git rebase -i clean-branch)
git checkout master
git rebase new-branch
(delete clean-branch)
{% endhighlight %}</p>
<h3 id="combine-all-branch-commits-to-one-before-merging-to-master-sort-of-like-the-one-above">Combine all branch commits to one before merging to master (sort of like the one above)</h3>
<p>{% highlight shell %}
git checkout master
git checkout -b clean
git merge &ndash;squash branch_to_merge_to_one_commit
git commit
(add commit message)
git checkout master
git merge clean
{% endhighlight %}</p>
<h3 id="custom-format-for-log">Custom format for log</h3>
<p>Add to global <code>.gitconfig</code> using <code>git config --global alias.logp &quot;...&quot;</code></p>
<p>{% highlight shell %}
git log &ndash;pretty=format:&rsquo;%Cred%h %C(yellow)%d%Creset %s %Cgreen(%cr|%ci) %C(bold blue)[%an]%Creset'
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-18-git-commands-notes/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-18-git-commands-notes/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[My commonly used commands in GIT]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded an example code on how to monitor a Dynamodb table (INSERT, MODIFY, and REMOVE) using <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html">dynamodbstreams</a>, lambda, SNS, and SQS. Please have a look <a href="https://github.com/flowerinthenight/dynamodbstreams-lambda-sns-sqs">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-11-19-dynamodbstreams-lambda-sns-sqs/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-11-19-dynamodbstreams-lambda-sns-sqs/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Monitoring dynamodb table using dynamodbstream, lambda, SNS and SQS]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I posted an <a href="https://tech.mobingi.com/2018/12/05/mochi-k8s-repo.html">article</a> for <a href="https://twitter.com/mobingi">@mobingi</a> about its Kubernetes clusters repo. Please check it out. Thanks.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-12-27-mochi-k8s-repo/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-12-27-mochi-k8s-repo/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Mobingi&rsquo;s Kubernetes clusters repo]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I posted an <a href="https://tech.mobingi.com/2018/09/25/ouchan-monorepo.html">article</a> for <a href="https://twitter.com/mobingi">@mobingi</a> about its Golang-based monorepo. Please check it out. Thanks.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-09-25-ouchan-monorepo/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-09-25-ouchan-monorepo/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Mobingi&rsquo;s golang monorepo]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I recently uploaded a tool to GitHub that wraps <code>kubectl port-forward</code> command and supports port-forwarding to multiple pods. It&rsquo;s called <a href="https://github.com/flowerinthenight/kubepfm"><code>kubepfm</code></a>. I use this tool heavily in my development work. You can check out the code <a href="https://github.com/flowerinthenight/kubepfm">here</a>. You might find this useful.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-07-24-kubepfm/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-07-24-kubepfm/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[kubepfm, a kubectl port-forward wrapper for multiple pods]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For self reference:</p>
<p>{% gist caa8ae4a0112f25eeabb67d0fbd837dd %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-08-31-golang-json-prettify/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-08-31-golang-json-prettify/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[JSON prettifier function in Go]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<p>{% gist b6e639978dc2c21042ccea526700f214 %}</p>
<h3 id="access-root">Access root</h3>
<p>{% highlight shell %}
http://localhost:8000
{% endhighlight %}</p>
<h3 id="access-expvar-information">Access expvar information</h3>
<p>{% highlight shell %}
http://localhost:8000/debug/vars
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-20-expvar-gorilla-mux/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-20-expvar-gorilla-mux/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[How to serve expvar when using gorilla/mux]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>After six or so years living in Japan, I just got mine today. Yeah, I know&hellip;</p>
<p><a href="https://gaijinpot.com/">GaijinPot</a> has an <a href="https://blog.gaijinpot.com/convenience-store-point-cards/">article</a> about point cards from three of the most common convenience stores in the country. I already have Lawsons Ponta card and Family Marts T-Point ages ago but for some reason, I actually havent heard of 7-11s <a href="https://en.wikipedia.org/wiki/Nanaco">Nanaco</a>. Or maybe I did but I probably didnt bother.</p>
<p>But now that I have a Seven Bank account, I noticed from their online bank access site an option to register to their point service. Unsurprisingly, they offer Nanaco points to almost all of my bank transactions (deposits, withdrawals, fund transfers, etc.) which I think is brilliant. But I have to have a Nanaco point card in the first place before I can register. It also said that I can get the card from any 7-11 store. I just have to fill up some application form (surely in Japanese). Or, I can also fill up the application form online, print it and submit to any 7-11 store. I went for the later.</p>
<p><a href="https://www.nanaco-net.jp/index_pc.html">Nanaco official website</a> is in Japanese. So Google Translate is your friend here. My Chrome browser is set to auto-translate so Im good to go. Go to this <a href="https://www.nanaco-net.jp/entry/index02.html">link</a>, scroll down a bit, and press the big red button. It looks like this:</p>
<p>{% include image.html url=&quot;../../../../images/nanaco1.png&quot; %}</p>
<p>It will open a new window with some more Japanese instructions. Scroll down to the very bottom and click the left button.</p>
<p>{% include image.html url=&quot;../../../../images/nanaco2.png&quot; %}</p>
<p>The next page will be the actual form. You will need to input personal information such as your name, birthday, address (both Japanese and Katakana), phone number, etc. I had a few attempts because the password field only accepts numbers (although Google Translation said &ldquo;alphanumeric&rdquo;. Oh well). Then click the Next button (the only button) at the very bottom. If you got it right, you will receive a confirmation email containing a link to the document to be printed. It will look like this:</p>
<p>{% include image.html url=&quot;../../../../images/nanaco3.png&quot; %}</p>
<p>Print it and submit to any 7-11 store. The card will cost you 300 yen. After payment, you will get your card right away.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-02-25-apply-nanaco-point-card/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-02-25-apply-nanaco-point-card/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[How to apply for a Nanaco point card]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I installed Samba to my Ubuntu Server (which is an old ThinkPad laptop that has been gathering dust in my closet for ages):</p>
<p>{% highlight shell %}
sudo apt-get install samba
{% endhighlight %}</p>
<p>I have three 3-TB HDDs that I planned to use as my main server storage; one main server, and the other two for backup. All of these HDDs are in ext4 format.</p>
<p>Then I created a new directory under <code>/media</code> where I will mount my main server storage:</p>
<p>{% highlight shell %}
mkdir /media/myserver
{% endhighlight %}</p>
<p>Then I edited the samba config file <code>/etc/samba/smb.conf</code>. I just scrolled to the very bottom and added these lines (after [print$] section):</p>
<p>{% highlight conf %}
[MYSERVER]
path = /media/myserver
browsable = yes
writable = yes
guest ok = yes
read only = no
{% endhighlight %}</p>
<p>Then I tested the config file for syntax errors using the command:</p>
<p>{% highlight shell %}
testparm
{% endhighlight %}</p>
<p>Before I added the mount entry for my server to <code>/etc/fstab</code>, I took note of my HDD&rsquo;s UUID from the following command:</p>
<p>{% highlight shell %}
sudo blkid
{% endhighlight %}</p>
<p>in which the output looked something like</p>
<p>{% highlight shell %}
/dev/sdb1: UUID=&ldquo;996a1b79-bf22-49fd-a3d1-33eab2708cfb&rdquo; TYPE=&ldquo;ext4&rdquo;
{% endhighlight %}</p>
<p>Then I edited <code>/etc/fstab</code> and added the line below:</p>
<p>{% highlight shell %}
UUID=996a1b79-bf22-49fd-a3d1-33eab2708cfb /media/myserver ext4 defaults 0 0
{% endhighlight %}</p>
<p>Lastly, I then rebooted my server.</p>
<h1 id="accessing-my-file-server-from-windows">Accessing my file server from Windows</h1>
<p>To access my server, I opened File Explorer and browsed to <code>\\my_server_ip\myserver</code>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-28-setup-samba-server/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-28-setup-samba-server/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[How I set up my Samba file server]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I have uploaded an example of how to handle lengthy processing of PubSub subscription messages in GitHub. If you are using PubSub and are, at times, struggling with PubSub default deadlines, you might find this example helpful. The code can be found <a href="https://github.com/flowerinthenight/gcp-pubsub-lengthy-consume">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-08-13-gcp-pubsub-lengthy-process/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-08-13-gcp-pubsub-lengthy-process/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[GCP PubSub lengthy message processing]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>It&rsquo;s been a year since I&rsquo;ve transitioned, sort of, from Vim to Emacs, so I thought I&rsquo;d write something about it.</p>
<p><a href="https://www.vim.org/">Vim</a> has been my primary editor of choice for many years. I think I started Vim around 2003 on a RedHat box writing x86 assembly. Ever since, throughout my working carrier, whether it&rsquo;s on Windows, OSX, or Linux, it&rsquo;s been always Vim for me. Yes, even on Windows where the experience is really not that good, I still use Vim. My <a href="https://github.com/flowerinthenight/.files/blob/master/vimrc">config</a> now is reasonably compact after all the changes it went through with the plugins that I&rsquo;ve used all these years.</p>
<p>But around January of 2020, I stumbled upon a <a href="https://www.youtube.com/watch?v=SzA2YODtgK4">YouTube video</a> about Org Mode. When I saw it, I thought it was fantastic. My wife has been doing <a href="https://bulletjournal.com/">bullet journaling</a> for a while now so I&rsquo;m a bit familiar with it and I thought it&rsquo;s pretty much a bullet journaling plugin in an editor. I gave it a try.</p>
<p>I tried both <a href="https://www.spacemacs.org/">Spacemacs</a> and <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a> and eventually settled with Spacemacs. Not sure why. Both are brilliant. My leader key in Vim is Space so the transition was not that difficult. Now, Org Mode has become an essential tool for me in my work. I don&rsquo;t really code that much anymore so I spend more time in Org Mode now than in code. After a year -ish of Spacemacs usage, overall, my experience has been enjoyable. Mind you, I&rsquo;ve only used it in Linux as my main system is <a href="https://pop.system76.com/">Pop!_OS</a>.</p>
<p>Some minor annoyances. First is the startup time. I never really thought much about it in Vim. You could say that I&rsquo;ve been spoiled with Vim&rsquo;s startup times that Spacemacs&rsquo; startup delay was a hard pill to swallow. It still is. At this time of writing, I&rsquo;m on Emacs 26.3. I tried 27.1 which is supposed to be faster due to its native support for JSON parsing, but, while faster overall, still noticeably and annoyingly slow. Still, once I open Spacemacs, I rarely close it, or I&rsquo;ve learned not to close it the way I use Vim so I&rsquo;d say I can live with it.</p>
<p>Second is the <code>s</code> shortcut key. It&rsquo;s not really against Spacemacs or anything but after a year of use, I still stumble with it more times than I like. You see, in Vim, my goto &lsquo;replace&rsquo; shortcut is <code>s</code> by highlighting a word, or phrase, or a line, then pressing <code>s</code> to delete it while changing to edit mode at the same time. In Spacemacs, <code>s</code> is surround, not delete+edit. It&rsquo;s probably going to take me more years to master this especially that I still use Vim from time to time.</p>
<p>Now, I still use Vim for quick edits, or, if I feel like it. It still has a special place in my heart. But for now, I look forward to more years of Emacs use.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-01-30-vim-emacs/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-01-30-vim-emacs/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[From Vim to Emacs]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>As of this writing, GitHub Pages still doesn&rsquo;t support HTTPS for custom domains. Last week, I came across <a href="https://www.netlify.com/github-pages-vs-netlify/">Netlify</a> being able to serve GitHub Pages as is, with HTTPS support even with custom domains. I gave it a go. And it worked. If you&rsquo;re in the same boat as me (using GH-Pages with custom domains), give <a href="https://www.netlify.com/">Netlify</a> a go.</p>
<p>Note: I am not affiliated with Netlify in any way, whatsoever.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-07-31-ghpages-netlify/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-07-31-ghpages-netlify/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[From GitHub Pages to Netlify]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<h2 id="update">Update</h2>
<p><a href="https://github.com/fatih/vim-go">vim-go</a> has already transitioned to <a href="https://github.com/golang/tools/blob/master/gopls/doc/user.md">gopls</a> as its default completion engine. I just noticed that my Vim is still using <a href="https://github.com/stamblerre/gocode">gocode</a> even though I updated to the latest version of vim-go. Commenting/removing the line <code>Plugin 'stamblerre/gocode', {'rtp': 'vim/'}</code> from my .vimrc did the trick for me. Hope this helps.</p>
<p>Original post <a href="https://flowerinthenight.com/blog/2018/09/20/vimgo-go111-gocode">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-03-25-vimgo-gocode-gopls/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-03-25-vimgo-gocode-gopls/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Followup on autocompletion with gocode and vim-go in Go1.11, transition to gopls]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This might be hacky and there might be a proper way to do this but recently, I needed to generate all the functions&rsquo; gRPC-generated full names from our protobuf definitions. This is part of our RBAC module that needs to filter gRPC function calls. I got the list from our <a href="https://github.com/alphauslabs/blue-sdk-go">generated Go client</a> using the following command(s):</p>
<p>{% highlight shell %}</p>
<h1 id="main-command">Main command:</h1>
<p>$ grep -o -R -i -E &lsquo;&quot;/blueapi..*&quot;&rsquo; . | awk -F&rsquo;:&rsquo; &lsquo;{gsub(/&quot;/, &ldquo;&rdquo;, $2); print &ldquo;-&rdquo;, substr($2, 2);}&rsquo; | sort | uniq</p>
<h1 id="actual-commands-save-as-yaml">Actual commands; save as yaml:</h1>
<p>$ echo &ldquo;functions:&rdquo; &gt; /tmp/funcs.yaml
$ grep -o -R -i -E &lsquo;&quot;/blueapi..*&quot;&rsquo; . | awk -F&rsquo;:&rsquo; &lsquo;{gsub(/&quot;/, &ldquo;&rdquo;, $2); print &ldquo;-&rdquo;, substr($2, 2);}&rsquo; | <br>
sort | uniq &raquo; /tmp/funcs.yaml
{% endhighlight %}</p>
<p>The final list is uploaded to this <a href="https://github.com/alphauslabs/blueapi-functions">repository</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-07-31-extracting-grpc-funcs-to-list/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-07-31-extracting-grpc-funcs-to-list/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Extract gRPC-generated functions to a list]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This is related to a <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">previous post</a> about Kubernetes services. This time, it&rsquo;s about extending the timeout of an Ingress. We had a situation where we had to download a huge file from one of our exposed services. The download takes about two minutes to complete. This didn&rsquo;t really worked out since by default, GCP load balancers that are associated with k8s Ingresses have a timeout value of 30s. For a time, we just did manual updates by going to the GCP k8s Services and Ingress console, opening the backend service under the Ingress, and editing the Timeout section to the desired seconds. But since we do have a cluster blue/green deployment, we had to do this every time we recreate our clusters.</p>
<p>Enter <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/backendconfig">BackendConfig</a> custom resource. With this, we can associate a BackendConfig resource to the service in question using GCP-specific annotations. Reusing the reverse proxy YAML from <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">this post</a>, we add a BackendConfig resource.</p>
<p>{% highlight ruby %}
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
name: serviceproxy-backendconfig
spec:
timeoutSec: 7200
connectionDraining:
drainingTimeoutSec: 60</p>
<hr>
<p>apiVersion: v1
kind: Service
metadata:
name: serviceproxy
annotations:
beta.cloud.google.com/backend-config: &lsquo;{&ldquo;ports&rdquo;: {&ldquo;80&rdquo;:&ldquo;serviceproxy-backendconfig&rdquo;}}&rsquo;
spec:
type: NodePort
ports:</p>
<ul>
<li>name: http
protocol: TCP
port: 80
targetPort: 80
selector:
app: serviceproxy
{% endhighlight %}</li>
</ul>
<p>Deploying this will set the timeout of the service to two hours.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-11-28-gcp-backendconfig-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-11-28-gcp-backendconfig-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Extending the timeout of a Kubernetes service in GCP]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Recently, I was working on a project that involves the encoding of .NET bitmaps using <a href="https://www.ffmpeg.org/">ffmpeg</a>&rsquo;s h264 encoder with <code>mp4</code> as container. This video output will be used in a <code>&lt;video&gt;</code> tag in html5. Sample codes have been all over the place so it took me quite a while to come up with a working solution. The official sample from ffmpeg only encodes to raw h264 stream. This is just a basic sample code for reference.</p>
<p>Check out the source code <a href="https://github.com/flowerinthenight/ffmpeg-encode-h264mp4">here</a>.</p>
<p>Lastly, some useful links that I used:</p>
<ul>
<li><a href="https://en.code-bude.net/2013/04/17/how-to-create-video-files-in-c-from-single-images/">https://en.code-bude.net/2013/04/17/how-to-create-video-files-in-c-from-single-images/</a></li>
<li><a href="https://github.com/FFmpeg/FFmpeg/blob/master/doc/examples/decoding_encoding.c">https://github.com/FFmpeg/FFmpeg/blob/master/doc/examples/decoding_encoding.c</a></li>
<li><a href="http://www.imc-store.com.au/Articles.asp?ID=276">http://www.imc-store.com.au/Articles.asp?ID=276</a></li>
</ul>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-11-28-ffmpeg-encode-h264mp4/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-11-28-ffmpeg-encode-h264mp4/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Encoding .NET bitmaps to H264 using FFMPEG]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I&rsquo;ve found this <a href="https://gist-it.appspot.com/">nifty little tool</a> that can embed codes directly from your GitHub repositories without using Gist. It&rsquo;s very easy to use. For example, if you want to embed, say, <a href="https://github.com/flowerinthenight/rusttrace/blob/master/src/main.rs">this whole file</a>, you only need to add this snippet somewhere in your post.md file.</p>
<p>{% highlight html %}</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rusttrace/blob/master/src/main.rs?footer=minimal"></script>
<p>{% endhighlight %}</p>
<p>The <code>?footer=minimal</code> part is optional. It will look something like this:</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rusttrace/blob/master/src/main.rs?footer=minimal"></script>
<p>It can also embed just a section of code based on line numbers. For example, to embed line 234 to line 257 of <a href="https://github.com/flowerinthenight/rmq/blob/master/rabbitmq.go">this file</a>, this snippet will do.</p>
<p>{% highlight html %}</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rmq/blob/master/rabbitmq.go?slice=233:257&footer=minimal"></script>
<p>{% endhighlight %}</p>
<p>It will look something like this:</p>
<script charset="UTF-8" src="https://gist-it.appspot.com/github.com/flowerinthenight/rmq/blob/master/rabbitmq.go?slice=233:257&footer=minimal"></script>
<p>Just note that the <code>slice=</code> parameter is zero-based and GitHub&rsquo;s line numbering starts at 1.</p>
<p>Finally, if you have an HTTPS blog, make sure to use <code>https://gist-it.appspot.com/...</code>, not <code>http://gist-it.appspot.com/...</code>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-11-28-embed-github-code/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-11-28-embed-github-code/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Embed code from GitHub to GitHub Pages blog like Gist]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p><em>For personal reference:</em></p>
<p>Download the latest GitHub Releases asset using common command line tools:</p>
<p>{% highlight shell %}</p>
<h1 id="update-the-url-accordingly-the-uname--awk-subcmds-will-output-linuxdarwin">Update the url accordingly. The <code>uname | awk</code> subcmds will output &rsquo;linux&rsquo;|&lsquo;darwin&rsquo;.</h1>
<p>$ curl -s <a href="https://api.github.com/repos/alphauslabs/bluectl/releases/latest">https://api.github.com/repos/alphauslabs/bluectl/releases/latest</a> | <br>
jq -r &ldquo;.assets[] | select(.name | contains(&quot;$(uname -s | awk &lsquo;{print tolower($0)}&rsquo;)&quot;)) | .browser_download_url&rdquo; | <br>
wget -i -
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2022-01-17-download-latest-github-release-cmdline/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2022-01-17-download-latest-github-release-cmdline/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Download the latest Github release using command line]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I recently uploaded a tool to GitHub that downloads <a href="https://aws.amazon.com/athena/">AWS Athena</a> query results as CSV. It&rsquo;s called <a href="https://github.com/flowerinthenight/athena2csv"><code>athena2csv</code></a>. You can check out the code <a href="https://github.com/flowerinthenight/athena2csv">here</a>. You might find this useful.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-03-09-athena2csv/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-03-09-athena2csv/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Download AWS Athena query results as CSV]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I&rsquo;ve uploaded a package for distributed locks. It&rsquo;s called <a href="https://github.com/flowerinthenight/dlock">dlock</a>. At the moment, it supports using Kubernetes&rsquo; LeaseLock object and Redis. You might find it useful.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-07-08-package-distributed-locks/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-07-08-package-distributed-locks/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[dlock - package for distributed locks]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>So far, I&rsquo;ve been posting some techy stuff here and there but being a CTO of a relatively small, Japan-based startup for about three years now, I thought I&rsquo;d share some of my experiences along the way. But first off, a little bit of context: the company I work for, <a href="https://alphaus.cloud/">Alphaus Cloud</a> is fairly small; about 10 engineers scattered across three countries, although at one point, we hit at around 35. It started around 2015, did three product pivots, three rounds of funding under two CEOs. At the moment, we operate within the Cloud FinOps (financial operations) segment of the market. As for myself, I am what you would consider an &lsquo;accidental CTO&rsquo;, a term I came across from <a href="https://cto.academy/diary-of-an-accidental-cto-part-1/">CTO Academy</a>, and a term I quite like: i.e. &ldquo;someone who arrived in the CTO role ahead of schedule and is grappling with new challenges and very steep learning curve&rdquo;. You can call it luck, although that would be relative, depending on one&rsquo;s interpretation. Also, Japanese is not my native tongue, although I think I can hold my own in day-to-day conversations, nor is English, but I think I&rsquo;m fairly proficient at it. And even though the company is trying to expand its operations outside of Japan, it is still inherently Japanese as far as business operations are concerned: the CEO/COO, sales, customer success teams are Japanese, investors are Japanese, and majority of our clients are also Japanese companies.</p>
<p>The CTO role in such a setup is quite unclear. Even though I had some experience leading tech teams in the past, nothing could have prepared me for this role. For one, my blunders are now more costly. My decisions now affect multiple teams, not just the engineering team. I have to undestand the business side of the company. I need to understand company financials. My &lsquo;soft skills&rsquo; now matter more than ever; people, relationships, empathy, politics, the lot: they&rsquo;re probably more difficult, and exhausting, than the technology part of my role. With that said though, overall, I&rsquo;m enjoying it so far. There&rsquo;s a certain charm to it that I can&rsquo;t really explain; I thought I wouldn&rsquo;t like it at first, me being an introvert and all, but the challenges are instructional and character-building enough that I welcome, sort of, the stress associated with it.</p>
<p>My goal in this series is to share some of my experiences from this side of the world in the hopes that it will help others gain some perspective. Mind you, this is the internet, and these are just my opinions, take them with a pinch of salt. And finally, I&rsquo;m still not sure how to make this series more accessible from the blog. The &rsquo;tags&rsquo; section is probably the faster way to search for it for now. Maybe I&rsquo;ll provide a dedicated page in the future, who knows, we&rsquo;ll see.</p>
<p>Alright, that&rsquo;s it. See you in the next one.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-09-28-cto-diaries-intro/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-09-28-cto-diaries-intro/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[CTO Diaries #1: Introduction]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>It took me a while to make this work. I hope this will help someone out there who also is struggling with the same problem.</p>
<p>We use DigiCert as our SSL certificate provider. The package I received contained three files:</p>
<ul>
<li>a keyfile, filename.key</li>
<li>a certificate file, filename.crt</li>
<li>an intermediate certificate file, DigiCertCA.crt</li>
</ul>
<p>I had to combine the two certificate files into a single file. I didn&rsquo;t really check the order but I appended the intermediate certificate to my certificate file. Something like this:</p>
<p>{% highlight shell %}
$ cp filename.crt tls.crt
$ cat DigiCertCA.crt &raquo; tls.crt
$ cp filename.key tls.key
$ kubectl create secret tls mytls &ndash;key tls.key &ndash;cert tls.crt
{% endhighlight %}</p>
<p>I was able to successfully use the secret in a GCE Ingress:</p>
<p>{% highlight ruby %}
apiVersion: extensions/v1beta1
kind: Ingress
&hellip;
spec:
tls:</p>
<ul>
<li>secretName: mytls
backend:
serviceName: myservice
servicePort: 80
&hellip;
{% endhighlight %}</li>
</ul>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-02-20-k8s-tls-digicert/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-02-20-k8s-tls-digicert/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Creating a Kubernetes TLS secret using certificates from DigiCert]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>As of this writing, Torguard&rsquo;s desktop app still doesn&rsquo;t support Wireguard out of the box. I&rsquo;m using Ubuntu 19.10 for testing.</p>
<p>If you haven&rsquo;t installed Wireguard yet, you can refer to the installation instructions <a href="https://www.wireguard.com/install/">here</a>. In my case, it was:</p>
<p>{% highlight shell %}
$ sudo apt install wireguard
{% endhighlight %}</p>
<p>Next, you need to login to your Torguard client area, go to Tools &ndash;&gt; Enable Wireguard Access. Select a location (in my case, I chose Asia-Singapore2) then click &lsquo;Enable Wireguard&rsquo;. You will be presented with an option to download the generated config file (in my case Asia-Singapore2.conf). Download it and save it to /etc/wireguard/.</p>
<p>To enable the VPN connection, run:</p>
<p>{% highlight shell %}</p>
<h1 id="the-last-bit-should-correspond-to-the-filename-of-your-config-file-without-the-conf">The last bit should correspond to the filename of your config file without the &lsquo;.conf&rsquo;,</h1>
<h1 id="in-my-case-asia-singapore2">in my case &lsquo;Asia-Singapore2&rsquo;</h1>
<p>$ sudo wg-quick up Asia-Singapore2</p>
<h1 id="confirm-with">Confirm with:</h1>
<p>$ sudo wg</p>
<h1 id="if-no-issues-you-can-check-your-public-ip-with">If no issues, you can check your public IP with:</h1>
<p>$ curl ipecho.net/plain; echo
{% endhighlight %}</p>
<p>Finally, to disconnect, run:</p>
<p>{% highlight shell %}
$ sudo wg-quick down Asia-Singapore2
{% endhighlight %}</p>
<p>That&rsquo;s it.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-03-25-torguard-wireguard-ubuntu/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-03-25-torguard-wireguard-ubuntu/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Connecting to Torguard VPN using Wireguard from Ubuntu]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is a bit of a departure from my usual golang/cloud-related ramblings. I posted an open-source <a href="https://github.com/flowerinthenight/windows-camera-class-filter-driver">camera class filter driver</a> for Windows ages ago hoping that it would help someone working on a similar project. If you are familiar with this type of driver, you probably know that it&rsquo;s not that straightforward to write mainly due to it being generally undocumented. A lot of reverse engineering has been done to write this driver. Anyway, recently, someone pointed out to me that it&rsquo;s been discussed in <a href="https://www.osronline.com/showthread.cfm?link=288736">this forum post</a>. So if you&rsquo;re working on a similar project, give it a whirl, and if you find some issues, I would appreciate it if you could submit a PR for fixes. Thanks.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-04-30-camera-class-filter-driver/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-04-30-camera-class-filter-driver/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Camera Class Filter Driver for Windows]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Before, I uploaded an example on how to handle lengthy processing of PubSub subscription messages in <a href="https://github.com/flowerinthenight/gcp-pubsub-lengthy-consume">GitHub</a>. This time, it&rsquo;s for AWS SQS. Have a look at the sample code <a href="https://github.com/flowerinthenight/sqs-lengthy-consume">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-10-05-aws-sqs-lengthy-process/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-10-05-aws-sqs-lengthy-process/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[AWS SQS lengthy message processing]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>As of this writing, GCP doesn&rsquo;t have an option to create <a href="https://cloud.google.com/spanner/">Spanner</a> backups automatically. This could be available when you&rsquo;re reading this in the future. At the moment, however, if you&rsquo;re using Kubernetes, you can utilize <a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">CronJob</a> to do a scheduled backup.</p>
<p>Here&rsquo;s a sample CronJob deployment that uses <code>gcloud</code> to create the backups. First, you need to create a service account that has permissions to create Spanner backups. Once you have downloaded the JSON file for the service account, store it as a Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/secret/">Secret</a>.</p>
<p>{% highlight shell %}
$ kubectl create secret generic spannerbackup-keyfile &ndash;from-file svcacct.json
{% endhighlight %}</p>
<p>Make sure to update some of the information below as required, such as, name of the backup, instance name, database name, expiration date, etc. The example below uses the backup name <code>autobackup-yyyymmddthhmmssutc</code> format with a 3-day backup expiration.</p>
<p>{% highlight yaml %}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
name: spannerbackup
spec:
concurrencyPolicy: Forbid
# Run every day @ 2:30am JST (below is UTC)
schedule: &ldquo;30 17 * * *&rdquo;
jobTemplate:
spec:
template:
spec:
containers:
- name: spannerbackup
image: google/cloud-sdk:307.0.0-slim
command: [&quot;/bin/bash&quot;]
args: [&quot;-c&quot;, &ldquo;NAME=autobackup-$(date +%Y%m%dT%H%M%S%Z | awk &lsquo;{print tolower($0)}&rsquo;); EXP=$(date -u -d &lsquo;+3 day&rsquo; +%FT%TZ); gcloud auth activate-service-account &ndash;key-file $GOOGLE_APPLICATION_CREDENTIALS &amp;&amp; gcloud spanner backups create $NAME &ndash;instance=<instancename> &ndash;database=<dbname> &ndash;expiration-date=$EXP &ndash;async&rdquo;]
env:
- name: GET_HOSTS_FROM
value: dns
- name: GOOGLE_APPLICATION_CREDENTIALS
value: /etc/spannerbackup/svcacct.json
volumeMounts:
- name: keyfile
mountPath: &ldquo;/etc/spannerbackup&rdquo;
readOnly: true
restartPolicy: OnFailure
volumes:
- name: keyfile
secret:
secretName: spannerbackup-keyfile
{% endhighlight %}</p>
<p>Finally, deploy to k8s.</p>
<p>{% highlight shell %}</p>
<h1 id="assuming-above-file-is-saved-as-backupyaml">Assuming above file is saved as <code>backup.yaml</code></h1>
<p>$ kubectl create -f backup.yaml
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-09-11-autobackup-spanner-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-09-11-autobackup-spanner-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Automate Spanner backup using Kubernetes CronJob]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I use <a href="https://github.com/vim/vim">vim</a> with <a href="https://github.com/fatih/vim-go">vim-go</a> as my main editor for Go-based projects (and for anything else, really). Recently, I&rsquo;ve upgraded to Go1.11 and my autocompletion stopped working. I know <code>vim-go</code> uses <a href="https://github.com/mdempsky/gocode">gocode</a> as it&rsquo;s autocompletion engine but since <code>vim-go</code>&rsquo;s <code>:GoInstallBinaries</code> command handled the installation for me, I didn&rsquo;t really have to think about it. Fortunately, a quick update to my <a href="https://github.com/flowerinthenight/.files/blob/master/vimrc">vimrc</a> file did the trick for me. I just had to add <code>Plugin 'mdempsky/gocode', {'rtp': 'vim/'}</code> to my <code>vimrc</code> (I use <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a>) and run <code>:PluginInstall</code> again. Works a treat.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-09-20-vimgo-go111-gocode/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-09-20-vimgo-go111-gocode/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Autocompletion with gocode and vim-go in Go1.11]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>This post is specifically for the autogenerated <a href="https://github.com/google/google-api-go-client">Google APIs Client for Go</a>. I haven&rsquo;t tried the other <a href="https://github.com/GoogleCloudPlatform/google-cloud-go">Google Cloud Library for Go</a> since it didn&rsquo;t have the compute library I needed.</p>
<p>You can use the <a href="https://godoc.org/golang.org/x/oauth2"><code>golang.org/x/oauth2/google</code></a> library for authentication with this library. It can work with <a href="https://cloud.google.com/compute/docs/access/service-accounts">service accounts</a> as well, which is what I am using at the moment.</p>
<h3 id="using-the-google_application_credentials-environment-variable">Using the GOOGLE_APPLICATION_CREDENTIALS environment variable</h3>
<p>After you have created your service account, downloaded the JSON file, and saved it in some location, you can set the <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable with the path of your service account JSON file.</p>
<p>{% highlight shell %}</p>
<h1 id="sample-path-is-used">sample path is used</h1>
<p>$ export GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-acct.json
{% endhighlight %}</p>
<p>With that in place, the <a href="https://github.com/google/google-api-go-client#application-default-credentials-example">Application Default Credentials Example</a> sample code should just work for you.</p>
<h3 id="using-the-service-account-file-directly-to-create-the-client">Using the service account file directly to create the client</h3>
<p>It&rsquo;s all fine and good if you only use one service account file all throughout the application but if you happen to need to use a specific JSON file per call, this section is for you.</p>
<p>{% gist 5241f3cb96b9dfb9a58e77a16be159fe %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-06-09-google-api-client-go-auth/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-06-09-google-api-client-go-auth/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Authenticating Google API Client Library for Go using Service Accounts]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For self reference:</p>
<p>To authenticate the <a href="https://github.com/aws/aws-sdk-go-v2">Golang AWS SDK v2</a> using assume roles, refer to the following code snippets:</p>
<p>{% gist 33f5e03e9990abcc01203acbea178a1a %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-04-30-authenticate-aws-sdk-golang-v2/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-04-30-authenticate-aws-sdk-golang-v2/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Authenticating Go AWS SDK v2 using assume roles]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Yet another service code for Windows. This time, it&rsquo;s an ATL service. ATL services are basically the same as <a href="https://github.com/flowerinthenight/win32-base-service">traditional Windows services</a> but with some advantages.</p>
<ul>
<li>Can be started on-demand automatically by the first client call (via COM).</li>
<li>Clients can call service functions with parameters and return values using COM. In traditional services, clients normally communicate using service control codes and you need some kind of IPC (named pipes, shared memory, etc.) for bi-directional data exchange.</li>
</ul>
<p>A client console app is provided to demonstrate service function call with return value and service-to-client notification via IDispatch.</p>
<p>Check out the source code <a href="https://github.com/flowerinthenight/base-atlcom-svc">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2017-01-18-base-atl-service/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2017-01-18-base-atl-service/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[ATL service base code]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded an automation-friendly, highly-scalable, and scriptable API/generic testing tool built to run on <a href="https://kubernetes.io/">Kubernetes</a>. It&rsquo;s called <code>oops</code> and you can find the code <a href="https://github.com/flowerinthenight/oops/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-10-31-oops/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-10-31-oops/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[An automation-friendly, highly-scalable, and scriptable testing tool]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>At work, for a couple of months now, we&rsquo;ve been using <a href="https://www.getambassador.io/">Ambassador</a> as our main API gateway to our k8s services. We also have our own authorization service that uses Ambassador&rsquo;s <a href="https://www.getambassador.io/reference/services/auth-service">AuthService</a> mechanism. Recently, we&rsquo;ve had services that needed CORS support and although Ambassador has features that support the <a href="https://www.getambassador.io/reference/cors">enabling of CORS</a>, we had to update our authorization service to handle CORS-related requests. Instead of doing this, we tried adding the CORS support at the proxy level (nginx). I&rsquo;ve wrote about this topic <a href="https://flowerinthenight.com/blog/2018/03/31/access-pods-k8s">here</a> and <a href="https://flowerinthenight.com/blog/2019/01/31/nginx-basicauth-k8s">here</a>.</p>
<p>In the example below, the CORS support is added under the location <code>/svc2/</code>.</p>
<h2 id="-highlight-ruby-">{% highlight ruby %}</h2>
<p>apiVersion: v1
kind: ConfigMap
metadata:
name: serviceproxy-conf
data:
serviceproxy.conf: |
server {
listen 80;
server_name development.mobingi.com;
resolver kube-dns.kube-system.svc.cluster.local valid=10s;</p>
<pre><code>  location ~ ^/svc1/(.*)$ {
    auth_basic &quot;mobingi&quot;;
    auth_basic_user_file /etc/serviceproxy/htpasswd;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $host;
    rewrite ^/svc1/(.*)$ /$1 break;
    proxy_pass &quot;http://svc1.default.svc.cluster.local&quot;;
    proxy_http_version 1.1;
  }

  location ~ ^/svc2/(.*)$ {
    # Ref: https://enable-cors.org/server_nginx.html
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
      # Custom headers and headers various browsers *should* be OK with but aren't.
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
      # Tell client that this pre-flight info is valid for 20 days.
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $host;
    rewrite ^/svc2/(.*)$ /$1 break;
    proxy_pass &quot;http://svc2.default.svc.cluster.local&quot;;
    proxy_http_version 1.1;
  }

  # root health check requirement in GKE ingress
  location / {
    return 200 'healthy\n';
  }
}

{..redacted..}
</code></pre>
<p>{% endhighlight %}</p>
<p>With that said, be aware of the <a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/">potential problems of using if in nginx</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2019-05-26-cors-nginx-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2019-05-26-cors-nginx-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Adding CORS support to nginx proxy in Kubernetes]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<p>{% gist 8da2984e90dd4a3a26ff645e6a37f275 %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-21-log-prefix-fname-go/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-21-log-prefix-fname-go/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Add function name prefix to log.Println in Go]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>At <a href="https://mobingi.com">Mobingi</a>, when we are developing services that run on Kubernetes, we generally use <a href="https://github.com/kubernetes/minikube">Minikube</a> or <a href="https://blog.docker.com/2018/01/docker-mac-kubernetes/">Kubernetes in Docker for Mac</a>. We also have a cluster that runs on <a href="https://cloud.google.com/kubernetes-engine/">GKE</a> that we use for development. In this post, I will share how we access some of the services that are running on our development cluster.</p>
<h2 id="using-kubectl-port-forward">Using kubectl port-forward</h2>
<p>Using <a href="https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/">kubectl port-forward</a> is probably the cheapest and the most straightforward. For example, if I want to access a cluster service <code>svc1</code> through my localhost, I use <code>kubectl port-forward</code> like this:</p>
<p>{% highlight shell %}
$ kubectl get pod
NAME                            READY     STATUS    RESTARTS   AGE
svc1-66dd787767-d6b22           2/2       Running   0          7d
svc1-66dd787767-ks92f           2/2       Running   0          7d
svc2-578786c554-rlw2w           2/2       Running   0          7d</p>
<h1 id="this-will-connect-to-the-first-pod-we-have-two-available">This will connect to the first pod (we have two available):</h1>
<p>$ kubectl port-forward <code>kubectl get pod --no-headers=true -o \ custom-columns=:metadata.name | grep svc1 | head -n1</code> 8080:8080
Forwarding from 127.0.0.1:8080 -&gt; 8080
{% endhighlight %}</p>
<p>The left <code>8080</code> is my local port, the right <code>8080</code> is the pod port where svc1 is running.</p>
<p>One thing to note with <code>kubectl port-forward</code> through is that it won&rsquo;t disconnect automatically even when the pod is restarted, say for example, due to an update from CI. I have to restart the command by doing a Ctrl+C and then rerun.</p>
<h2 id="exposing-the-service-using-nodeport-or-loadbalancer">Exposing the service using NodePort or LoadBalancer</h2>
<p>This part is probably the easiest to setup. You can check the details from the Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types">documentation</a>. But you have to be careful though, especially with load balancers. These are not cheap. We have gone with this route during our early Kubernetes days and we ended up with a lot of load balancers. This was when our clusters were still in AWS. In AWS, (I&rsquo;m not sure if it is still the case now) when you specify <code>LoadBalancer</code> as service type, a classic load balancer will be provisioned for your service. That means one load balancer per exposed service!</p>
<p>When we moved to GKE, we started using <a href="https://github.com/kubernetes/ingress-gce">GLBC</a> which uses an L7 load balancer via the Ingress API. This improved our costs a little bit since GLBC can support up to five backend services per load balancer using paths. The slight downside was that Ingress updates were a bit slow. It&rsquo;s not a big deal though since it&rsquo;s only in the development cluster and we use blue/green deployment in production. But still, some updates can take up to ten minutes.</p>
<h2 id="using-nginx-as-a-reverse-proxy-to-cluster-services">Using nginx as a reverse proxy to cluster services</h2>
<p>In our quest to further minimize costs, we are currently using <a href="https://www.nginx.com/">nginx</a> as our way of exposing services. We provisioned a single Ingress that points to an nginx service which serves as a reverse proxy to our cluster services. This was the cheapest for us as we only have one load balancer for all services. And updating the nginx reverse proxy service takes only a few seconds. So far, this worked for us with no significant problems for the past couple of months.</p>
<p>Here&rsquo;s an example of an nginx reverse proxy service:</p>
<p>{% highlight ruby %}
apiVersion: v1
kind: ConfigMap
metadata:
name: serviceproxy-conf
data:
serviceproxy.conf: |
server {
listen 80;
server_name development.mobingi.com;
resolver kube-dns.kube-system.svc.cluster.local valid=10s;</p>
<pre><code>    location ~ ^/svc1/(.*)$ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        rewrite ^/svc1/(.*)$ /$1 break;
        proxy_pass &quot;http://svc1.default.svc.cluster.local&quot;;
        proxy_http_version 1.1;
    }

    location ~ ^/svc2/(.*)$ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        rewrite ^/svc2/(.*)$ /$1 break;
        proxy_pass &quot;http://svc2.default.svc.cluster.local&quot;;
        proxy_http_version 1.1;
    }

    # root health check requirement in GKE ingress
    location / {
        return 200 'healthy\n';
    }
}
</code></pre>
<hr>
<p>apiVersion: apps/v1
kind: Deployment
metadata:
name: serviceproxy
spec:
replicas: 1
revisionHistoryLimit: 3
selector:
matchLabels:
app: serviceproxy
template:
metadata:
labels:
app: serviceproxy
spec:
containers:
- name: nginx
image: nginx:1.13
ports:
- containerPort: 80
volumeMounts:
- name: config-volume
mountPath: /etc/nginx/conf.d/
volumes:
- name: config-volume
configMap:
name: serviceproxy-conf
items:
- key: serviceproxy.conf
path: serviceproxy.conf</p>
<hr>
<p>apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
name: serviceproxy-hpa
namespace: default
spec:
scaleTargetRef:
apiVersion: apps/v1
kind: Deployment
name: serviceproxy
minReplicas: 1
maxReplicas: 10
targetCPUUtilizationPercentage: 80</p>
<hr>
<p>apiVersion: v1
kind: Service
metadata:
name: serviceproxy
spec:
type: NodePort
ports:</p>
<ul>
<li>name: http
protocol: TCP
port: 80
targetPort: 80
selector:
app: serviceproxy
{% endhighlight %}</li>
</ul>
<p>In this example, all services, mainly <code>svc1</code> and <code>svc2</code>, are running in the <code>default</code> namespace. Save this as service.yaml and deploy:</p>
<p>{% highlight shell %}
$ kubectl create -f service.yaml
{% endhighlight %}</p>
<p>A sample Ingress controller for the reverse proxy service:</p>
<p>{% highlight ruby %}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
name: serviceproxy-ingress
annotations:
kubernetes.io/ingress.class: &ldquo;gce&rdquo;
spec:
tls:</p>
<ul>
<li>secretName: mobingi-tls
rules:</li>
<li>host: development.mobingi.com
http:
paths:
<ul>
<li>backend:
serviceName: serviceproxy
servicePort: 80
{% endhighlight %}</li>
</ul>
</li>
</ul>
<p>Save this as ingress.yaml and deploy:</p>
<p>{% highlight shell %}
$ kubectl create -f ingress.yaml
{% endhighlight %}</p>
<p>After everything is ready (Ingress provisioning takes some time), you should be able to access <code>svc1</code> through <code>https://development.mobingi.com/svc1/some-endpoint</code>, <code>svc2</code> through <code>https://development.mobingi.com/svc2/another-endpoint</code>, etc. Of course, you have to point your domain to your Ingress load balancer&rsquo;s IP address which you can see using the following command:</p>
<p>{% highlight shell %}
$ kubectl get ingress serviceproxy-ingress
NAME                   HOSTS                     ADDRESS          PORTS     AGE
serviceproxy-ingress   development.mobingi.com   1.2.3.4          80, 443   91d
{% endhighlight %}</p>
<p>If you&rsquo;re wondering how to setup the TLS portion, you can refer to my previous <a href="https://flowerinthenight.com/blog/2018/02/20/k8s-tls-digicert">post</a> about the very subject.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-03-31-access-pods-k8s/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-03-31-access-pods-k8s/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[Accessing services in Kubernetes]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Recently, I&rsquo;ve been working on a service that runs on a lot of VM&rsquo;s across different locations. If I have a new service build, updating all of the running instances quickly became a bit of a pain. I have to log in to every VM (in some cases through a VPN) and then do a manual upgrade. Now, there are probably tools that already exist for this type of use case but since I&rsquo;m still learning Go at the moment, I thought this would be a good exercise.</p>
<p>Basically, this is a Windows service that has an http endpoint that accepts a file upload (in this case, a new version of itself). The service then saves this file, calls the <code>MoveFileEx</code> API with the <code>MOVEFILE_DELAY_UNTIL_REBOOT</code> flag, then reboots the system. I also added a simple client (still written in Go) that will upload the file.</p>
<p>With these tools, I can now update all the running service instances with a script.</p>
<p>Full source code <a href="https://github.com/flowerinthenight/go-windows-delay-update-svc">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-09-27-windows-delay-update-service-go/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-09-27-windows-delay-update-service-go/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A Windows service with an http endpoint for uploading a new version of itself]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a tool that can sync DynamoDB tables between accounts. It&rsquo;s called <code>dysync</code> and you can find the code <a href="https://github.com/flowerinthenight/dysync/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-08-31-dysync/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-08-31-dysync/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A tool for synching DynamoDB tables between accounts]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a tool that can query DynamoDB tables. It&rsquo;s called <code>lsdy</code> and you can find the code <a href="https://github.com/flowerinthenight/lsdy/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-05-13-lsdy-dynamodb-query/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-05-13-lsdy-dynamodb-query/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A tool for querying DynamoDB]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded a yet another distributed locking library, this time, based on <a href="https://cloud.google.com/spanner/">Cloud Spanner</a> and <a href="https://cloud.google.com/spanner/docs/true-time-external-consistency">TrueTime</a> technology. It&rsquo;s called <code>spindle</code> and you can find the code <a href="https://github.com/flowerinthenight/spindle/">here</a>. Maybe it will be useful to anybody out there.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2020-12-26-spanner-distributed-lock/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2020-12-26-spanner-distributed-lock/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A Spanner-based distributed locking library]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>{% highlight powershell %}
function ZipFiles($ZipFileName, $SourceDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
$compressionLevel = [System.IO.Compression.CompressionLevel]::Optimal
[System.IO.Compression.ZipFile]::CreateFromDirectory($SourceDir, $ZipFileName, $compressionLevel, $false)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
ZipFiles -ZipFileName test.zip -SourceDir .\folder\to\zip
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-04-05-zip-function-powershell/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-04-05-zip-function-powershell/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple zip function in Powershell]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>{% highlight powershell %}
function UnzipFiles($ZipFileName, $DestDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($ZipFileName, $DestDir)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
UnzipFiles -ZipFileName .\folder\file.zip -DestDir .\destination
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-04-06-unzip-function-powershell/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-04-06-unzip-function-powershell/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple unzip function in Powershell]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Personal reference:</p>
<p>{% gist 1ea9a6b71bc9d4a6e5a269e63028d046 %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-13-signal-handler-linux-cpp/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-13-signal-handler-linux-cpp/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple signal handler in C/C++ (Linux)]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>For personal reference:</p>
<p>{% gist 8fae6c9a56df98b8ff96f117a7c9f341 %}</p>
<p>Full source code <a href="https://github.com/flowerinthenight/win-restclientserver-console">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-08-24-rest-client-server-c%23/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-08-24-rest-client-server-c%23/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple REST client/server console app in C#]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>A couple of days ago, I was working on a powershell-based script for mstest automation and I needed to call <code>vsdevcmd.bat</code> from Visual Studio&rsquo;s tools folder.</p>
<p>{% highlight powershell %}
function Invoke-Environment([Parameter(Mandatory=1)][string]$Command, [switch]$Output, [switch]$Force)
{
$stream = if ($Output) { ($temp = [IO.Path]::GetTempFileName()) } else { &rsquo;nul&rsquo; }
$operator = if ($Force) {&rsquo;&amp;&rsquo;} else {&rsquo;&amp;&amp;'}</p>
<pre><code>foreach($_ in cmd /c &quot; $Command &gt; `&quot;$stream`&quot; 2&gt;&amp;1 $operator SET&quot;)
{
    if ($_ -match '^([^=]+)=(.*)')
    {
        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
    }
}

if ($Output)
{
    Get-Content -LiteralPath $temp
    Remove-Item -LiteralPath $temp
}
</code></pre>
<p>}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
Invoke-Environment &lsquo;&ldquo;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat&rdquo;&rsquo;
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-05-06-import-environment-powershell/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-05-06-import-environment-powershell/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple Powershell function to import an environment]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Personal reference:</p>
<p>{% gist 66dd730db7f15d4b79b2523d8a03a468 %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-06-13-folder-file-watcher-powershell/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-06-13-folder-file-watcher-powershell/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple folder/file watcher in Powershell]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>A couple of days ago, I uploaded a generic service in GitHub that has a feature of updating itself. Check out the post <a href="http://flowerinthenight.com/blog/2016/09/27/windows-delay-update-service-go">here</a>. Today, I uploaded the actual service I&rsquo;m using in our CI environment, excluding the configuration file.</p>
<p>Check out the source code <a href="https://github.com/flowerinthenight/holly">here</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-10-07-cron-like-windows-service-go/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-10-07-cron-like-windows-service-go/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A simple cron-like Windows service]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>The only options for updating modules that I&rsquo;m aware so far are a) <code>go get -u all</code>, and b) specific modules, i.e. <code>go get -u domain.com/module[@v1.2.3]</code>. For problematic ones, my only option is b), which is a bit time consuming. There must be some other way out there that I&rsquo;m not aware of but at the moment, I use this simple command:</p>
<p>{% highlight shell %}
$ cat go.mod | grep -i &lsquo;github&rsquo; | grep -i -v &lsquo;indirect&rsquo; | awk &lsquo;{print $1}&rsquo; &gt; update; <br>
while read -r v; do go get -u $v; done &lt; update; rm update
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2021-06-30-hacky-way-update-go-modules/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2021-06-30-hacky-way-update-go-modules/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A hacky way to update problematic Go modules]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>I uploaded an example of a golang-based monorepo in <a href="https://github.com/flowerinthenight/golang-monorepo">GitHub</a>. This is a stripped down version of what we have <a href="https://twitter.com/mobingi">@mobingi</a>. If you are planning to have a golang-based monorepo, please have a look.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2018-02-06-golang-monorepo/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2018-02-06-golang-monorepo/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[A golang-based monorepo example]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Basically, 2 steps:</p>
<p>Create a C++ Windows Runtime Component (dll) that will use the ETW header file.
Reference the WinRT DLL to C# project.</p>
<h1 id="winrt-dll">WinRT DLL</h1>
<p>My logging class looks like this:</p>
<p>{% highlight cpp %}
public ref class TraceCore sealed
{
private:
TraceCore();
~TraceCore();</p>
<pre><code>static TraceCore^ m_Instance;
</code></pre>
<p>public:
static property TraceCore^ Instance
{
TraceCore^ get()
{
if (m_Instance == nullptr)
{
m_Instance = ref new TraceCore();
}</p>
<pre><code>        return m_Instance;
    }
}

void Verbose(Platform::String^ mod, Platform::String^ file, Platform::String^ func, Platform::String^ m);
</code></pre>
<p>};
{% endhighlight %}</p>
<p>And heres the implementation:</p>
<p>{% highlight cpp %}
#include &ldquo;pch.h&rdquo;
#include &ldquo;TraceCore.h&rdquo;</p>
<p>using namespace LibRTWrapperETW;
using namespace Platform;</p>
<p>#include &ldquo;jytrace.h&rdquo;</p>
<p>TraceCore^ TraceCore::m_Instance = nullptr;</p>
<p>TraceCore::TraceCore()
{
EventRegisterJyTrace();
}</p>
<p>TraceCore::~TraceCore()
{
EventUnregisterJyTrace();
}</p>
<p>void TraceCore::Verbose(String^ mod, String^ file, String^ func, String^ m)
{
EventWriteSimple(mod-&gt;Data(), file-&gt;Data(), func-&gt;Data(), L&quot;Trace&quot;, m-&gt;Data());
}
{% endhighlight %}</p>
<h1 id="wrapper-class">Wrapper Class</h1>
<p>Just like in part 5, I wrapped the C++ bits to a C# class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes:</p>
<p>{% highlight csharp %}
public static class TraceCoreWrapper
{
public static void VerboseCore(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
TraceCore.Instance.Verbose(&ldquo;CORE_RT [&rdquo; + Environment.CurrentManagedThreadId + &ldquo;]&rdquo;, Path.GetFileName(srcFile), memberName, m);
}
}
{% endhighlight %}</p>
<p>And finally, the actual logging in C#:</p>
<p>{% highlight csharp %}
TraceCoreWrapper.VerboseCore(&ldquo;Hello from UApp (CS) world!&rdquo;);
{% endhighlight %}</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-22-etw-part6/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-22-etw-part6/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[[Part 6] Logging with Universal Apps]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>I generated a C# logging class using this command:</p>
<p>{% highlight shell %}
mc -css &lt;Namespace_here&gt; jytrace.man
{% endhighlight %}</p>
<p>So far, most of my event templates use an ANSI string data type which (I believe) is not supported by C#. As you can see in part 1, I use ANSI data type for my File and Function fields so that I can use <code>__FILE__</code> and <code>__FUNCTION__</code> as inputs in C++. Thats why I added a new event template with all fields using UNICODE data types. Again, you can refer to the whole package here for reference.</p>
<p>To use the logging class, I added the generated file to my project. I also added a wrapper class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes in C#.</p>
<p>{% highlight csharp %}
public static bool Verbose(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
return JyTrace.ProviderJyTrace.EventWriteSimple(&ldquo;ETWTest&rdquo;, Path.GetFileName(srcFile), memberName, &ldquo;Trace:&rdquo;, m);
}
{% endhighlight %}</p>
<p>The actual log call:</p>
<p>{% highlight csharp %}
TraceCore.Verbose(&ldquo;Hello from CS!&rdquo;);
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/22/etw-part6">part 6</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-19-etw-part5/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-19-etw-part5/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[[Part 5] Logging with C# applications]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="getting-the-logs">Getting the logs</h1>
<p>Now that I have my modules spitting out logs for me, it&rsquo;s time to actually consume (or view) them. Most of the time, I use <code>MFTrace</code> and <code>logman</code> tools.</p>
<h1 id="mftrace">MFTrace</h1>
<p>Although <code>MFTrace</code> is primarily a tool for generating logs for Media Foundation apps, it is a great tool for viewing ETW logs in general as well. It is included in the MS SDK.</p>
<p>To view logs in real time, I use this command in either Powershell or command line:</p>
<p>{% highlight shell %}
mftrace -c config.xml
{% endhighlight %}</p>
<p>To stop the trace collection, press <code>CTRL+C</code>.</p>
<h1 id="logman">logman</h1>
<p><code>logman</code> is a very powerful builtin performance counter and event trace log tool from Microsoft. For more information, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490956.aspx">here</a>.</p>
<p>You can use <code>logman</code> as alternative to <code>MFTrace</code>.</p>
<h2 id="start-tracing">Start tracing</h2>
<p>{% highlight shell %}
logman start <name> -p &lt;provider_guid_or_name&gt; <kw> <level> -o &lt;output.etl&gt; -ets
{% endhighlight %}</p>
<h3 id="examples">Examples</h3>
<p>{% highlight shell %}
logman start lms -p {3A8FD7D2-CAB3-455D-A8E5-9E1741365FEB} 0x1 win:Verbose -o c:\output.etl -ets
logman start lms -p MyProviderName 0x3 win:Informational -o c:\output.etl -ets
logman start lms -p {277c604b-1962-47fa-9307-7ce0855dfea6} 0xffffffffffffffff 0xff -o c:\output.etl -ets
{% endhighlight %}</p>
<h2 id="stop-tracing">Stop tracing</h2>
<p>{% highlight shell %}
logman stop <name> -ets
{% endhighlight %}</p>
<h3 id="examples-1">Examples</h3>
<p>{% highlight shell %}
logman stop lms -ets
{% endhighlight %}</p>
<h1 id="collecting-etw-traces-from-testproduction-systems">Collecting ETW traces from test/production systems</h1>
<p>To collect ETW trace logs from test/production systems, manifest file and message/resource file need not be registered.</p>
<p>{% highlight shell %}
mftrace -c config.xml -o c:\output.etl
{% endhighlight %}</p>
<p><code>c:\output.etl</code> is just an example. You can use any location and any filename as long as the extension is .etl. The output .etl file can only be read on a system where the manifest file and the resource/message file are registered. To read the traces:</p>
<p>{% highlight shell %}
tracerpt -y output.etl
{% endhighlight %}</p>
<p>The default readable output file that contains all the trace information will be <code>dumpfile.xml</code>. A <code>summary.txt</code> file will also be generated. For more information about <code>tracerpt</code>, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490959.aspx">here</a>.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/19/etw-part5">part 5</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-07-etw-part4/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-07-etw-part4/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[[Part 4] Log collection]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>If you remember in part 2, we compiled our manifest file with</p>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>and we got a header file as one of the outputs. We just have to include that header file to our sources and we are good to go.</p>
<p>{% highlight cpp %}
#include &hellip;
#include &ldquo;&lt;manifest_file&gt;.h&rdquo;</p>
<p>int main(&hellip;)
{
EventRegister&lt;provider_name_in_manifest&gt;();
&hellip;
CreateFile(&hellip;);
// Example of using the LastError event in our manifest file
EventWriteLastError(L&quot;THIS_EXE&quot;, <strong>FILE</strong>, <strong>FUNC</strong>, L&quot;CreateFile&quot;, GetLastError());
&hellip;
EventUnregister&lt;provider_name_in_manifest&gt;();
}
{% endhighlight %}</p>
<h1 id="notes">Notes</h1>
<ul>
<li>Any module can use the ETW provider, be it dll or exe, simultaneously. But you can also create a provider for each module if you prefer.</li>
<li>For a dll, you can call the <code>EventRegister()</code> inside your <code>DllMain</code> -&gt; <code>DLL_PROCESS_ATTACH</code> and your <code>EventUnregister()</code> in <code>DLL_PROCESS_DETACH</code>.</li>
</ul>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/07/etw-part4">part 4</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-03-etw-part3/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-03-etw-part3/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[[Part 3] Logging with C/C++ applications]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="compiling-the-manifest-file">Compiling the manifest file</h1>
<p>This is how I compiled my manifest file.</p>
<ul>
<li>Open Visual Studio command prompt.</li>
<li>Compile manifest file.</li>
</ul>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>When successful, output files are:</p>
<p>{% highlight shell %}
<filename>.h
<filename>.rc
<filename>TEMP.BIN
MSG00001.bin
{% endhighlight %}</p>
<h1 id="creating-the-message-resource-dll">Creating the message resource DLL</h1>
<p>I like to create a separate dll just for the manifest file resource although you can also add the .rc file to any of your existing dll or exe.</p>
<h2 id="compile-rc-to-res">Compile .rc to .res</h2>
<p>{% highlight shell %}
rc <filename>.rc
{% endhighlight %}</p>
<h2 id="create-dll-from-res">Create .dll from .res</h2>
<p>{% highlight shell %}
link -dll -noentry -out:<out>.dll <filename>.res
{% endhighlight %}</p>
<h1 id="register-the-manifest-to-the-system-optional">Register the manifest to the system (optional)</h1>
<p>I always register the manifest file on my development systems. As for client systems, its up to you. I dont.</p>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil im &lt;manifest_file&gt;.man /rf:&ldquo;full_path_to_resource_dll&rdquo; /mf:&ldquo;full_path_to_resource_dll&rdquo;
{% endhighlight %}</p>
<h1 id="remove-the-manifest-from-the-system">Remove the manifest from the system</h1>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/03/etw-part3">part 3</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-02-etw-part2/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-02-etw-part2/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[[Part 2] Manifest file compilation and setup]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
        <entry>
            
            
            
            
            
            
            

            

            

            

            

            
                
            

            

            
                <content type="html"><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Ive been using ETW as my go-to logging mechanism for Windows development. I will be sharing how I setup my environment here.</p>
<h1 id="creating-the-manifest-file-man">Creating the manifest file (.man)</h1>
<p>I use <code>ecmangen.exe</code> to create my manifest file. This tool is included in the SDK. I have Visual Studio 2015 installed on a Win10 64-bit machine, and its location is <code>C:\Program Files (x86)\Windows Kits\10\bin\x64\</code>. It looks something like this (my completed manifest):</p>
<p>{% include image.html url=&quot;../../../../images/etw1.png&quot; %}</p>
<p>The red strip is the manifest file name, or my ETW provider name.</p>
<p>I started by right-clicking Events Section -&gt; New -&gt; Provider, then gave it a name. Then prepended the string Provider to the existing name for the Symbol, auto-generated the GUID, left the other fields as blank, then Save.</p>
<h1 id="setting-up-keywords">Setting up Keywords</h1>
<p>{% include image.html url=&quot;../../../../images/etw2.png&quot; %}</p>
<p>Keywords basically is a mask for filtering log outputs. Mine is just a simple logging mechanism so I have only two keywords. Im not even using <code>KeywordFunctionEntryExit</code> (set to 0x1) that much nowadays so <code>KeywordGeneric</code> (set to 0x2) for me is enough. With this, I have the option later to output only the logs with the keyword <code>KeywordFunctionEntryExit</code> or <code>KeywordGeneric</code>, or both.</p>
<h1 id="setting-up-templates">Setting up Templates</h1>
<p>{% include image.html url=&quot;../../../../images/etw3.png&quot; %}</p>
<p>Templates are, well, templates for the events (in this context, a log is basically an event). Templates will contain the fields (with data types) I want to include in my log. My goal was to have logs with a format of <code>[module_name: src_file_name:  function_name] key: value</code>, where <code>key</code> would be any label, say, variable name, and <code>value</code> as, well, any value, be it int or bool, or last error, etc. I thought that this format is generic enough for me to log any information from my code.</p>
<p>All events require a template (whether your template or default, which I admit I have never used). Multiple events can use a single template.</p>
<h1 id="setting-up-events">Setting up Events</h1>
<p>{% include image.html url=&quot;../../../../images/etw4.png&quot; %}</p>
<p>Lastly, the events themselves. From the image above, I defined quite a number of events. If you noticed, my <code>LastError</code> event (which I use to log the <code>GetLastError()</code> API) specified the template <code>TemplateKeyValueLastError</code> and the keyword <code>KeywordGeneric</code>.</p>
<p>When the manifest file is compiled, all the defined events by default (can be modified during compilation) will generate a logging API with the name <code>EventWrite&lt;event_name&gt;</code>, which in the case of the highlighted one, <code>EventWriteLastError()</code>.</p>
<p>Another thing to point out is the <code>Message</code>. The <code>%[number]</code> corresponds to the fields defined in the template used. First field will be %1, second field will be %2, and so on and so on.</p>
<p>Lastly, save your manifest file. The xml file will have a <code>.man</code> extension.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/02/etw-part2">part 2</a>.</p>
]]></content>
            

            <id>tag:localhost:1313,0001-01-01:/blog/2016-03-01-etw-part1/</id>

            
                

                
                    

                    <link href="http://localhost:1313/blog/2016-03-01-etw-part1/" rel="alternate" type="text/html"/>
                
            

            

            

            
                <rights type="html"><![CDATA[© Flowerinthenight, 2016-2024. All rights reserved.]]></rights>
            

            

            <title type="html"><![CDATA[[Part 1] How I set up ETW for logging (native, .NET, Metro and UApp)]]></title>
            <updated>0001-01-01T00:00:00Z</updated>
        </entry>
    
</feed>
