













    
        
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="http://localhost:1313/categories/code/atom.xml" rel="self" type="application/atom+xml"/>
            
        
            

            
                
            

            
                <link href="http://localhost:1313/categories/code/" rel="alternate" type="text/html"/>
            
        
            

            

            
                <link href="http://localhost:1313/categories/code/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© Flowerinthenight, 2016-2024. All rights reserved.</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        
            <lastBuildDate>2016-11-28 00:00:00 -0800 PST</lastBuildDate>
        

        <link>http://localhost:1313/categories/code/</link>

        
            <managingEditor>example@example.com (John Doe)</managingEditor>
        

        <title>Code · Categories · About</title>

        
            <webMaster>example@example.com (John Doe)</webMaster>
        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>{% highlight powershell %}
function ZipFiles($ZipFileName, $SourceDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
$compressionLevel = [System.IO.Compression.CompressionLevel]::Optimal
[System.IO.Compression.ZipFile]::CreateFromDirectory($SourceDir, $ZipFileName, $compressionLevel, $false)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
ZipFiles -ZipFileName test.zip -SourceDir .\folder\to\zip
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-05-zip-function-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-05-zip-function-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple zip function in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>{% highlight powershell %}
function UnzipFiles($ZipFileName, $DestDir)
{
Add-Type -Assembly System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($ZipFileName, $DestDir)
}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
UnzipFiles -ZipFileName .\folder\file.zip -DestDir .\destination
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-04-06-unzip-function-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-04-06-unzip-function-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple unzip function in Powershell</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>A couple of days ago, I was working on a powershell-based script for mstest automation and I needed to call <code>vsdevcmd.bat</code> from Visual Studio&rsquo;s tools folder.</p>
<p>{% highlight powershell %}
function Invoke-Environment([Parameter(Mandatory=1)][string]$Command, [switch]$Output, [switch]$Force)
{
$stream = if ($Output) { ($temp = [IO.Path]::GetTempFileName()) } else { &rsquo;nul&rsquo; }
$operator = if ($Force) {&rsquo;&amp;&rsquo;} else {&rsquo;&amp;&amp;'}</p>
<pre><code>foreach($_ in cmd /c &quot; $Command &gt; `&quot;$stream`&quot; 2&gt;&amp;1 $operator SET&quot;)
{
    if ($_ -match '^([^=]+)=(.*)')
    {
        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
    }
}

if ($Output)
{
    Get-Content -LiteralPath $temp
    Remove-Item -LiteralPath $temp
}
</code></pre>
<p>}
{% endhighlight %}</p>
<p>To use the function:</p>
<p>{% highlight powershell %}
Invoke-Environment &lsquo;&ldquo;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat&rdquo;&rsquo;
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-05-06-import-environment-powershell/</guid>

                
                    <link>http://localhost:1313/blog/2016-05-06-import-environment-powershell/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>A simple Powershell function to import an environment</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Basically, 2 steps:</p>
<p>Create a C++ Windows Runtime Component (dll) that will use the ETW header file.
Reference the WinRT DLL to C# project.</p>
<h1 id="winrt-dll">WinRT DLL</h1>
<p>My logging class looks like this:</p>
<p>{% highlight cpp %}
public ref class TraceCore sealed
{
private:
TraceCore();
~TraceCore();</p>
<pre><code>static TraceCore^ m_Instance;
</code></pre>
<p>public:
static property TraceCore^ Instance
{
TraceCore^ get()
{
if (m_Instance == nullptr)
{
m_Instance = ref new TraceCore();
}</p>
<pre><code>        return m_Instance;
    }
}

void Verbose(Platform::String^ mod, Platform::String^ file, Platform::String^ func, Platform::String^ m);
</code></pre>
<p>};
{% endhighlight %}</p>
<p>And heres the implementation:</p>
<p>{% highlight cpp %}
#include &ldquo;pch.h&rdquo;
#include &ldquo;TraceCore.h&rdquo;</p>
<p>using namespace LibRTWrapperETW;
using namespace Platform;</p>
<p>#include &ldquo;jytrace.h&rdquo;</p>
<p>TraceCore^ TraceCore::m_Instance = nullptr;</p>
<p>TraceCore::TraceCore()
{
EventRegisterJyTrace();
}</p>
<p>TraceCore::~TraceCore()
{
EventUnregisterJyTrace();
}</p>
<p>void TraceCore::Verbose(String^ mod, String^ file, String^ func, String^ m)
{
EventWriteSimple(mod-&gt;Data(), file-&gt;Data(), func-&gt;Data(), L&quot;Trace&quot;, m-&gt;Data());
}
{% endhighlight %}</p>
<h1 id="wrapper-class">Wrapper Class</h1>
<p>Just like in part 5, I wrapped the C++ bits to a C# class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes:</p>
<p>{% highlight csharp %}
public static class TraceCoreWrapper
{
public static void VerboseCore(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
TraceCore.Instance.Verbose(&ldquo;CORE_RT [&rdquo; + Environment.CurrentManagedThreadId + &ldquo;]&rdquo;, Path.GetFileName(srcFile), memberName, m);
}
}
{% endhighlight %}</p>
<p>And finally, the actual logging in C#:</p>
<p>{% highlight csharp %}
TraceCoreWrapper.VerboseCore(&ldquo;Hello from UApp (CS) world!&rdquo;);
{% endhighlight %}</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-22-etw-part6/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-22-etw-part6/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 6] Logging with Universal Apps</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>I generated a C# logging class using this command:</p>
<p>{% highlight shell %}
mc -css &lt;Namespace_here&gt; jytrace.man
{% endhighlight %}</p>
<p>So far, most of my event templates use an ANSI string data type which (I believe) is not supported by C#. As you can see in part 1, I use ANSI data type for my File and Function fields so that I can use <code>__FILE__</code> and <code>__FUNCTION__</code> as inputs in C++. Thats why I added a new event template with all fields using UNICODE data types. Again, you can refer to the whole package here for reference.</p>
<p>To use the logging class, I added the generated file to my project. I also added a wrapper class so I can use the <code>CallerMemberName</code> and <code>CallerFilePath</code> attributes in C#.</p>
<p>{% highlight csharp %}
public static bool Verbose(
string m,
[CallerMemberName] string memberName = &ldquo;?&rdquo;,
[CallerFilePath] string srcFile = &ldquo;?&rdquo;,
[CallerLineNumber] int srcNum = 0)
{
return JyTrace.ProviderJyTrace.EventWriteSimple(&ldquo;ETWTest&rdquo;, Path.GetFileName(srcFile), memberName, &ldquo;Trace:&rdquo;, m);
}
{% endhighlight %}</p>
<p>The actual log call:</p>
<p>{% highlight csharp %}
TraceCore.Verbose(&ldquo;Hello from CS!&rdquo;);
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/22/etw-part6">part 6</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-19-etw-part5/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-19-etw-part5/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 5] Logging with C# applications</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="getting-the-logs">Getting the logs</h1>
<p>Now that I have my modules spitting out logs for me, it&rsquo;s time to actually consume (or view) them. Most of the time, I use <code>MFTrace</code> and <code>logman</code> tools.</p>
<h1 id="mftrace">MFTrace</h1>
<p>Although <code>MFTrace</code> is primarily a tool for generating logs for Media Foundation apps, it is a great tool for viewing ETW logs in general as well. It is included in the MS SDK.</p>
<p>To view logs in real time, I use this command in either Powershell or command line:</p>
<p>{% highlight shell %}
mftrace -c config.xml
{% endhighlight %}</p>
<p>To stop the trace collection, press <code>CTRL+C</code>.</p>
<h1 id="logman">logman</h1>
<p><code>logman</code> is a very powerful builtin performance counter and event trace log tool from Microsoft. For more information, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490956.aspx">here</a>.</p>
<p>You can use <code>logman</code> as alternative to <code>MFTrace</code>.</p>
<h2 id="start-tracing">Start tracing</h2>
<p>{% highlight shell %}
logman start <name> -p &lt;provider_guid_or_name&gt; <kw> <level> -o &lt;output.etl&gt; -ets
{% endhighlight %}</p>
<h3 id="examples">Examples</h3>
<p>{% highlight shell %}
logman start lms -p {3A8FD7D2-CAB3-455D-A8E5-9E1741365FEB} 0x1 win:Verbose -o c:\output.etl -ets
logman start lms -p MyProviderName 0x3 win:Informational -o c:\output.etl -ets
logman start lms -p {277c604b-1962-47fa-9307-7ce0855dfea6} 0xffffffffffffffff 0xff -o c:\output.etl -ets
{% endhighlight %}</p>
<h2 id="stop-tracing">Stop tracing</h2>
<p>{% highlight shell %}
logman stop <name> -ets
{% endhighlight %}</p>
<h3 id="examples-1">Examples</h3>
<p>{% highlight shell %}
logman stop lms -ets
{% endhighlight %}</p>
<h1 id="collecting-etw-traces-from-testproduction-systems">Collecting ETW traces from test/production systems</h1>
<p>To collect ETW trace logs from test/production systems, manifest file and message/resource file need not be registered.</p>
<p>{% highlight shell %}
mftrace -c config.xml -o c:\output.etl
{% endhighlight %}</p>
<p><code>c:\output.etl</code> is just an example. You can use any location and any filename as long as the extension is .etl. The output .etl file can only be read on a system where the manifest file and the resource/message file are registered. To read the traces:</p>
<p>{% highlight shell %}
tracerpt -y output.etl
{% endhighlight %}</p>
<p>The default readable output file that contains all the trace information will be <code>dumpfile.xml</code>. A <code>summary.txt</code> file will also be generated. For more information about <code>tracerpt</code>, have a look at <a href="https://technet.microsoft.com/en-us/library/bb490959.aspx">here</a>.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/19/etw-part5">part 5</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-07-etw-part4/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-07-etw-part4/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 4] Log collection</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>If you remember in part 2, we compiled our manifest file with</p>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>and we got a header file as one of the outputs. We just have to include that header file to our sources and we are good to go.</p>
<p>{% highlight cpp %}
#include &hellip;
#include &ldquo;&lt;manifest_file&gt;.h&rdquo;</p>
<p>int main(&hellip;)
{
EventRegister&lt;provider_name_in_manifest&gt;();
&hellip;
CreateFile(&hellip;);
// Example of using the LastError event in our manifest file
EventWriteLastError(L&quot;THIS_EXE&quot;, <strong>FILE</strong>, <strong>FUNC</strong>, L&quot;CreateFile&quot;, GetLastError());
&hellip;
EventUnregister&lt;provider_name_in_manifest&gt;();
}
{% endhighlight %}</p>
<h1 id="notes">Notes</h1>
<ul>
<li>Any module can use the ETW provider, be it dll or exe, simultaneously. But you can also create a provider for each module if you prefer.</li>
<li>For a dll, you can call the <code>EventRegister()</code> inside your <code>DllMain</code> -&gt; <code>DLL_PROCESS_ATTACH</code> and your <code>EventUnregister()</code> in <code>DLL_PROCESS_DETACH</code>.</li>
</ul>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/07/etw-part4">part 4</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-03-etw-part3/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-03-etw-part3/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 3] Logging with C/C++ applications</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<h1 id="compiling-the-manifest-file">Compiling the manifest file</h1>
<p>This is how I compiled my manifest file.</p>
<ul>
<li>Open Visual Studio command prompt.</li>
<li>Compile manifest file.</li>
</ul>
<p>{% highlight shell %}
mc -um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>When successful, output files are:</p>
<p>{% highlight shell %}
<filename>.h
<filename>.rc
<filename>TEMP.BIN
MSG00001.bin
{% endhighlight %}</p>
<h1 id="creating-the-message-resource-dll">Creating the message resource DLL</h1>
<p>I like to create a separate dll just for the manifest file resource although you can also add the .rc file to any of your existing dll or exe.</p>
<h2 id="compile-rc-to-res">Compile .rc to .res</h2>
<p>{% highlight shell %}
rc <filename>.rc
{% endhighlight %}</p>
<h2 id="create-dll-from-res">Create .dll from .res</h2>
<p>{% highlight shell %}
link -dll -noentry -out:<out>.dll <filename>.res
{% endhighlight %}</p>
<h1 id="register-the-manifest-to-the-system-optional">Register the manifest to the system (optional)</h1>
<p>I always register the manifest file on my development systems. As for client systems, its up to you. I dont.</p>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil im &lt;manifest_file&gt;.man /rf:&ldquo;full_path_to_resource_dll&rdquo; /mf:&ldquo;full_path_to_resource_dll&rdquo;
{% endhighlight %}</p>
<h1 id="remove-the-manifest-from-the-system">Remove the manifest from the system</h1>
<p>Open admin command prompt and execute</p>
<p>{% highlight shell %}
wevtutil um &lt;manifest_file&gt;.man
{% endhighlight %}</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/03/etw-part3">part 3</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-02-etw-part2/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-02-etw-part2/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 2] Manifest file compilation and setup</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Check out the codes in <a href="https://github.com/idrilsilverfoot/win32-etw-manifest">GitHub</a>.</p>
<p>Ive been using ETW as my go-to logging mechanism for Windows development. I will be sharing how I setup my environment here.</p>
<h1 id="creating-the-manifest-file-man">Creating the manifest file (.man)</h1>
<p>I use <code>ecmangen.exe</code> to create my manifest file. This tool is included in the SDK. I have Visual Studio 2015 installed on a Win10 64-bit machine, and its location is <code>C:\Program Files (x86)\Windows Kits\10\bin\x64\</code>. It looks something like this (my completed manifest):</p>
<p>{% include image.html url=&quot;../../../../images/etw1.png&quot; %}</p>
<p>The red strip is the manifest file name, or my ETW provider name.</p>
<p>I started by right-clicking Events Section -&gt; New -&gt; Provider, then gave it a name. Then prepended the string Provider to the existing name for the Symbol, auto-generated the GUID, left the other fields as blank, then Save.</p>
<h1 id="setting-up-keywords">Setting up Keywords</h1>
<p>{% include image.html url=&quot;../../../../images/etw2.png&quot; %}</p>
<p>Keywords basically is a mask for filtering log outputs. Mine is just a simple logging mechanism so I have only two keywords. Im not even using <code>KeywordFunctionEntryExit</code> (set to 0x1) that much nowadays so <code>KeywordGeneric</code> (set to 0x2) for me is enough. With this, I have the option later to output only the logs with the keyword <code>KeywordFunctionEntryExit</code> or <code>KeywordGeneric</code>, or both.</p>
<h1 id="setting-up-templates">Setting up Templates</h1>
<p>{% include image.html url=&quot;../../../../images/etw3.png&quot; %}</p>
<p>Templates are, well, templates for the events (in this context, a log is basically an event). Templates will contain the fields (with data types) I want to include in my log. My goal was to have logs with a format of <code>[module_name: src_file_name:  function_name] key: value</code>, where <code>key</code> would be any label, say, variable name, and <code>value</code> as, well, any value, be it int or bool, or last error, etc. I thought that this format is generic enough for me to log any information from my code.</p>
<p>All events require a template (whether your template or default, which I admit I have never used). Multiple events can use a single template.</p>
<h1 id="setting-up-events">Setting up Events</h1>
<p>{% include image.html url=&quot;../../../../images/etw4.png&quot; %}</p>
<p>Lastly, the events themselves. From the image above, I defined quite a number of events. If you noticed, my <code>LastError</code> event (which I use to log the <code>GetLastError()</code> API) specified the template <code>TemplateKeyValueLastError</code> and the keyword <code>KeywordGeneric</code>.</p>
<p>When the manifest file is compiled, all the defined events by default (can be modified during compilation) will generate a logging API with the name <code>EventWrite&lt;event_name&gt;</code>, which in the case of the highlighted one, <code>EventWriteLastError()</code>.</p>
<p>Another thing to point out is the <code>Message</code>. The <code>%[number]</code> corresponds to the fields defined in the template used. First field will be %1, second field will be %2, and so on and so on.</p>
<p>Lastly, save your manifest file. The xml file will have a <code>.man</code> extension.</p>
<p>Check out <a href="http://flowerinthenight.com/blog/2016/03/02/etw-part2">part 2</a>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:localhost:1313,0001-01-01:/blog/2016-03-01-etw-part1/</guid>

                
                    <link>http://localhost:1313/blog/2016-03-01-etw-part1/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>[Part 1] How I set up ETW for logging (native, .NET, Metro and UApp)</title>
                
            </item>
        
    </channel>
</rss>
